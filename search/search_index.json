{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProcessWire API Documentation Markdown","text":""},{"location":"config/config-request-path/","title":"Config request path","text":""},{"location":"config/config-request-path/#current-unsanitized-request-path-url-sans-processwire-installation-subdirectory-if-present","title":"Current unsanitized request path (URL sans ProcessWire installation subdirectory, if present)","text":"<p>This excludes any subdirectories leading to ProcessWire installation root, if present. Useful if you need to know request path from /site/config.php or other boot file.</p> <p>Available since version 3.0.175.</p>"},{"location":"config/config-request-path/#example","title":"Example","text":"<pre><code>if(strpos($config-&gt;requestPath(), '/processwire/') === 0) {\n  // current request path starts with \u201c/processwire/\u201d\n}\nif($config-&gt;requestPath('/processwire/')) {\n  // the text \u201c/processwire/\u201d appears somewhere in current request path\n}\nif($config-&gt;requestPath([ 'foo', 'bar', 'baz' ])) {\n  // current request has one or more of 'foo', 'bar', 'baz' in the path\n}\n</code></pre>"},{"location":"config/config-request-path/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $config-&gt;requestPath();\n\n// usage with all arguments\n$string = $config-&gt;requestPath($match = '');\n</code></pre>"},{"location":"config/config-request-path/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>match</code> (optional)</p> <p>string, array</p> <p>Optionally return path only if some part matches given string(s) (default='')</p>"},{"location":"config/config-request-path/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns path string or blank string if $match argument used and doesn\u2019t match.</p>"},{"location":"config/config-request-url/","title":"Config request url","text":""},{"location":"config/config-request-url/#current-unsanitized-request-url","title":"Current unsanitized request URL","text":"<ul> <li>This is an alternative to <code>$input-&gt;url()</code> that\u2019s available prior to API ready state.</li> <li>Useful if you need to know request URL from /site/config.php or other boot file.</li> <li>Returned value does not include query string, if present.</li> <li>Returned value includes installation subdirectory, if present.</li> </ul> <p>Available since version 3.0.175.</p>"},{"location":"config/config-request-url/#example","title":"Example","text":"<pre><code>if($config-&gt;requestUrl() === '/products/2021/') {\n  // current request URL is exactly \u201c/products/2021/\u201d\n}\nif($config-&gt;requestUrl('/products/2021/')) {\n  // current request matches \u201c/products/2021/\u201d somewhere in URL\n}\nif($config-&gt;requestUrl([ 'foo', 'bar', 'baz' ])) {\n  // current request has one or more of 'foo', 'bar', 'baz' in the URL\n}\n</code></pre>"},{"location":"config/config-request-url/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $config-&gt;requestUrl();\n\n// usage with all arguments\n$string = $config-&gt;requestUrl($match = '', string $get = '');\n</code></pre>"},{"location":"config/config-request-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>match</code> (optional)</p> <p>string, array</p> <p>Optionally return URL only if some part matches given string(s) (default='')</p> <p><code>get</code> (optional)</p> <p>string</p> <p>Specify 'path' to get and/or match path, 'query' to get and/or match query string, or omit for URL (default='')</p>"},{"location":"config/config-request-url/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns URL string or blank string if $match argument used and doesn\u2019t match.</p>"},{"location":"config/config-set-location/","title":"Config set location","text":""},{"location":"config/config-set-location/#given-a-directory-to-a-named-location-updates-config-paths-and-config-urls-for-it","title":"Given a directory to a named location, updates $config-&gt;paths and $config-&gt;urls for it","text":"<ul> <li> <p>Paths relative to PW installation root should omit the leading slash, i.e. use <code>site/templates/</code> and NOT <code>/site/templates/</code>.</p> </li> <li> <p>If specifying just the <code>$dir</code> argument, it updates both <code>$config-&gt;paths</code> and <code>$config-&gt;urls</code> for it.</p> </li> <li> <p>If specifying both <code>$dir</code> and <code>$url</code> arguments, then <code>$dir</code> refers to <code>$config-&gt;paths</code> and <code>$url</code> refers to <code>$config-&gt;urls</code>.</p> </li> <li> <p>The <code>$for</code> argument can be: <code>cache</code>, <code>logs</code>, <code>files</code>, <code>tmp</code>, <code>templates</code>, or one of your own. Other named locations may also work, but since they can potentially be used before PW\u2019s \u201cready\u201d\u00a0state, they may not be reliable.</p> </li> <li> <p>Warning: anything that changes a system URL may make the URL no longer have the protection of the root .htaccess file. As a result, if you modify system URLs for anything on a live server, you should also update your .htaccess file to reflect your changes (while leaving existing rules for original URL in place).</p> </li> </ul> <p>The following example would be in /site/init.php or /site/ready.php (or equivalent module method). In this example we are changing the location (path and URL) of our /site/templates/ to use a new version of the files in /site/dev-templates/ so that we can test them out with user 'karen', while all other users on the site get our regular templates.</p> <p>Available since version 3.0.141.</p>"},{"location":"config/config-set-location/#example","title":"Example","text":"<pre><code>// change templates path and URL to /site/dev-templates/ when user name is 'karen'\nif($user-&gt;name == 'karen') {\n  $config-&gt;setLocation('templates', 'site/dev-templates/');\n}\n</code></pre>"},{"location":"config/config-set-location/#usage","title":"Usage","text":"<pre><code>// basic usage\n$self = $config-&gt;setLocation(string $for, string $dir);\n\n// usage with all arguments\n$self = $config-&gt;setLocation(string $for, string $dir, $url = '');\n</code></pre>"},{"location":"config/config-set-location/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>for</code></p> <p>string</p> <p>Named location from <code>$config-&gt;paths</code> or <code>$config-&gt;urls</code>, one of: <code>cache</code>, <code>logs</code>, <code>files</code>, <code>tmp</code>, <code>templates</code>, or your own.</p> <p><code>dir</code></p> <p>string</p> <p>Directory or URL to the location. Should be either a path or URL relative to current installation root (recommended), or an absolute disk path that resolves somewhere in current installation root. If specifying an absolute path outside of the installation root, then you\u2019ll also want to provide the $url argument since PW won\u2019t know it. You may also specify a blank string for this argument if you only want to set the $url argument.</p> <p><code>url</code> (optional)</p> <p>string, bool</p> <p>If the $dir argument represents both the path and URL relative to site root, you can omit this argument. If path and URL cannot be derived from one another, or you only want to modify the $url (leaving $dir blank), you can specify the URL in this argument. Specify boolean false if you only want to set the $dir (path) and not detect the $url from it.</p>"},{"location":"config/config-set-location/#return-value","title":"Return value","text":"<p><code>self</code></p>"},{"location":"config/config-set-location/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If request cannot be accommodated</li> </ul>"},{"location":"field/field-add-tag/","title":"Field add tag","text":""},{"location":"field/field-add-tag/#add-one-or-more-tags","title":"Add one or more tags","text":"<p>Available since version 3.0.106.</p>"},{"location":"field/field-add-tag/#usage","title":"Usage","text":"<pre><code>$array = $field-&gt;addTag(string $tag);\n</code></pre>"},{"location":"field/field-add-tag/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>tag</code></p> <p>string</p>"},{"location":"field/field-add-tag/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returns current tag list</p>"},{"location":"field/field-debug-info-small/","title":"Field debug info small","text":""},{"location":"field/field-debug-info-small/#usage","title":"Usage","text":"<pre><code>$field-&gt;debugInfoSmall();\n</code></pre>"},{"location":"field/field-edit-url/","title":"Field edit url","text":""},{"location":"field/field-edit-url/#get-url-to-edit-field-in-the-admin","title":"Get URL to edit field in the admin","text":"<p>Available since version 3.0.151.</p>"},{"location":"field/field-edit-url/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $field-&gt;editUrl();\n\n// usage with all arguments\n$string = $field-&gt;editUrl($options = []);\n</code></pre>"},{"location":"field/field-edit-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array, bool, string</p> <p>Specify array of options, string for find option, or bool for http option.</p> <ul> <li><code>find</code> (string): Name of field to find in editor form</li> <li><code>http</code> (bool): True to force inclusion of scheme and hostname</li> </ul>"},{"location":"field/field-edit-url/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"fieldgroup/fieldgroup-get-field-context/","title":"Fieldgroup get field context","text":""},{"location":"fieldgroup/fieldgroup-get-field-context/#get-a-field-that-is-part-of-this-fieldgroup-in-the-context-of-this-fieldgroup","title":"Get a Field that is part of this Fieldgroup, in the context of this Fieldgroup.","text":"<p>Returned Field will be a clone of the original with additional context data already populated to it.</p>"},{"location":"fieldgroup/fieldgroup-get-field-context/#usage","title":"Usage","text":"<pre><code>// basic usage\n$field = $fieldgroup-&gt;getFieldContext($key);\n\n// usage with all arguments\n$field = $fieldgroup-&gt;getFieldContext($key, string $namespace = '');\n</code></pre>"},{"location":"fieldgroup/fieldgroup-get-field-context/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, int, Field</p> <p>Field object, name or id.</p> <p><code>namespace</code> (optional)</p> <p>string</p> <p>Optional namespace string for context</p>"},{"location":"fieldgroup/fieldgroup-get-field-context/#return-value","title":"Return value","text":"<p><code>Field</code> <code>null</code></p>"},{"location":"fieldgroup/fieldgroup-get-field/","title":"Fieldgroup get field","text":""},{"location":"fieldgroup/fieldgroup-get-field/#get-a-field-that-is-part-of-this-fieldgroup","title":"Get a field that is part of this fieldgroup","text":"<p>Same as <code>Fieldgroup::get()</code> except that it only checks fields, not other properties of a fieldgroup. Meaning, this is the preferred way to retrieve a Field from a Fieldgroup.</p>"},{"location":"fieldgroup/fieldgroup-get-field/#usage","title":"Usage","text":"<pre><code>// basic usage\n$field = $fieldgroup-&gt;getField($key);\n\n// usage with all arguments\n$field = $fieldgroup-&gt;getField($key, $useFieldgroupContext = false);\n</code></pre>"},{"location":"fieldgroup/fieldgroup-get-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, int, Field</p> <p>Field object, name or id.</p> <p><code>useFieldgroupContext</code> (optional)</p> <p>bool, string</p> <p>Optionally specify one of the following (default=false):</p> <ul> <li><code>true</code> (boolean) Returned Field will be a clone of the original with context data set.</li> <li>Specify a namespace (string) to retrieve context within that namespace.</li> </ul>"},{"location":"fieldgroup/fieldgroup-get-field/#return-value","title":"Return value","text":"<p><code>Field</code> <code>null</code></p> <p>Field object when present in this Fieldgroup, or null if not.</p>"},{"location":"fieldgroup/fieldgroup-get/","title":"Fieldgroup get","text":""},{"location":"fieldgroup/fieldgroup-get/#get-a-fieldgroup-property-or-a-field","title":"Get a Fieldgroup property or a Field.","text":"<p>It is preferable to use <code>Fieldgroup::getField()</code> to retrieve fields from the Fieldgroup because the scope of this <code>get()</code> method means it can return more than just Field object.</p>"},{"location":"fieldgroup/fieldgroup-get/#usage","title":"Usage","text":"<pre><code>$field = $fieldgroup-&gt;get($key);\n</code></pre>"},{"location":"fieldgroup/fieldgroup-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, int</p> <p>Property name to retrieve, or Field name</p>"},{"location":"fieldgroup/fieldgroup-get/#return-value","title":"Return value","text":"<p><code>Field</code> <code>string</code> <code>int</code> <code>null</code> <code>array</code></p> <p>Value of item requested, or null if it doesn't exist.</p>"},{"location":"fieldgroup/fieldgroup-get/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"fields/fields-clone/","title":"Fields clone","text":""},{"location":"fields/fields-clone/#create-and-return-a-cloned-copy-of-the-given-field","title":"Create and return a cloned copy of the given Field","text":"<p>If no name is specified and the new item uses a 'name' field, it will contain a number at the end to make it unique</p>"},{"location":"fields/fields-clone/#usage","title":"Usage","text":"<pre><code>// basic usage\n$field = $fields-&gt;clone($item);\n\n// usage with all arguments\n$field = $fields-&gt;clone($item, string $name = '');\n</code></pre>"},{"location":"fields/fields-clone/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Field, Saveable</p> <p>Field to clone</p> <p><code>name</code> (optional)</p> <p>string</p> <p>Optionally specify name for new cloned item</p>"},{"location":"fields/fields-clone/#return-value","title":"Return value","text":"<p><code>Field</code></p> <p>$item Returns the new clone on success, or false on failure</p>"},{"location":"fields/fields-delete/","title":"Fields delete","text":""},{"location":"fields/fields-delete/#delete-a-field-from-the-database","title":"Delete a Field from the database","text":"<p>This method will throw a WireException if you attempt to delete a field that is currently in use (i.e. assigned to one or more fieldgroups).</p>"},{"location":"fields/fields-delete/#usage","title":"Usage","text":"<pre><code>$bool = $fields-&gt;delete($item);\n</code></pre>"},{"location":"fields/fields-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Field, Saveable</p> <p>Field to delete</p>"},{"location":"fields/fields-delete/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"fields/fields-delete/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"fieldtype/fieldtype-get-blank-value/","title":"Fieldtype get blank value","text":""},{"location":"fieldtype/fieldtype-get-blank-value/#return-the-blank-value-for-this-fieldtype-whether-that-is-a-blank-string-zero-value-blank-object-or-array","title":"Return the blank value for this fieldtype, whether that is a blank string, zero value, blank object or array","text":"<p>Default/non-implemented behavior is to return a blanks string.</p>"},{"location":"fieldtype/fieldtype-get-blank-value/#usage","title":"Usage","text":"<pre><code>$string = $fieldtype-&gt;getBlankValue($page, Field $field);\n</code></pre>"},{"location":"fieldtype/fieldtype-get-blank-value/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page, NullPage</p> <p><code>field</code></p> <p>Field</p>"},{"location":"fieldtype/fieldtype-get-blank-value/#return-value","title":"Return value","text":"<p><code>string</code> <code>int</code> <code>object</code> <code>null</code></p>"},{"location":"fieldtype/fieldtype-get-load-query-autojoin/","title":"Fieldtype get load query autojoin","text":""},{"location":"fieldtype/fieldtype-get-load-query-autojoin/#return-the-query-used-for-autojoining-this-field-if-different-from-getloadquery-or-null-if-autojoin-not-allowed","title":"Return the query used for Autojoining this field (if different from getLoadQuery) or NULL if autojoin not allowed.","text":""},{"location":"fieldtype/fieldtype-get-load-query-autojoin/#usage","title":"Usage","text":"<pre><code>$databaseQuerySelect = $fieldtype-&gt;getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query);\n</code></pre>"},{"location":"fieldtype/fieldtype-get-load-query-autojoin/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code></p> <p>Field</p> <p><code>query</code></p> <p>DatabaseQuerySelect</p>"},{"location":"fieldtype/fieldtype-get-load-query-autojoin/#return-value","title":"Return value","text":"<p><code>DatabaseQuerySelect</code> <code>null</code></p>"},{"location":"fieldtype/fieldtype-get-load-query/","title":"Fieldtype get load query","text":""},{"location":"fieldtype/fieldtype-get-load-query/#return-the-query-used-for-loading-all-parts-of-the-data-from-this-field","title":"Return the query used for loading all parts of the data from this field.","text":""},{"location":"fieldtype/fieldtype-get-load-query/#usage","title":"Usage","text":"<pre><code>$databaseQuerySelect = $fieldtype-&gt;getLoadQuery(Field $field, DatabaseQuerySelect $query);\n</code></pre>"},{"location":"fieldtype/fieldtype-get-load-query/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code></p> <p>Field</p> <p><code>query</code></p> <p>DatabaseQuerySelect</p>"},{"location":"fieldtype/fieldtype-get-load-query/#return-value","title":"Return value","text":"<p><code>DatabaseQuerySelect</code></p>"},{"location":"fieldtype/fieldtype-load-page-field/","title":"Fieldtype load page field","text":""},{"location":"fieldtype/fieldtype-load-page-field/#load-the-given-page-field-from-the-database-table-and-return-the-value","title":"Load the given page field from the database table and return the value.","text":"<ul> <li>Return NULL if the value is not available.</li> <li>Return the value as it exists in the database, without further processing.</li> <li>This is intended only to be called by Page objects on an as-needed basis.</li> <li>Typically this is only called for fields that don't have 'autojoin' turned on.</li> <li>Any actual conversion of the value should be handled by the <code>Fieldtype::wakeupValue()</code> method.</li> </ul>"},{"location":"fieldtype/fieldtype-load-page-field/#usage","title":"Usage","text":"<pre><code>$mixed = $fieldtype-&gt;loadPageField(Page $page, Field $field);\n</code></pre>"},{"location":"fieldtype/fieldtype-load-page-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p>Page object to save.</p> <p><code>field</code></p> <p>Field</p> <p>Field to retrieve from the page.</p>"},{"location":"fieldtype/fieldtype-load-page-field/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>null</code></p>"},{"location":"hook-event/hook-event-arguments-by-name/","title":"Hook event arguments by name","text":""},{"location":"hook-event/hook-event-arguments-by-name/#returns-an-array-of-all-arguments-indexed-by-name-or-the-value-of-a-single-specified-argument","title":"Returns an array of all arguments indexed by name, or the value of a single specified argument","text":"<p>Note: <code>$event-&gt;arguments('name')</code> can also be used as a shorter synonym for <code>$event-&gt;argumentsByName('name')</code>.</p>"},{"location":"hook-event/hook-event-arguments-by-name/#example","title":"Example","text":"<pre><code>// Get an array of all arguments indexed by name\n$arguments = $event-&gt;argumentsByName();\n\n// Get a specific argument by name\n$page = $event-&gt;argumentsByName('page');\n</code></pre>"},{"location":"hook-event/hook-event-arguments-by-name/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $event-&gt;argumentsByName();\n\n// usage with all arguments\n$mixed = $event-&gt;argumentsByName(string $n = '');\n</code></pre>"},{"location":"hook-event/hook-event-arguments-by-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>n</code> (optional)</p> <p>string</p> <p>Optional name of argument value to return. If not specified, array of all argument values returned.</p>"},{"location":"hook-event/hook-event-arguments-by-name/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>array</code></p> <p>Depending on whether you specify $n</p>"},{"location":"hook-event/hook-event-arguments/","title":"Hook event arguments","text":""},{"location":"hook-event/hook-event-arguments/#retrieve-or-set-a-hooked-function-argument","title":"Retrieve or set a hooked function argument","text":""},{"location":"hook-event/hook-event-arguments/#example","title":"Example","text":"<pre><code>// Retrieve first argument by index (0=first)\n$page = $event-&gt;arguments(0);\n\n// Retrieve array of all arguments\n$arguments = $event-&gt;arguments();\n\n// Retrieve argument by name\n$page = $event-&gt;arguments('page');\n\n// Set first argument by index\n$event-&gt;arguments(0, $page);\n\n// Set first argument by name\n$event-&gt;arguments('page', $page);\n</code></pre>"},{"location":"hook-event/hook-event-arguments/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $event-&gt;arguments();\n\n// usage with all arguments\n$array = $event-&gt;arguments(int $n = null, mixed $value = null);\n</code></pre>"},{"location":"hook-event/hook-event-arguments/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>n</code> (optional)</p> <p>int</p> <p>Zero based number of the argument you want to retrieve, where 0 is the first. May also be a string containing the argument name. Omit to return array of all arguments.</p> <p><code>value</code> (optional)</p> <p>mixed</p> <p>Value that you want to set to this argument, or omit to only return the argument.</p>"},{"location":"hook-event/hook-event-arguments/#return-value","title":"Return value","text":"<p><code>array</code> <code>null</code> <code>mixed</code></p>"},{"location":"hook-event/hook-event-get/","title":"Hook event get","text":""},{"location":"hook-event/hook-event-get/#get","title":"Get","text":"<ul> <li>If the given $key is an object, it will cast it to a string.</li> <li>If the given $key is a string with \"|\" pipe characters in it, it will try all till it finds a non-empty value.</li> <li>If given an API variable name, it will return that API variable unless the class has direct access API variables disabled.</li> </ul>"},{"location":"hook-event/hook-event-get/#example","title":"Example","text":"<pre><code>// Retrieve the value of a property\n$value = $item-&gt;get(\"some_property\");\n\n// Retrieve the value of the first non-empty property:\n$value = $item-&gt;get(\"property1|property2|property2\");\n\n// Retrieve a value using array access\n$value = $item[\"some_property\"];\n</code></pre>"},{"location":"hook-event/hook-event-get/#usage","title":"Usage","text":"<pre><code>$mixed = $event-&gt;get($key);\n</code></pre>"},{"location":"hook-event/hook-event-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>object, string</p> <p>Name of property you want to retrieve.</p>"},{"location":"hook-event/hook-event-get/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>null</code></p> <p>Returns value of requested property, or null if the property was not found.</p>"},{"location":"hook-event/hook-event-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"hook-event/hook-event-remove-hook/","title":"Hook event remove hook","text":""},{"location":"hook-event/hook-event-remove-hook/#remove-a-hook-by-id","title":"Remove a hook by ID","text":"<p>To remove the hook that this event is for, call it with the $hookId argument as null or blank.</p>"},{"location":"hook-event/hook-event-remove-hook/#example","title":"Example","text":"<pre><code>// Remove this hook event, preventing it from executing again\n$event-&gt;removeHook(null);\n</code></pre>"},{"location":"hook-event/hook-event-remove-hook/#usage","title":"Usage","text":"<pre><code>$hookEvent = $event-&gt;removeHook($hookId);\n</code></pre>"},{"location":"hook-event/hook-event-remove-hook/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>hookId</code></p> <p>string, HookEvent, null</p> <p>ID of hook to remove (ID is returned by the addHook() methods) Since 3.0.137 it may also be an array or CSV string of hook IDs to remove.</p>"},{"location":"hook-event/hook-event-remove-hook/#return-value","title":"Return value","text":"<p><code>HookEvent</code> <code>WireData</code></p> <p>$this</p>"},{"location":"inputfield/inputfield-add-class/","title":"Inputfield add class","text":""},{"location":"inputfield/inputfield-add-class/#add-a-class-or-classes-to-this-inputfield-or-a-wrapping-element","title":"Add a class or classes to this Inputfield (or a wrapping element)","text":"<p>If given a class name that\u2019s already present, it won\u2019t be added again.</p> <p>Formatted string option (3.0.204+): Classes can be added by formatted string that dictates what Inputfield element they should be added to, in the format <code>element:classNames</code> like in this example below:</p> <p>Each line represents a group containing an element name and one or more space-separated classes. Groups may be separated by newline (like above) or with a comma. The element name may be any one of the following:</p> <ul> <li><code>wrap</code>: The .Inputfield element that wraps the header and content</li> <li><code>header</code>: The .InputfieldHeader element, typically a <code>&lt;label&gt;</code>.</li> <li><code>content</code>: The .InputfieldContent element that wraps the input(s), typically a <code>&lt;div&gt;</code>.</li> <li><code>input</code>: The primary <code>&lt;input&gt;</code> element(s) that accept input for the Inputfield.</li> <li><code>class</code>: This is the same as the 'input' type, just an alias.</li> </ul> <p>Class names prefixed with a minus sign i.e. <code>-class</code> will be removed rather than added.</p>"},{"location":"inputfield/inputfield-add-class/#examples","title":"Examples","text":"<pre><code>// Add class \"foobar\" to input element\n$inputfield-&gt;addClass('foobar');\n\n// Add three classes to input element\n$inputfield-&gt;addClass('foo bar baz');\n\n// Add class \"foobar\" to .Inputfield wrapping element\n$inputfield-&gt;addClass('foobar', 'wrapClass');\n\n// Add classes while specifying Inputfield element (3.0.204+)\n$inputfield-&gt;addClass('wrap:card, header:card-header, content:card-body');\n\nwrap:card card-default\nheader:card-header\ncontent:card-body\ninput:form-input input-checkbox\n</code></pre>"},{"location":"inputfield/inputfield-add-class/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield-&gt;addClass($class);\n\n// usage with all arguments\n$inputfield-&gt;addClass($class, string $property = 'class');\n</code></pre>"},{"location":"inputfield/inputfield-add-class/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>class</code></p> <p>string, array</p> <p>Specify one of the following:</p> <ul> <li>Class name you want to add.</li> <li>Multiple space-separated class names you want to add.</li> <li>Array of class names you want to add (since 3.0.16).</li> <li>Formatted string of classes as described in method description (since 3.0.204+).</li> </ul> <p><code>property</code> (optional)</p> <p>string</p> <p>Optionally specify the type of class you want to add:</p> <ul> <li>Omit for the default (which is \"class\").</li> <li><code>class</code> (string): Add class to the input element (or whatever the Inputfield default is).</li> <li><code>wrapClass</code> (string): Add class to \".Inputfield\" wrapping element, the most outer level element used for this Inputfield.</li> <li><code>headerClass</code> (string): Add class to \".InputfieldHeader\" label element.</li> <li><code>contentClass</code> (string): Add class to \".InputfieldContent\" wrapping element.</li> <li>Or some other named class attribute designated by a descending Inputfield.</li> <li>You can optionally omit the <code>Class</code> suffix in 3.0.204+, i.e. <code>wrap</code> rather than <code>wrapClass</code>.</li> </ul>"},{"location":"inputfield/inputfield-add-class/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-add-class/#see-also","title":"See Also","text":"<ul> <li>Inputfield::hasClass()</li> <li>Inputfield::removeClass()</li> </ul>"},{"location":"inputfield/inputfield-attr/","title":"Inputfield attr","text":""},{"location":"inputfield/inputfield-attr/#get-or-set-an-attribute-or-multiple-attributes","title":"Get or set an attribute (or multiple attributes)","text":"<ul> <li>To get an attribute call this method with just the attribute name.</li> <li>To set an attribute call this method with the attribute name and value to set.</li> <li>You can also set multiple attributes at once, see examples below.</li> <li>To get all attributes, just specify boolean true as first argument (since 3.0.16).</li> </ul>"},{"location":"inputfield/inputfield-attr/#example","title":"Example","text":"<pre><code>// Get the \"value\" attribute\n$value = $inputfield-&gt;attr('value');\n\n// Set the \"value\" attribute\n$inputfield-&gt;attr('value', 'Foo and Bar');\n\n// Set multiple attributes\n$inputfield-&gt;attr([\n  'name' =&gt; 'foobar',\n  'value' =&gt; 'Foo and Bar',\n  'class' =&gt; 'foo-bar',\n]);\n\n// Set name and id attribute to \"foobar\"\n$inputfield-&gt;attr(\"name+id\", \"foobar\");\n\n// Get all attributes in associative array (since 3.0.16)\n$attrs = $inputfield-&gt;attr(true);\n</code></pre>"},{"location":"inputfield/inputfield-attr/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield = $inputfield-&gt;attr($key);\n\n// usage with all arguments\n$inputfield = $inputfield-&gt;attr($key, $value = null);\n</code></pre>"},{"location":"inputfield/inputfield-attr/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, array, bool</p> <p>Specify one of the following:</p> <ul> <li>Name of attribute to get (if getting an attribute).</li> <li>Name of attribute to set (if setting an attribute, and also specifying a value).</li> <li>Aassociative array to set multiple attributes.</li> <li>String with attributes split by \"+\" or \"|\" to set them all to have the same value.</li> <li>Specify boolean true to get all attributes in an associative array.</li> </ul> <p><code>value</code> (optional)</p> <p>string, int, bool, null</p> <p>Value to set (if setting), omit otherwise.</p>"},{"location":"inputfield/inputfield-attr/#return-value","title":"Return value","text":"<p><code>Inputfield</code> <code>array</code> <code>string</code> <code>int</code> <code>object</code> <code>float</code></p> <p>If setting an attribute, it returns this instance. If getting an attribute, the attribute is returned.</p>"},{"location":"inputfield/inputfield-attr/#see-also","title":"See Also","text":"<ul> <li>Inputfield::removeAttr()</li> <li>Inputfield::addClass()</li> <li>Inputfield::removeClass()</li> </ul>"},{"location":"inputfield/inputfield-clear-errors/","title":"Inputfield clear errors","text":""},{"location":"inputfield/inputfield-clear-errors/#clear-errors-from-this-inputfield","title":"Clear errors from this Inputfield","text":"<p>This is the same as <code>$inputfield-&gt;getErrors(true);</code> but has no return value.</p> <p>Available since version 3.0.205.</p>"},{"location":"inputfield/inputfield-clear-errors/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;clearErrors();\n</code></pre>"},{"location":"inputfield/inputfield-editable/","title":"Inputfield editable","text":""},{"location":"inputfield/inputfield-editable/#get-or-set-editable-state-for-this-inputfield","title":"Get or set editable state for this Inputfield","text":"<p>When set to false, the <code>Inputfield::processInput()</code> method won't be called by parent InputfieldWrapper, effectively skipping over input processing entirely for this Inputfield.</p>"},{"location":"inputfield/inputfield-editable/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $inputfield-&gt;editable();\n\n// usage with all arguments\n$bool = $inputfield-&gt;editable($setEditable = null);\n</code></pre>"},{"location":"inputfield/inputfield-editable/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>setEditable</code> (optional)</p> <p>bool, null</p> <p>Specify true or false to set the editable state, or omit just to get the editable state.</p>"},{"location":"inputfield/inputfield-editable/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns the current editable state.</p>"},{"location":"inputfield/inputfield-entity-encode/","title":"Inputfield entity encode","text":""},{"location":"inputfield/inputfield-entity-encode/#entity-encode-a-string-with-optional-markdown-support","title":"Entity encode a string with optional Markdown support.","text":"<ul> <li>Markdown support provided with second argument.</li> <li>If string is already entity-encoded it will first be decoded.</li> </ul>"},{"location":"inputfield/inputfield-entity-encode/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $inputfield-&gt;entityEncode(string $str);\n\n// usage with all arguments\n$string = $inputfield-&gt;entityEncode(string $str, $markdown = false);\n</code></pre>"},{"location":"inputfield/inputfield-entity-encode/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p> <p>String to encode</p> <p><code>markdown</code> (optional)</p> <p>bool, int</p> <p>Optionally specify one of the following:</p> <ul> <li><code>true</code> (boolean): To allow Markdown using default \"textFormat\" setting (which is basic Markdown by default).</li> <li><code>false</code> (boolean): To disallow Markdown support (this is the default when $markdown argument omitted).</li> <li><code>Inputfield::textFormatNone</code> (constant): Disallow Markdown support (default).</li> <li><code>Inputfield::textFormatBasic</code> (constant): To support basic/inline Markdown.</li> <li><code>Inputfield::textFormatMarkdown</code> (constant): To support full Markdown and HTML.</li> </ul>"},{"location":"inputfield/inputfield-entity-encode/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Entity encoded string or HTML string</p>"},{"location":"inputfield/inputfield-error/","title":"Inputfield error","text":""},{"location":"inputfield/inputfield-error/#record-an-error-for-this-inputfield","title":"Record an error for this Inputfield","text":"<p>The error message will be placed in the context of this Inputfield. See the <code>Wire::error()</code> method for full details on arguments and options.</p>"},{"location":"inputfield/inputfield-error/#example","title":"Example","text":"<pre><code>$this-&gt;error(\"This is the notice text\"); \n$this-&gt;error(\"This notice is also logged\", true);\n$this-&gt;error(\"This notice is only shown in debug mode\", Notice::debug);\n$this-&gt;error(\"This notice allows &lt;em&gt;markup&lt;/em&gt;\", Notice::allowMarkup);\n$this-&gt;error(\"Notice using multiple flags\", Notice::debug | Notice::logOnly);\n</code></pre>"},{"location":"inputfield/inputfield-error/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield-&gt;error(string $text);\n\n// usage with all arguments\n$inputfield-&gt;error(string $text, int $flags = 0);\n</code></pre>"},{"location":"inputfield/inputfield-error/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>text</code></p> <p>string</p> <p>Text of error message</p> <p><code>flags</code> (optional)</p> <p>int</p> <p>Optional flags</p>"},{"location":"inputfield/inputfield-error/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-error/#see-also","title":"See Also","text":"<ul> <li>Wire::errors()</li> <li>Wire::message()</li> <li>Wire::warning()</li> </ul>"},{"location":"inputfield/inputfield-get-class-array/","title":"Inputfield get class array","text":""},{"location":"inputfield/inputfield-get-class-array/#get-classes-in-array-for-given-class-property","title":"Get classes in array for given class property","text":"<p>Available since version 3.0.204.</p>"},{"location":"inputfield/inputfield-get-class-array/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $inputfield-&gt;getClassArray();\n\n// usage with all arguments\n$array = $inputfield-&gt;getClassArray(string $property = 'class', bool $assoc = false);\n</code></pre>"},{"location":"inputfield/inputfield-get-class-array/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>property</code> (optional)</p> <p>string</p> <p>One of 'wrap', 'header', 'content' or 'input' (or alias 'class')</p> <p><code>assoc</code> (optional)</p> <p>bool</p> <p>Return as associative array where both keys and values are class names? (default=false)</p>"},{"location":"inputfield/inputfield-get-class-array/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"inputfield/inputfield-get-config-allow-context/","title":"Inputfield get config allow context","text":""},{"location":"inputfield/inputfield-get-config-allow-context/#return-a-list-of-config-property-names-allowed-for-fieldgrouptemplate-context","title":"Return a list of config property names allowed for fieldgroup/template context","text":"<p>These should be the names of Inputfields returned by <code>Inputfield::getConfigInputfields()</code> or <code>Inputfield::getConfigArray()</code> that are allowed in fieldgroup/template context.</p> <p>The config property names specified here are allowed to be configured within the context of a given <code>Fieldgroup</code>, enabling the user to configure them independently per template in the admin.</p> <p>This is the equivalent to the [<code>Fieldtype::getConfigAllowContext()</code>](/api/ref/fieldtype/get-config-allow-con<code>Fieldtype::getConfigAllowContext()</code>/) method, but for the \"Input\" tab rather than the \"Details\" tab.</p>"},{"location":"inputfield/inputfield-get-config-allow-context/#usage","title":"Usage","text":"<pre><code>$array = $inputfield-&gt;getConfigAllowContext(Field $field);\n</code></pre>"},{"location":"inputfield/inputfield-get-config-allow-context/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code></p> <p>Field</p>"},{"location":"inputfield/inputfield-get-config-allow-context/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>of Inputfield names</p>"},{"location":"inputfield/inputfield-get-config-array/","title":"Inputfield get config array","text":""},{"location":"inputfield/inputfield-get-config-array/#alternative-method-for-configuration-that-allows-for-array-definition","title":"Alternative method for configuration that allows for array definition","text":"<ul> <li> <p>This method is typically used instead of the <code>Inputfield::getConfigInputfields</code> method for module authors that prefer to use the array definition.</p> </li> <li> <p>If both <code>getConfigInputfields()</code> and <code>getConfigArray()</code> are implemented, both will be used.</p> </li> <li> <p>See comments for <code>InputfieldWrapper::importArray()</code> for example of array definition.</p> </li> </ul>"},{"location":"inputfield/inputfield-get-config-array/#example","title":"Example","text":"<pre><code>// Example implementation\npublic function ___getConfigArray() {\n  return [\n    'test' =&gt; [\n      'type' =&gt; 'text',\n      'label' =&gt; 'This is a test',\n      'value' =&gt; 'Test'\n    ]\n  ];\n);\n</code></pre>"},{"location":"inputfield/inputfield-get-config-array/#usage","title":"Usage","text":"<pre><code>$array = $inputfield-&gt;getConfigArray();\n</code></pre>"},{"location":"inputfield/inputfield-get-config-array/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"inputfield/inputfield-get-config-inputfields/","title":"Inputfield get config inputfields","text":""},{"location":"inputfield/inputfield-get-config-inputfields/#get-any-custom-configuration-fields-for-this-inputfield","title":"Get any custom configuration fields for this Inputfield","text":"<ul> <li> <p>Intended to be extended by each Inputfield as needed to add more config options.</p> </li> <li> <p>The returned InputfieldWrapper ultimately ends up as the \"Input\" tab in the fields editor (admin).</p> </li> <li> <p>Descending Inputfield classes should first call this method from the parent class to get the default configuration fields and the InputfieldWrapper they can add to.</p> </li> <li> <p>Returned Inputfield instances with a name attribute that starts with an underscore, i.e. \"_myname\" are assumed to be for runtime use and are NOT stored in the database.</p> </li> <li> <p>If you prefer, you may instead implement the <code>Inputfield::getConfigArray()</code> method as an alternative.</p> </li> </ul>"},{"location":"inputfield/inputfield-get-config-inputfields/#example","title":"Example","text":"<pre><code>// Example getConfigInputfields() implementation\npublic function ___getConfigInputfields() {\n  // Get the defaults and $inputfields wrapper we can add to\n  $inputfields = parent::___getConfigInputfields();\n  // Add a new Inputfield to it\n  $f = $this-&gt;wire('modules')-&gt;get('InputfieldText');\n  $f-&gt;attr('name', 'first_name');\n  $f-&gt;attr('value', $this-&gt;get('first_name'));\n  $f-&gt;label = 'Your First Name';\n  $inputfields-&gt;add($f);\n  return $inputfields;\n}\n</code></pre>"},{"location":"inputfield/inputfield-get-config-inputfields/#usage","title":"Usage","text":"<pre><code>$inputfieldWrapper = $inputfield-&gt;getConfigInputfields();\n</code></pre>"},{"location":"inputfield/inputfield-get-config-inputfields/#return-value","title":"Return value","text":"<p><code>InputfieldWrapper</code></p> <p>Populated with Inputfield instances</p>"},{"location":"inputfield/inputfield-get-errors/","title":"Inputfield get errors","text":""},{"location":"inputfield/inputfield-get-errors/#return-array-of-strings-containing-errors-that-occurred-during-input-processing","title":"Return array of strings containing errors that occurred during input processing","text":"<p>Note that this is different from <code>Wire::errors()</code> in that it retrieves errors from the session rather than just the current run.</p>"},{"location":"inputfield/inputfield-get-errors/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $inputfield-&gt;getErrors();\n\n// usage with all arguments\n$array = $inputfield-&gt;getErrors(bool $clear = false);\n</code></pre>"},{"location":"inputfield/inputfield-get-errors/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>clear</code> (optional)</p> <p>bool</p> <p>Optionally clear the errors after getting them (Default=false).</p>"},{"location":"inputfield/inputfield-get-errors/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"inputfield/inputfield-get-form/","title":"Inputfield get form","text":""},{"location":"inputfield/inputfield-get-form/#get-the-inputfieldform-element-that-contains-this-field-or-null-if-not-yet-defined","title":"Get the InputfieldForm element that contains this field or null if not yet defined","text":"<p>This is the same as the <code>getRootParent()</code> method except that it returns null if root parent is not an InputfieldForm.</p> <p>Available since version 3.0.106.</p>"},{"location":"inputfield/inputfield-get-form/#usage","title":"Usage","text":"<pre><code>$inputfieldForm = $inputfield-&gt;getForm();\n</code></pre>"},{"location":"inputfield/inputfield-get-form/#return-value","title":"Return value","text":"<p><code>InputfieldForm</code> <code>null</code></p>"},{"location":"inputfield/inputfield-get-parent/","title":"Inputfield get parent","text":""},{"location":"inputfield/inputfield-get-parent/#get-this-inputfields-parent-inputfieldwrapper-or-null-if-it-doesnt-have-one","title":"Get this Inputfield\u2019s parent InputfieldWrapper, or NULL if it doesn\u2019t have one.","text":""},{"location":"inputfield/inputfield-get-parent/#usage","title":"Usage","text":"<pre><code>$inputfieldWrapper = $inputfield-&gt;getParent();\n</code></pre>"},{"location":"inputfield/inputfield-get-parent/#return-value","title":"Return value","text":"<p><code>InputfieldWrapper</code> <code>null</code></p>"},{"location":"inputfield/inputfield-get-parent/#see-also","title":"See Also","text":"<ul> <li>Inputfield::setParent()</li> </ul>"},{"location":"inputfield/inputfield-get-parents/","title":"Inputfield get parents","text":""},{"location":"inputfield/inputfield-get-parents/#get-array-of-all-parents-of-this-inputfield","title":"Get array of all parents of this Inputfield.","text":""},{"location":"inputfield/inputfield-get-parents/#usage","title":"Usage","text":"<pre><code>$array = $inputfield-&gt;getParents();\n</code></pre>"},{"location":"inputfield/inputfield-get-parents/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>of InputfieldWrapper elements.</p>"},{"location":"inputfield/inputfield-get-parents/#see-also","title":"See Also","text":"<ul> <li>Inputfield::getParent()</li> <li>Inputfield::setParent()</li> </ul>"},{"location":"inputfield/inputfield-get-root-parent/","title":"Inputfield get root parent","text":""},{"location":"inputfield/inputfield-get-root-parent/#get-the-root-parent-inputfieldwrapper-element-farthest-parent-commonly-inputfieldform","title":"Get the root parent InputfieldWrapper element (farthest parent, commonly InputfieldForm)","text":"<p>This returns null only if Inputfield it is called from has not yet been added to an InputfieldWrapper.</p> <p>Available since version 3.0.106.</p>"},{"location":"inputfield/inputfield-get-root-parent/#usage","title":"Usage","text":"<pre><code>$inputfieldForm = $inputfield-&gt;getRootParent();\n</code></pre>"},{"location":"inputfield/inputfield-get-root-parent/#return-value","title":"Return value","text":"<p><code>InputfieldForm</code> <code>InputfieldWrapper</code> <code>null</code></p>"},{"location":"inputfield/inputfield-get-setting/","title":"Inputfield get setting","text":""},{"location":"inputfield/inputfield-get-setting/#gets-a-setting-or-api-variable-from-the-inputfield-while-ignoring-attributes","title":"Gets a setting (or API variable) from the Inputfield, while ignoring attributes.","text":"<p>This is good to use in cases where there are potential name conflicts, like when there is a field literally named \"collapsed\" or \"required\".</p>"},{"location":"inputfield/inputfield-get-setting/#usage","title":"Usage","text":"<pre><code>$mixed = $inputfield-&gt;getSetting(string $key);\n</code></pre>"},{"location":"inputfield/inputfield-get-setting/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of setting or API variable to retrieve.</p>"},{"location":"inputfield/inputfield-get-setting/#return-value","title":"Return value","text":"<p><code>mixed</code></p> <p>Value of setting or API variable, or NULL if not found.</p>"},{"location":"inputfield/inputfield-get/","title":"Inputfield get","text":""},{"location":"inputfield/inputfield-get/#get-a-property-or-attribute-from-the-inputfield","title":"Get a property or attribute from the Inputfield","text":"<ul> <li> <p>This can also be accessed directly, i.e. <code>$value = $inputfield-&gt;property;</code>.</p> </li> <li> <p>For getting attribute values, this will work, but it is preferable to use the <code>Inputfield::attr()</code> method.</p> </li> <li> <p>For getting non-attribute values that have potential name conflicts with attributes (or just as a reliable alternative), use the <code>Inputfield::getSetting()</code> method instead, which excludes the possibility of overlap with attributes.</p> </li> </ul>"},{"location":"inputfield/inputfield-get/#example","title":"Example","text":"<pre><code>// Retrieve the value of a property\n$value = $item-&gt;get(\"some_property\");\n\n// Retrieve the value of the first non-empty property:\n$value = $item-&gt;get(\"property1|property2|property2\");\n\n// Retrieve a value using array access\n$value = $item[\"some_property\"];\n</code></pre>"},{"location":"inputfield/inputfield-get/#usage","title":"Usage","text":"<pre><code>$mixed = $inputfield-&gt;get(string $key);\n</code></pre>"},{"location":"inputfield/inputfield-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property or attribute to retrieve.</p>"},{"location":"inputfield/inputfield-get/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>null</code></p> <p>Value of property or attribute, or NULL if not found.</p>"},{"location":"inputfield/inputfield-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"inputfield/inputfield-has-class/","title":"Inputfield has class","text":""},{"location":"inputfield/inputfield-has-class/#does-this-inputfield-have-the-given-class-name-or-names","title":"Does this Inputfield have the given class name (or names)?","text":""},{"location":"inputfield/inputfield-has-class/#example","title":"Example","text":"<pre><code>if($inputfield-&gt;hasClass('foo')) {\n  // This Inputfield has a class attribute with \"foo\"\n}\n\nif($inputfield-&gt;hasClass('bar', 'wrapClass')) {\n  // This .Inputfield wrapper has a class attribute with \"bar\"\n}\n\nif($inputfield-&gt;hasClass('foo bar')) {\n  // This Inputfield has both \"foo\" and \"bar\" classes (Since 3.0.16)\n}\n</code></pre>"},{"location":"inputfield/inputfield-has-class/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $inputfield-&gt;hasClass($class);\n\n// usage with all arguments\n$bool = $inputfield-&gt;hasClass($class, string $property = 'class');\n</code></pre>"},{"location":"inputfield/inputfield-has-class/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>class</code></p> <p>string, array</p> <p>Specify class name or one of the following:</p> <ul> <li>String containing name of class you want to check (string).</li> <li>String containing Space separated string class names you want to check, all must be present for this method to return true. (Since 3.0.16)</li> <li>Array of class names you want to check, all must be present for this method to return true. (Since 3.0.16)</li> </ul> <p><code>property</code> (optional)</p> <p>string</p> <p>Optionally specify property you want to pull class from:</p> <ul> <li><code>class</code> (string): Default setting. Class for the input element (or whatever the Inputfield default is).</li> <li><code>wrapClass</code> (string): Class for the \".Inputfield\" wrapping element, the most outer level element used for this Inputfield.</li> <li><code>headerClass</code> (string): Class for the \".InputfieldHeader\" label element.</li> <li><code>contentClass</code> (string): Class for the \".InputfieldContent\" wrapping element.</li> <li>Or some other class property defined by a descending Inputfield class.</li> </ul>"},{"location":"inputfield/inputfield-has-class/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"inputfield/inputfield-has-class/#see-also","title":"See Also","text":"<ul> <li>Inputfield::addClass()</li> <li>Inputfield::removeClass()</li> </ul>"},{"location":"inputfield/inputfield-has/","title":"Inputfield has","text":""},{"location":"inputfield/inputfield-has/#does-this-inputfield-have-the-requested-property-or-attribute","title":"Does this Inputfield have the requested property or attribute?","text":""},{"location":"inputfield/inputfield-has/#example","title":"Example","text":"<pre><code>if($item-&gt;has('some_property')) {\n  // the item has some_property\n}\n</code></pre>"},{"location":"inputfield/inputfield-has/#usage","title":"Usage","text":"<pre><code>$bool = $inputfield-&gt;has(string $key);\n</code></pre>"},{"location":"inputfield/inputfield-has/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Requested property or attribute.</p>"},{"location":"inputfield/inputfield-has/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if it has it, false if it doesn't</p>"},{"location":"inputfield/inputfield-init/","title":"Inputfield init","text":""},{"location":"inputfield/inputfield-init/#per-the-module-interface-init-is-called-after-any-configuration-data-has-been-populated-to-the-inputfield-but-before-render","title":"Per the Module interface, init() is called after any configuration data has been populated to the Inputfield, but before render.","text":""},{"location":"inputfield/inputfield-init/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;init();\n</code></pre>"},{"location":"inputfield/inputfield-install/","title":"Inputfield install","text":""},{"location":"inputfield/inputfield-install/#per-the-module-interface-this-method-is-called-when-this-inputfield-is-installed","title":"Per the Module interface, this method is called when this Inputfield is installed","text":""},{"location":"inputfield/inputfield-install/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;install();\n</code></pre>"},{"location":"inputfield/inputfield-is-empty/","title":"Inputfield is empty","text":""},{"location":"inputfield/inputfield-is-empty/#is-this-inputfield-empty-value-attribute-reflects-an-empty-state","title":"Is this Inputfield empty? (Value attribute reflects an empty state)","text":"<p>Return true if this field is empty (no value or blank value), or false if it\u2019s not empty.</p> <p>Used by the 'required' check to see if the field is populated, and descending Inputfields may override this according to their own definition of 'empty'.</p>"},{"location":"inputfield/inputfield-is-empty/#usage","title":"Usage","text":"<pre><code>$bool = $inputfield-&gt;isEmpty();\n</code></pre>"},{"location":"inputfield/inputfield-is-empty/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"inputfield/inputfield-parent/","title":"Inputfield parent","text":""},{"location":"inputfield/inputfield-parent/#get-or-set-parent-of-inputfield","title":"Get or set parent of Inputfield","text":"<p>This convenience method performs the same thing as getParent() and setParent().</p> <p>To get parent, specify no arguments. It will return null if no parent assigned, or an InputfieldWrapper instance of the parent.</p> <p>To set parent, specify an InputfieldWrapper for the $parent argument. The return value is the current Inputfield for fluent interface.</p> <p>Available since version 3.0.110.</p>"},{"location":"inputfield/inputfield-parent/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield = $inputfield-&gt;parent();\n\n// usage with all arguments\n$inputfield = $inputfield-&gt;parent($parent = null);\n</code></pre>"},{"location":"inputfield/inputfield-parent/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>parent</code> (optional)</p> <p>null, InputfieldWrapper</p>"},{"location":"inputfield/inputfield-parent/#return-value","title":"Return value","text":"<p><code>null</code> <code>Inputfield</code> <code>InputfieldWrapper</code></p>"},{"location":"inputfield/inputfield-parents/","title":"Inputfield parents","text":""},{"location":"inputfield/inputfield-parents/#get-array-of-all-parents-of-this-inputfield","title":"Get array of all parents of this Inputfield","text":"<p>This is identical to and an alias of the getParents() method.</p> <p>Available since version 3.0.110.</p>"},{"location":"inputfield/inputfield-parents/#usage","title":"Usage","text":"<pre><code>$array = $inputfield-&gt;parents();\n</code></pre>"},{"location":"inputfield/inputfield-parents/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"inputfield/inputfield-process-input/","title":"Inputfield process input","text":""},{"location":"inputfield/inputfield-process-input/#process-input-for-this-inputfield-directly-from-the-post-or-get-variables","title":"Process input for this Inputfield directly from the POST (or GET) variables","text":"<p>This method should pull the value from the given <code>$input</code> argument, sanitize/validate it, and populate it to the <code>value</code> attribute of this Inputfield.</p> <p>Inputfield modules should implement this method if the built-in one here doesn't solve their need. If this one does solve their need, then they should add any additional sanitization or validation to the <code>Inputfield::setAttribute('value', $value)</code> method to occur when given the <code>value</code> attribute.</p>"},{"location":"inputfield/inputfield-process-input/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;processInput(WireInputData $input);\n</code></pre>"},{"location":"inputfield/inputfield-process-input/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>input</code></p> <p>WireInputData</p> <p>User input where value should be pulled from (typically <code>$input-&gt;post</code>)</p>"},{"location":"inputfield/inputfield-process-input/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-remove-attr/","title":"Inputfield remove attr","text":""},{"location":"inputfield/inputfield-remove-attr/#remove-an-attribute","title":"Remove an attribute","text":""},{"location":"inputfield/inputfield-remove-attr/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;removeAttr(string $key);\n</code></pre>"},{"location":"inputfield/inputfield-remove-attr/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of attribute to remove.</p>"},{"location":"inputfield/inputfield-remove-attr/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-remove-attr/#see-also","title":"See Also","text":"<ul> <li>Inputfield::attr()</li> <li>Inputfield::removeClass()</li> </ul>"},{"location":"inputfield/inputfield-remove-class/","title":"Inputfield remove class","text":""},{"location":"inputfield/inputfield-remove-class/#remove-the-given-class-or-classes-from-this-inputfield","title":"Remove the given class (or classes) from this Inputfield","text":""},{"location":"inputfield/inputfield-remove-class/#example","title":"Example","text":"<pre><code>// Remove the \"foo\" class\n$inputfield-&gt;removeClass('foo');\n\n// Remove both the \"foo\" and \"bar\" classes (since 3.0.16)\n$inputfield-&gt;removeClass('foo bar');\n\n// Remove the \"bar\" class from the wrapping .Inputfield element\n$inputfield-&gt;removeClass('bar', 'wrapClass');\n</code></pre>"},{"location":"inputfield/inputfield-remove-class/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield-&gt;removeClass($class);\n\n// usage with all arguments\n$inputfield-&gt;removeClass($class, string $property = 'class');\n</code></pre>"},{"location":"inputfield/inputfield-remove-class/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>class</code></p> <p>string, array</p> <p>Class name you want to remove or specify one of the following:</p> <ul> <li>Single class name to remove.</li> <li>Space-separated class names you want to remove (Since 3.0.16).</li> <li>Array of class names you want to remove (Since 3.0.16).</li> </ul> <p><code>property</code> (optional)</p> <p>string</p> <p>Optionally specify the property you want to remove class from:</p> <ul> <li><code>class</code> (string): Default setting. Class for the input element (or whatever the Inputfield default is).</li> <li><code>wrapClass</code> (string): Class for the \".Inputfield\" wrapping element, the most outer level element used for this Inputfield.</li> <li><code>headerClass</code> (string): Class for the \".InputfieldHeader\" label element.</li> <li><code>contentClass</code> (string): Class for the \".InputfieldContent\" wrapping element.</li> <li>Or some other class property defined by a descending Inputfield class.</li> </ul>"},{"location":"inputfield/inputfield-remove-class/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-remove-class/#see-also","title":"See Also","text":"<ul> <li>Inputfield::addClass()</li> <li>Inputfield::hasClass()</li> </ul>"},{"location":"inputfield/inputfield-render-ready-hook/","title":"Inputfield render ready hook","text":""},{"location":"inputfield/inputfield-render-ready-hook/#hookable-version-of-renderready-not-called-unless-renderreadyhook-is-hooked","title":"Hookable version of renderReady(), not called unless 'renderReadyHook' is hooked","text":"<p>Hook this method instead if you want to hook renderReady().</p>"},{"location":"inputfield/inputfield-render-ready-hook/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield-&gt;renderReadyHook();\n\n// usage with all arguments\n$inputfield-&gt;renderReadyHook(Inputfield $parent = null, bool $renderValueMode = false);\n</code></pre>"},{"location":"inputfield/inputfield-render-ready-hook/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>parent</code> (optional)</p> <p>Inputfield</p> <p><code>renderValueMode</code> (optional)</p> <p>bool</p>"},{"location":"inputfield/inputfield-render-ready/","title":"Inputfield render ready","text":""},{"location":"inputfield/inputfield-render-ready/#method-called-right-before-inputfield-markup-is-rendered-so-that-any-dependencies-can-be-loaded-as-well","title":"Method called right before Inputfield markup is rendered, so that any dependencies can be loaded as well.","text":"<p>Called before <code>Inputfield::render()</code> or <code>Inputfield::renderValue()</code> method by the parent <code>InputfieldWrapper</code> instance. If you are calling either of those methods yourself for some reason, make sure that you call this <code>renderReady()</code> method first.</p> <p>The default behavior of this method is to populate Inputfield-specific CSS and JS file assets into <code>$config-&gt;styles</code> and <code>$config-&gt;scripts</code>.</p> <p>The return value is true if assets were just added, and false if assets have already been added in a previous call. This distinction probably doesn't matter in most usages, but here just in case a descending class needs to know when/if to add additional assets (i.e. when this method returns true).</p>"},{"location":"inputfield/inputfield-render-ready/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $inputfield-&gt;renderReady();\n\n// usage with all arguments\n$bool = $inputfield-&gt;renderReady($parent = null, bool $renderValueMode = false);\n</code></pre>"},{"location":"inputfield/inputfield-render-ready/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>parent</code> (optional)</p> <p><code>renderValueMode</code> (optional)</p> <p>bool</p> <p>Specify true only if this is for <code>Inputfield::renderValue()</code> rather than <code>Inputfield::render()</code>.</p>"},{"location":"inputfield/inputfield-render-ready/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if assets were just added, false if already added.</p>"},{"location":"inputfield/inputfield-render-value/","title":"Inputfield render value","text":""},{"location":"inputfield/inputfield-render-value/#render-just-the-value-not-input-in-textmarkup-for-presentation-purposes","title":"Render just the value (not input) in text/markup for presentation purposes.","text":""},{"location":"inputfield/inputfield-render-value/#usage","title":"Usage","text":"<pre><code>$string = $inputfield-&gt;renderValue();\n</code></pre>"},{"location":"inputfield/inputfield-render-value/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Text or markup where applicable</p>"},{"location":"inputfield/inputfield-render/","title":"Inputfield render","text":""},{"location":"inputfield/inputfield-render/#render-the-html-input-elements-markup-ready-for-insertion-in-an-html-form","title":"Render the HTML input element(s) markup, ready for insertion in an HTML form.","text":"<p>This is an abstract method that descending Inputfield module classes are required to implement.</p>"},{"location":"inputfield/inputfield-render/#usage","title":"Usage","text":"<pre><code>$string = $inputfield-&gt;render();\n</code></pre>"},{"location":"inputfield/inputfield-render/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"inputfield/inputfield-set-parent/","title":"Inputfield set parent","text":""},{"location":"inputfield/inputfield-set-parent/#set-the-parent-inputfieldwrapper-of-this-inputfield","title":"Set the parent (InputfieldWrapper) of this Inputfield.","text":""},{"location":"inputfield/inputfield-set-parent/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;setParent(InputfieldWrapper $parent);\n</code></pre>"},{"location":"inputfield/inputfield-set-parent/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>parent</code></p> <p>InputfieldWrapper</p>"},{"location":"inputfield/inputfield-set-parent/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-set-parent/#see-also","title":"See Also","text":"<ul> <li>Inputfield::getParent()</li> </ul>"},{"location":"inputfield/inputfield-set/","title":"Inputfield set","text":""},{"location":"inputfield/inputfield-set/#set-a-property-or-attribute-to-the-inputfield","title":"Set a property or attribute to the Inputfield","text":"<ul> <li>Use this for setting properties like parent, collapsed, required, columnWidth, etc.</li> <li>You can also set properties directly via <code>$inputfield-&gt;property = $value</code>.</li> <li>If setting an attribute (like name, id, etc.) this will work, but it is preferable to use the <code>Inputfield::attr()</code> method.</li> <li>If setting any kind of \"class\" it is preferable to use the <code>Inputfield::addClass()</code> method.</li> </ul>"},{"location":"inputfield/inputfield-set/#example","title":"Example","text":"<pre><code>// Set a value for a property\n$item-&gt;set('foo', 'bar');\n\n// Set a property value directly\n$item-&gt;foo = 'bar';\n\n// Set a property using array access\n$item['foo'] = 'bar';\n</code></pre>"},{"location":"inputfield/inputfield-set/#usage","title":"Usage","text":"<pre><code>$inputfield = $inputfield-&gt;set(string $key, mixed $value);\n</code></pre>"},{"location":"inputfield/inputfield-set/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property to set</p> <p><code>value</code></p> <p>mixed</p> <p>Value of property</p>"},{"location":"inputfield/inputfield-set/#return-value","title":"Return value","text":"<p><code>Inputfield</code> <code>WireData</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield/inputfield-set/#see-also","title":"See Also","text":"<ul> <li>WireData::setQuietly()</li> <li>WireData::get()</li> </ul>"},{"location":"inputfield/inputfield-uninstall/","title":"Inputfield uninstall","text":""},{"location":"inputfield/inputfield-uninstall/#per-the-module-interface-uninstall-is-called-when-this-inputfield-is-uninstalled","title":"Per the Module interface, uninstall() is called when this Inputfield is uninstalled","text":""},{"location":"inputfield/inputfield-uninstall/#usage","title":"Usage","text":"<pre><code>$inputfield-&gt;uninstall();\n</code></pre>"},{"location":"inputfield/inputfield-val/","title":"Inputfield val","text":""},{"location":"inputfield/inputfield-val/#shortcut-for-getting-or-setting-value-attribute","title":"Shortcut for getting or setting \u201cvalue\u201d attribute","text":"<p>When setting a value, it returns $this (for fluent interface).</p>"},{"location":"inputfield/inputfield-val/#example","title":"Example","text":"<pre><code>$value = $inputfield-&gt;val(); * // Getting\n$inputfield-&gt;val('foo'); * // Setting\n</code></pre>"},{"location":"inputfield/inputfield-val/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $inputfield-&gt;val();\n\n// usage with all arguments\n$mixed = $inputfield-&gt;val($value = null);\n</code></pre>"},{"location":"inputfield/inputfield-val/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code> (optional)</p> <p>string, null</p>"},{"location":"inputfield/inputfield-val/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"inputfield/inputfield-wrap-attr/","title":"Inputfield wrap attr","text":""},{"location":"inputfield/inputfield-wrap-attr/#get-or-set-attribute-for-the-element-wrapping-this-inputfield","title":"Get or set attribute for the element wrapping this Inputfield","text":"<p>Use this method when you need to assign some attribute to the outer wrapper of the Inputfield.</p>"},{"location":"inputfield/inputfield-wrap-attr/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfield = $inputfield-&gt;wrapAttr();\n\n// usage with all arguments\n$inputfield = $inputfield-&gt;wrapAttr($key = null, $value = null);\n</code></pre>"},{"location":"inputfield/inputfield-wrap-attr/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string, null, bool</p> <p>Specify one of the following for $key:</p> <ul> <li>Specify string containing name of attribute to set.</li> <li>Omit (or null or true) to get all wrap attributes as associative array.</li> </ul> <p><code>value</code> (optional)</p> <p>string, null, bool</p> <p>Specify one of the following for $value:</p> <ul> <li>Omit if getting an attribute.</li> <li>Value to set for $key of setting.</li> <li>Boolean false to remove the attribute specified for $key.</li> </ul>"},{"location":"inputfield/inputfield-wrap-attr/#return-value","title":"Return value","text":"<p><code>Inputfield</code> <code>string</code> <code>array</code> <code>null</code></p> <p>Returns one of the following:</p> <ul> <li>If getting, returns attribute value of NULL if not present.</li> <li>If setting, returns $this.</li> </ul>"},{"location":"inputfield/inputfield-wrap-attr/#see-also","title":"See Also","text":"<ul> <li>Inputfield::attr()</li> <li>Inputfield::addClass()</li> </ul>"},{"location":"inputfield-wrapper/inputfield-wrapper-get-value-by-name/","title":"Inputfield wrapper get value by name","text":""},{"location":"inputfield-wrapper/inputfield-wrapper-get-value-by-name/#get-value-of-inputfield-by-name","title":"Get value of Inputfield by name","text":"<p>This traverses all children recursively to find the requested Inputfield, and get the value attribute from it. A value of null is returned if the Inputfield cannot be found.</p> <p>Available since version 3.0.172.</p>"},{"location":"inputfield-wrapper/inputfield-wrapper-get-value-by-name/#usage","title":"Usage","text":"<pre><code>$mixed = $inputfieldWrapper-&gt;getValueByName(string $name);\n</code></pre>"},{"location":"inputfield-wrapper/inputfield-wrapper-get-value-by-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p>"},{"location":"inputfield-wrapper/inputfield-wrapper-get-value-by-name/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"inputfield-wrapper/inputfield-wrapper-insert/","title":"Inputfield wrapper insert","text":""},{"location":"inputfield-wrapper/inputfield-wrapper-insert/#insert-new-or-existing-inputfield-before-or-after-another","title":"Insert new or existing Inputfield before or after another","text":"<p>Available since version 3.0.196.</p>"},{"location":"inputfield-wrapper/inputfield-wrapper-insert/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfieldWrapper-&gt;insert($item, $existingItem);\n\n// usage with all arguments\n$inputfieldWrapper-&gt;insert($item, $existingItem, bool $before = false);\n</code></pre>"},{"location":"inputfield-wrapper/inputfield-wrapper-insert/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Inputfield, array, string</p> <p>New or existing item Inputfield, name, or new item array to insert.</p> <p><code>existingItem</code></p> <p>Inputfield, string</p> <p>Existing item or item name you want to insert before.</p> <p><code>before</code> (optional)</p> <p>bool</p> <p>True to insert before, false to insert after (default=false).</p>"},{"location":"inputfield-wrapper/inputfield-wrapper-insert/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"inputfield-wrapper/inputfield-wrapper-insert/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"inputfield-wrapper/inputfield-wrapper-wired/","title":"Inputfield wrapper wired","text":""},{"location":"inputfield-wrapper/inputfield-wrapper-wired/#wired-to-api","title":"Wired to API","text":""},{"location":"inputfield-wrapper/inputfield-wrapper-wired/#usage","title":"Usage","text":"<pre><code>$inputfieldWrapper-&gt;wired();\n</code></pre>"},{"location":"languages/languages-editable/","title":"Languages editable","text":""},{"location":"languages/languages-editable/#does-current-user-have-edit-access-for-page-fields-in-given-language","title":"Does current user have edit access for page fields in given language?","text":""},{"location":"languages/languages-editable/#usage","title":"Usage","text":"<pre><code>$bool = $languages-&gt;editable($language);\n</code></pre>"},{"location":"languages/languages-editable/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>language</code></p> <p>Language, int, string</p> <p>Language id, name or object, or string \"none\" to refer to non-multi-language fields</p>"},{"location":"languages/languages-editable/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if editable, false if not</p>"},{"location":"languages/languages-find-non-default/","title":"Languages find non default","text":""},{"location":"languages/languages-find-non-default/#find-and-return-all-languages-except-default-language","title":"Find and return all languages except default language","text":""},{"location":"languages/languages-find-non-default/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $languages-&gt;findNonDefault();\n\n// usage with all arguments\n$items = $languages-&gt;findNonDefault(string $selector = '');\n</code></pre>"},{"location":"languages/languages-find-non-default/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string</p> <p>Optionally filter by a selector string</p>"},{"location":"languages/languages-find-non-default/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"languages/languages-find-other/","title":"Languages find other","text":""},{"location":"languages/languages-find-other/#find-and-return-all-languages-except-current-user-language","title":"Find and return all languages except current user language","text":""},{"location":"languages/languages-find-other/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $languages-&gt;findOther();\n\n// usage with all arguments\n$items = $languages-&gt;findOther($selector = '', $excludeLanguage = null);\n</code></pre>"},{"location":"languages/languages-find-other/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, Language</p> <p>Optionally filter by a selector string</p> <p><code>excludeLanguage</code> (optional)</p> <p>Language, null</p> <p>optionally specify language to exclude, if not user language (can also be 1st arg)</p>"},{"location":"languages/languages-find-other/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"languages/languages-get-default/","title":"Languages get default","text":""},{"location":"languages/languages-get-default/#get-the-default-language","title":"Get the default language","text":"<p>The default language can also be accessed from property <code>$languages-&gt;default</code>.</p>"},{"location":"languages/languages-get-default/#example","title":"Example","text":"<pre><code>if($user-&gt;language-&gt;id == $languages-&gt;getDefault()-&gt;id) {\n  // user has the default language\n}\n</code></pre>"},{"location":"languages/languages-get-default/#usage","title":"Usage","text":"<pre><code>$language = $languages-&gt;getDefault();\n</code></pre>"},{"location":"languages/languages-get-default/#return-value","title":"Return value","text":"<p><code>Language</code></p>"},{"location":"languages/languages-get-default/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - when default language hasn't yet been set</li> </ul>"},{"location":"languages/languages-get-language/","title":"Languages get language","text":""},{"location":"languages/languages-get-language/#get-the-current-language-or-optionally-a-specific-named-language","title":"Get the current language or optionally a specific named language","text":"<ul> <li>This method is not entirely necessary but is here to accompany the setLanguage() method for syntax convenience.</li> <li>If you specify a <code>$name</code> argument, this method works the same as the <code>$languages-&gt;get($name)</code> method.</li> <li>If you call with no arguments, it returns the current user language, same as <code>$user-&gt;language</code>, but using this method may be preferable in some contexts, depending on how your IDE understands API calls.</li> </ul> <p>Available since version 3.0.127.</p>"},{"location":"languages/languages-get-language/#usage","title":"Usage","text":"<pre><code>// basic usage\n$language = $languages-&gt;getLanguage();\n\n// usage with all arguments\n$language = $languages-&gt;getLanguage($name = '');\n</code></pre>"},{"location":"languages/languages-get-language/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code> (optional)</p> <p>string, int</p> <p>Specify language name (or ID) to get a specific language, or omit to get current language</p>"},{"location":"languages/languages-get-language/#return-value","title":"Return value","text":"<p><code>Language</code> <code>NullPage</code> <code>null</code></p>"},{"location":"languages/languages-get-locale/","title":"Languages get locale","text":""},{"location":"languages/languages-get-locale/#return-the-current-locale-setting","title":"Return the current locale setting","text":"<p>If using LC_ALL category and locales change by category, the returned string will be in the format: \u201ccategory=locale;category=locale\u201d, and so on.</p> <p>The first and second arguments may optionally be swapped and either can be omitted.</p>"},{"location":"languages/languages-get-locale/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $languages-&gt;getLocale();\n\n// usage with all arguments\n$string = $languages-&gt;getLocale($category = 6, $language = null);\n</code></pre>"},{"location":"languages/languages-get-locale/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>category</code> (optional)</p> <p>int, Language, string, null</p> <p>Optionally specify a PHP LC constant (default=LC_ALL)</p> <p><code>language</code> (optional)</p> <p>Language, string, int, null</p> <p>Optionally return locale for specific language (default=current locale, regardless of language)</p>"},{"location":"languages/languages-get-locale/#return-value","title":"Return value","text":"<p><code>string</code> <code>bool</code></p> <p>Locale(s) string or boolean false if not supported by the system.</p>"},{"location":"languages/languages-get-locale/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given a $language argument that is invalid</li> </ul>"},{"location":"languages/languages-get-locale/#see-also","title":"See Also","text":"<ul> <li>Languages::setLocale()</li> </ul>"},{"location":"markup-pager-nav/markup-pager-nav-get-u-r-l/","title":"Markup pager nav get u r l","text":""},{"location":"markup-pager-nav/markup-pager-nav-get-u-r-l/#get-url-for-given-pagination-number","title":"Get URL for given pagination number","text":"<p>Requires that render() method has already started or been previously called.</p>"},{"location":"markup-pager-nav/markup-pager-nav-get-u-r-l/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $pager-&gt;getURL(int $pageNum);\n\n// usage with all arguments\n$string = $pager-&gt;getURL(int $pageNum, bool $http = false);\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-get-u-r-l/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>pageNum</code></p> <p>int</p> <p><code>http</code> (optional)</p> <p>bool</p> <p>Include scheme and hostname?</p>"},{"location":"markup-pager-nav/markup-pager-nav-get-u-r-l/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"markup-pager-nav/markup-pager-nav-options/","title":"Markup pager nav options","text":""},{"location":"markup-pager-nav/markup-pager-nav-options/#get-all-options-or-set-options","title":"Get all options or set options","text":"<ul> <li>See the main <code>MarkupPagerNav</code> documentation for a list of all available options.</li> <li>When used to set options this method should be called before the <code>MarkupPagerNav::render()</code> method.</li> <li>Options can also be set as a 2nd argument to the <code>MarkupPagerNav::render()</code> method.</li> </ul> <p>Available since version 3.0.44.</p>"},{"location":"markup-pager-nav/markup-pager-nav-options/#example","title":"Example","text":"<pre><code>// Getting options\necho \"&lt;pre&gt;\" . print_r($pager-&gt;options(), true) . \"&lt;/pre&gt;\";\n\n// Setting options\n$pager-&gt;options([ 'numPageLinks' =&gt; 5 ]);\necho $pager-&gt;render($items);\n\n// Alternative that does the same as above\necho $pager-&gt;render($items, [ 'numPageLinks' =&gt; 5 ]);\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-options/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $pager-&gt;options();\n\n// usage with all arguments\n$array = $pager-&gt;options(array $options = []);\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-options/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Associative array of options you want to set, or omit to just return all available/current options.</p>"},{"location":"markup-pager-nav/markup-pager-nav-options/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returns associative array if options with all current values.</p>"},{"location":"markup-pager-nav/markup-pager-nav-render/","title":"Markup pager nav render","text":""},{"location":"markup-pager-nav/markup-pager-nav-render/#render-pagination-markup","title":"Render pagination markup","text":""},{"location":"markup-pager-nav/markup-pager-nav-render/#example","title":"Example","text":"<pre><code>$items = $pages-&gt;find(\"id&gt;0, limit=10\"); // replace id&gt;0 with your selector\nif($items-&gt;count()) {\n  echo \"&lt;ul&gt;\" . $items-&gt;each(\"&lt;li&gt;{title}&lt;/li&gt;\") . \"&lt;/ul&gt;\";\n  $pager = $modules-&gt;get(\"MarkupPagerNav\");\n  $options = [ 'numPageLinks' =&gt; 5 ];\n  echo $pager-&gt;render($items, $options); // render the pagination navigation\n} else {\n  echo \"&lt;p&gt;Sorry there were no items found&lt;/p&gt;\";\n}\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-render/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $pager-&gt;render($items);\n\n// usage with all arguments\n$string = $pager-&gt;render($items, array $options = []);\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-render/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>items</code></p> <p>WirePaginatable, PageArray, PaginatedArray</p> <p>Items used in the pagination that have had a \"limit=n\" selector applied when they were loaded.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Any options to override the defaults. See the <code>MarkupPagerNav</code> reference for all options.</p>"},{"location":"markup-pager-nav/markup-pager-nav-render/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"markup-pager-nav/markup-pager-nav-set-base-url/","title":"Markup pager nav set base url","text":""},{"location":"markup-pager-nav/markup-pager-nav-set-base-url/#set-the-base-url-for-pagination","title":"Set the base URL for pagination","text":""},{"location":"markup-pager-nav/markup-pager-nav-set-base-url/#usage","title":"Usage","text":"<pre><code>$pager-&gt;setBaseUrl(string $url);\n</code></pre>"},{"location":"markup-pager-nav/markup-pager-nav-set-base-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>url</code></p> <p>string</p>"},{"location":"markup-pager-nav/markup-pager-nav-wired/","title":"Markup pager nav wired","text":""},{"location":"markup-pager-nav/markup-pager-nav-wired/#wired-to-processwire-instance","title":"Wired to ProcessWire instance","text":""},{"location":"markup-pager-nav/markup-pager-nav-wired/#usage","title":"Usage","text":"<pre><code>$pager-&gt;wired();\n</code></pre>"},{"location":"module/module-class-name/","title":"Module class name","text":""},{"location":"module/module-class-name/#return-this-objects-class-name","title":"Return this object\u2019s class name","text":"<p>If your Module descends from Wire, or any of it's derivatives (as would usually be the case), then you don't need to implement this method as it's already present.</p>"},{"location":"module/module-class-name/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $module-&gt;className();\n\n// usage with all arguments\n$string = $module-&gt;className($options = null);\n</code></pre>"},{"location":"module/module-class-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array, bool, null</p> <p>Optionally an option or boolean for 'namespace' option:</p> <ul> <li><code>lowercase</code> (bool): Specify true to make it return hyphenated lowercase version of class name</li> <li><code>namespace</code> (bool): Specify false to omit namespace from returned class name. Default=true.</li> <li>Note: when lowercase=true option is specified, the namespace=false option is required.</li> </ul>"},{"location":"module/module-class-name/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"module/module-class-name/#see-also","title":"See Also","text":"<ul> <li>Wire::className()</li> </ul>"},{"location":"modules/modules-find-by-info/","title":"Modules find by info","text":""},{"location":"modules/modules-find-by-info/#find-modules-by-matching-a-property-or-properties-in-their-module-info","title":"Find modules by matching a property or properties in their module info","text":""},{"location":"modules/modules-find-by-info/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $modules-&gt;findByInfo($selector);\n\n// usage with all arguments\n$array = $modules-&gt;findByInfo($selector, $load = false);\n</code></pre>"},{"location":"modules/modules-find-by-info/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, array</p> <p>Specify one of the following:</p> <ul> <li>Selector string to match module info.</li> <li>Array of [ 'property' =&gt; 'value' ] to match in module info (this is not a selector array).</li> <li>Name of property that will match module if not empty in module info.</li> </ul> <p><code>load</code> (optional)</p> <p>bool, int</p> <p>Specify one of the following:</p> <ul> <li>Boolean true to return array of instantiated modules.</li> <li>Boolean false to return array of module names (default).</li> <li>Integer 1 to return array of module info for each matching module.</li> <li>Integer 2 to return array of verbose module info for each matching module.</li> </ul>"},{"location":"modules/modules-find-by-info/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Array of modules, module names or module info arrays, indexed by module name.</p>"},{"location":"modules/modules-find-by-prefix/","title":"Modules find by prefix","text":""},{"location":"modules/modules-find-by-prefix/#find-modules-matching-the-given-prefix-ie-inputfield","title":"Find modules matching the given prefix (i.e. \u201cInputfield\u201d)","text":"<p>By default this method returns module class names matching the given prefix. To instead retrieve instantiated (ready-to-use) modules, specify boolean true for the second argument. Regardless of <code>$load</code> argument all returned arrays are indexed by module name.</p>"},{"location":"modules/modules-find-by-prefix/#example","title":"Example","text":"<pre><code>// Retrieve array of all Textformatter module names\n$items = $modules-&gt;findByPrefix('Textformatter');\n\n// Retrieve array of all Textformatter modules (ready to use)\n$items = $modules-&gt;findByPrefix('Textformatter', true);\n</code></pre>"},{"location":"modules/modules-find-by-prefix/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $modules-&gt;findByPrefix(string $prefix);\n\n// usage with all arguments\n$array = $modules-&gt;findByPrefix(string $prefix, $load = false);\n</code></pre>"},{"location":"modules/modules-find-by-prefix/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>prefix</code></p> <p>string</p> <p>Specify prefix, i.e. \"Process\", \"Fieldtype\", \"Inputfield\", etc.</p> <p><code>load</code> (optional)</p> <p>bool, int</p> <p>Specify one of the following (all indexed by module name):</p> <ul> <li>Boolean true to return array of instantiated modules.</li> <li>Boolean false to return array of module names (default).</li> <li>Integer 1 to return array of module info for each matching module.</li> <li>Integer 2 to return array of verbose module info for each matching module.</li> <li>Integer 3 to return array of Module or ModulePlaceholder objects (whatever current state is). Added 3.0.146.</li> </ul>"},{"location":"modules/modules-find-by-prefix/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returns array of module class names, module info arrays, or Module objects. In all cases, array indexes are class names.</p>"},{"location":"modules/modules-get-debug-data/","title":"Modules get debug data","text":""},{"location":"modules/modules-get-debug-data/#usage","title":"Usage","text":"<pre><code>$modules-&gt;getDebugData();\n</code></pre>"},{"location":"modules/modules-get-module-file/","title":"Modules get module file","text":""},{"location":"modules/modules-get-module-file/#get-the-path-filename-or-optionally-url-for-this-module","title":"Get the path + filename (or optionally URL) for this module","text":""},{"location":"modules/modules-get-module-file/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $modules-&gt;getModuleFile($class);\n\n// usage with all arguments\n$bool = $modules-&gt;getModuleFile($class, $options = []);\n</code></pre>"},{"location":"modules/modules-get-module-file/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>class</code></p> <p>string, Module</p> <p>Module class name or object instance</p> <p><code>options</code> (optional)</p> <p>array, bool</p> <p>Options to modify default behavior:</p> <ul> <li><code>getURL</code> (bool): Specify true if you want to get the URL rather than file path (default=false).</li> <li><code>fast</code> (bool): Specify true to omit file_exists() checks (default=false).</li> <li><code>guess</code> (bool): Manufacture/guess a module location if one cannot be found (default=false) 3.0.170+</li> <li>Note: If you specify a boolean for the $options argument, it is assumed to be the $getURL property.</li> </ul>"},{"location":"modules/modules-get-module-file/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p> <p>Returns string of module file, or false on failure.</p>"},{"location":"modules/modules-get-module/","title":"Modules get module","text":""},{"location":"modules/modules-get-module/#get-the-requested-module-with-options","title":"Get the requested Module (with options)","text":"<p>This is the same as <code>$modules-&gt;get()</code> except that you can specify additional options to modify default behavior. These are the options you can specify in the <code>$options</code> array argument:</p> <ul> <li><code>noPermissionCheck</code> (bool): Specify true to disable module permission checks (and resulting exception). (default=false)</li> <li><code>noInstall</code> (bool): Specify true to prevent a non-installed module from installing from this request. (default=false)</li> <li><code>noInit</code> (bool): Specify true to prevent the module from being initialized or configured. (default=false). See <code>configOnly</code> as alternative.</li> <li><code>noSubstitute</code> (bool): Specify true to prevent inclusion of a substitute module. (default=false)</li> <li><code>noCache</code> (bool): Specify true to prevent module instance from being cached for later getModule() calls. (default=false)</li> <li><code>noThrow</code> (bool): Specify true to prevent exceptions from being thrown on permission or fatal error. (default=false)</li> <li><code>returnError</code> (bool): Return an error message (string) on error, rather than null. (default=false)</li> <li><code>configOnly</code> (bool): Populate module config data but do not call its init() method. (default=false) 3.0.169+. Alternative to <code>noInit</code>.</li> <li><code>configData</code> (array): Associative array of additional config data to populate to module. (default=[]) 3.0.169+</li> </ul> <p>If the module is not installed, but is installable, it will be installed, instantiated, and initialized. If you don't want that behavior, call <code>$modules-&gt;isInstalled('ModuleName')</code> as a condition first, OR specify true for the <code>noInstall</code> option in the <code>$options</code> argument.</p>"},{"location":"modules/modules-get-module/#usage","title":"Usage","text":"<pre><code>// basic usage\n$module = $modules-&gt;getModule($key);\n\n// usage with all arguments\n$module = $modules-&gt;getModule($key, array $options = []);\n</code></pre>"},{"location":"modules/modules-get-module/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, int</p> <p>Module name or database ID.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Optional settings to change load behavior, see method description for details.</p>"},{"location":"modules/modules-get-module/#return-value","title":"Return value","text":"<p><code>Module</code> <code>_Module</code> <code>null</code> <code>string</code></p> <p>Returns ready-to-use module or NULL|string if not found (string if <code>returnError</code> option used).</p>"},{"location":"modules/modules-get-module/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WirePermissionException</code> or <code>\\Exception</code> - If module requires a particular permission the user does not have</li> </ul>"},{"location":"modules/modules-get-module/#see-also","title":"See Also","text":"<ul> <li>Modules::get()</li> </ul>"},{"location":"modules/modules-get/","title":"Modules get","text":""},{"location":"modules/modules-get/#get-the-requested-module","title":"Get the requested Module","text":"<ul> <li>If the module is not installed, but is installable, it will be installed, instantiated, and initialized. If you don't want that behavior, call <code>$modules-&gt;isInstalled('ModuleName')</code> as a conditional first.</li> <li>You can also get/load a module by accessing it directly, like <code>$modules-&gt;ModuleName</code>.</li> <li>To get a module with additional options, use <code>$modules-&gt;getModule($name, $options)</code> instead.</li> </ul>"},{"location":"modules/modules-get/#example","title":"Example","text":"<pre><code>// Get the MarkupAdminDataTable module\n$table = $modules-&gt;get('MarkupAdminDataTable');\n\n// You can also do this\n$table = $modules-&gt;MarkupAdminDataTable;\n</code></pre>"},{"location":"modules/modules-get/#usage","title":"Usage","text":"<pre><code>$module = $modules-&gt;get($key);\n</code></pre>"},{"location":"modules/modules-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, int</p> <p>Module name (also accepts database ID)</p>"},{"location":"modules/modules-get/#return-value","title":"Return value","text":"<p><code>Module</code> <code>_Module</code> <code>null</code></p> <p>Returns a Module or null if not found</p>"},{"location":"modules/modules-get/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WirePermissionException</code> - If module requires a particular permission the user does not have</li> </ul>"},{"location":"modules/modules-get/#see-also","title":"See Also","text":"<ul> <li>Modules::getModule()</li> <li>Modules::isInstalled()</li> </ul>"},{"location":"page/page-add-status/","title":"Page add status","text":""},{"location":"page/page-add-status/#add-the-specified-status-to-this-page","title":"Add the specified status to this page","text":"<p>This is the preferred way to add a new status to a page. There is also a corresponding <code>Page::removeStatus()</code> method.</p>"},{"location":"page/page-add-status/#example","title":"Example","text":"<pre><code>// Add hidden status to the page using status name\n$page-&gt;addStatus('hidden');\n\n// Add hidden status to the page using status constant\n$page-&gt;addStatus(Page::statusHidden);\n</code></pre>"},{"location":"page/page-add-status/#usage","title":"Usage","text":"<pre><code>$page-&gt;addStatus($statusFlag);\n</code></pre>"},{"location":"page/page-add-status/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>statusFlag</code></p> <p>int, string</p> <p>Status flag constant or string representation (hidden, locked, unpublished, etc.)</p>"},{"location":"page/page-add-status/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page/page-add-status/#see-also","title":"See Also","text":"<ul> <li>Page::removeStatus()</li> <li>Page::hasStatus()</li> </ul>"},{"location":"page/page-call-unknown/","title":"Page call unknown","text":""},{"location":"page/page-call-unknown/#if-method-call-resulted-in-no-handler-this-hookable-method-is-called","title":"If method call resulted in no handler, this hookable method is called.","text":"<p>If you want to override this method with a hook, see the example below.</p>"},{"location":"page/page-call-unknown/#example","title":"Example","text":"<pre><code>$wire-&gt;addHookBefore('Wire::callUnknown', function(HookEvent $event) {\n  // Get information about unknown method that was called\n  $methodObject = $event-&gt;object;\n  $methodName = $event-&gt;arguments(0); // string\n  $methodArgs = $event-&gt;arguments(1); // array\n  // The replace option replaces the method and blocks the exception\n  $event-&gt;replace = true;\n  // Now do something with the information you have, for example\n  // you might want to populate a value to $event-&gt;return if\n  // you want the unknown method to return a value.\n});\n</code></pre>"},{"location":"page/page-call-unknown/#usage","title":"Usage","text":"<pre><code>$mixed = $page-&gt;callUnknown(string $method, array $arguments);\n</code></pre>"},{"location":"page/page-call-unknown/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>method</code></p> <p>string</p> <p>Requested method name</p> <p><code>arguments</code></p> <p>array</p> <p>Arguments provided</p>"},{"location":"page/page-call-unknown/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code></p> <p>Return value of method (if applicable)</p>"},{"location":"page/page-call-unknown/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"page/page-child/","title":"Page child","text":""},{"location":"page/page-child/#return-the-pages-first-single-child-that-matches-the-given-selector","title":"Return the page\u2019s first single child that matches the given selector.","text":"<p>Same as <code>$page-&gt;children()</code> but returns a single Page object or NullPage (with id=0) rather than a PageArray. Meaning, this method will only ever return one Page.</p>"},{"location":"page/page-child/#example","title":"Example","text":"<pre><code>// Get the newest created child page\n$newestChild = $page-&gt;child(\"sort=-created\");\n</code></pre>"},{"location":"page/page-child/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;child();\n\n// usage with all arguments\n$page = $page-&gt;child($selector = '', array $options = []);\n</code></pre>"},{"location":"page/page-child/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, int</p> <p>Selector to use, or blank to return the first child.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Optional options per Pages::find</p>"},{"location":"page/page-child/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p>"},{"location":"page/page-child/#see-also","title":"See Also","text":"<ul> <li>Page::children()</li> </ul>"},{"location":"page/page-children/","title":"Page children","text":""},{"location":"page/page-children/#return-this-pages-children-optionally-filtered-by-a-selector","title":"Return this page\u2019s children, optionally filtered by a selector","text":"<p>By default, hidden, unpublished and no-access pages are excluded unless <code>include=x</code> (where \"x\" is desired status) is specified. If a selector isn't needed, children can also be accessed directly by property with <code>$page-&gt;children</code>.</p>"},{"location":"page/page-children/#examples","title":"Examples","text":"<pre><code>// Render navigation for all child pages below this one\nforeach($page-&gt;children() as $child) {\n  echo \"&lt;li&gt;&lt;a href='$child-&gt;url'&gt;$child-&gt;title&lt;/a&gt;&lt;/li&gt;\";\n}\n\n// Retrieve just the 3 newest children\n$newest = $page-&gt;children(\"limit=3, sort=-created\");\n</code></pre>"},{"location":"page/page-children/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;children();\n\n// usage with all arguments\n$items = $page-&gt;children(string $selector = '', array $options = []);\n</code></pre>"},{"location":"page/page-children/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string</p> <p>Selector to use, or omit to return all children.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Optional options to modify behavior, the same as those provided to Pages::find.</p>"},{"location":"page/page-children/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>array</code></p> <p>Returns PageArray for most cases. Returns regular PHP array if using the findIDs option.</p>"},{"location":"page/page-children/#see-also","title":"See Also","text":"<ul> <li>Page::child()</li> <li>Page::find()</li> <li>Page::numChildren()</li> <li>Page::hasChildren()</li> </ul>"},{"location":"page/page-closest/","title":"Page closest","text":""},{"location":"page/page-closest/#find-the-closest-parent-page-matching-your-selector","title":"Find the closest parent page matching your selector","text":"<p>This is like <code>$page-&gt;parent()</code> but includes the current Page in the possible pages that can be matched, and the $selector argument is required.</p>"},{"location":"page/page-closest/#usage","title":"Usage","text":"<pre><code>$page = $page-&gt;closest($selector);\n</code></pre>"},{"location":"page/page-closest/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, array</p> <p>Selector string to match.</p>"},{"location":"page/page-closest/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p> <p>$selector Returns the current Page or closest parent matching the selector. Returns NullPage when no match.</p>"},{"location":"page/page-count/","title":"Page count","text":""},{"location":"page/page-count/#returns-number-of-children-page-has-affected-by-output-formatting-mode","title":"Returns number of children page has, affected by output formatting mode.","text":"<ul> <li> <p>When output formatting is on, returns only number of visible children, making the return value the same as the <code>Page::hasChildren()</code> method.</p> </li> <li> <p>When output formatting is off, returns number of all children without exclusion, making the return value the same as the <code>Page::numChildren()</code> method.</p> </li> </ul>"},{"location":"page/page-count/#example","title":"Example","text":"<pre><code>// Get number of visible children, like $page-&gt;hasChildren()\n$page-&gt;of(true); // enable output formatting\n$numVisible = $page-&gt;count();\n\n// Get number of all children, like $page-&gt;numChildren()\n$page-&gt;of(false); // disable output formatting\n$numTotal = $page-&gt;count();\n</code></pre>"},{"location":"page/page-count/#usage","title":"Usage","text":"<pre><code>$int = $page-&gt;count();\n</code></pre>"},{"location":"page/page-count/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Quantity of children</p>"},{"location":"page/page-count/#see-also","title":"See Also","text":"<ul> <li>Page::hasChildren()</li> <li>Page::numChildren()</li> </ul>"},{"location":"page/page-delete/","title":"Page delete","text":""},{"location":"page/page-delete/#delete-this-page-from-the-database","title":"Delete this page from the database","text":"<p>This is the same as calling <code>$pages-&gt;delete($page)</code>.</p>"},{"location":"page/page-delete/#examples","title":"Examples","text":"<pre><code>// Delete pages named \"delete-me\" that don't have children\n$items = $pages-&gt;find(\"name=delete-me, numChildren=0\");\nforeach($items as $item) {\n  $item-&gt;delete();\n}\n\n// Delete a page and recursively all of its children, grandchildren, etc. \n$item = $pages-&gt;get('/some-page/');\n$item-&gt;delete(true);\n</code></pre>"},{"location":"page/page-delete/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;delete();\n\n// usage with all arguments\n$bool = $page-&gt;delete(bool $recursive = false);\n</code></pre>"},{"location":"page/page-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>recursive</code> (optional)</p> <p>bool</p> <p>If set to true, then this will attempt to delete all children too.</p>"},{"location":"page/page-delete/#return-value","title":"Return value","text":"<p><code>bool</code> <code>int</code></p> <p>True on success, false on failure, or int quantity of pages deleted when recursive option is true.</p>"},{"location":"page/page-delete/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - when attempting to delete a page with children and $recursive option is not specified.</li> </ul>"},{"location":"page/page-delete/#see-also","title":"See Also","text":"<ul> <li>Pages::delete()</li> </ul>"},{"location":"page/page-edit-url/","title":"Page edit url","text":""},{"location":"page/page-edit-url/#return-the-url-necessary-to-edit-this-page","title":"Return the URL necessary to edit this page","text":"<ul> <li>We recommend checking that the page is editable before outputting the editUrl().</li> <li>If user opens URL in their browser and is not logged in, they must login to account with edit permission.</li> <li>This method can also be accessed by property at <code>$page-&gt;editUrl</code> (without parenthesis).</li> </ul>"},{"location":"page/page-edit-url/#example","title":"Example","text":"<pre><code>if($page-&gt;editable()) {\n  echo \"&lt;a href='$page-&gt;editUrl'&gt;Edit this page&lt;/a&gt;\";\n}\n</code></pre>"},{"location":"page/page-edit-url/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $page-&gt;editUrl();\n\n// usage with all arguments\n$string = $page-&gt;editUrl($options = []);\n</code></pre>"},{"location":"page/page-edit-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array, bool, string</p> <p>Specify true for http option, specify name of field to find (3.0.151+), or use $options array:</p> <ul> <li><code>http</code> (bool): True to force scheme and hostname in URL (default=auto detect).</li> <li><code>language</code> (Language|bool): Optionally specify Language to start editor in, or boolean true to force current user language.</li> <li><code>find</code> (string): Name of field to find in the editor (3.0.151+)</li> </ul>"},{"location":"page/page-edit-url/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>URL for editing this page</p>"},{"location":"page/page-edit/","title":"Page edit","text":""},{"location":"page/page-edit/#get-front-end-editable-output-for-field-requires-pagefrontedit-module-to-be-installed","title":"Get front-end editable output for field (requires PageFrontEdit module to be installed)","text":"<p>This method requires the core <code>PageFrontEdit</code> module to be installed. If it is not installed then it returns expected output but it is not front-end editable. This method corresponds to front-end editing Option B. See the front-end editor docs for more details. If the user does not have permission to front-end edit then returned output will not be editable.</p> <p>Use <code>$page-&gt;edit('field_name');</code> instead of <code>$page-&gt;get('field_name');</code> to automatically return an editable field value when the user is allowed to edit, or a regular field value when not. When field is editable, hovering the value shows a different icon. The user must double-click the area to edit.</p> <p>The 2nd and 3rd arguments are typically used only if you need to override the default presentation of the editor or provide some kind of action or button to trigger the editor. It might also be useful if the content to edit is not visible by default. It is recommended that you specify boolean true for the <code>$modal</code> argument when using the <code>$markup</code> argument, which makes it open the editor in a modal window, less likely to interfere with your front-end layout.</p> <p>Available since version 3.0.0. This method is added by a hook in PageFrontEdit and only shown in this class for documentation purposes.</p>"},{"location":"page/page-edit/#example","title":"Example","text":"<pre><code>// retrieve editable value if field_name is editable, or just value if not\n$value = $page-&gt;edit('field_name');\n</code></pre>"},{"location":"page/page-edit/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $page-&gt;edit();\n\n// usage with all arguments\n$string = $page-&gt;edit($key = null, $markup = null, $modal = null);\n</code></pre>"},{"location":"page/page-edit/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string, bool, null</p> <p>Name of field, omit to get editor active status, or boolean true to enable editor.</p> <p><code>markup</code> (optional)</p> <p>string, bool, null</p> <p>Markup user should click on to edit $fieldName (typically omitted).</p> <p><code>modal</code> (optional)</p> <p>bool, null</p> <p>Specify true to force editable region to open a modal window (typically omitted).</p>"},{"location":"page/page-edit/#return-value","title":"Return value","text":"<p><code>string</code> <code>bool</code> <code>mixed</code></p>"},{"location":"page/page-files-manager/","title":"Page files manager","text":""},{"location":"page/page-files-manager/#return-instance-of-pagefilesmanager-specific-to-this-page","title":"Return instance of PagefilesManager specific to this Page","text":""},{"location":"page/page-files-manager/#usage","title":"Usage","text":"<pre><code>$pagefilesManager = $page-&gt;filesManager();\n</code></pre>"},{"location":"page/page-files-manager/#return-value","title":"Return value","text":"<p><code>PagefilesManager</code></p>"},{"location":"page/page-files-path/","title":"Page files path","text":""},{"location":"page/page-files-path/#returns-the-path-for-files-creating-it-if-it-does-not-yet-exist","title":"Returns the path for files, creating it if it does not yet exist","text":"<p>Available since version 3.0.138. You can also use the equivalent but more verbose `$page-&gt;filesManager()-&gt;path()` in any version</p>"},{"location":"page/page-files-path/#usage","title":"Usage","text":"<pre><code>$string = $page-&gt;filesPath();\n</code></pre>"},{"location":"page/page-files-path/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"page/page-files-url/","title":"Page files url","text":""},{"location":"page/page-files-url/#returns-the-url-for-files-creating-it-if-it-does-not-yet-exist","title":"Returns the URL for files, creating it if it does not yet exist","text":"<p>Available since version 3.0.138. You can use the equivalent but more verbose `$page-&gt;filesManager()-&gt;url()` in any version</p>"},{"location":"page/page-files-url/#usage","title":"Usage","text":"<pre><code>$string = $page-&gt;filesUrl();\n</code></pre>"},{"location":"page/page-files-url/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"page/page-find-one/","title":"Page find one","text":""},{"location":"page/page-find-one/#find-one-descendant-page-matching-given-selector","title":"Find one descendant page matching given selector","text":"<p>This is the same as <code>Pages::findOne()</code> except that the match is always a descendant of page it is called on.</p> <p>Available since version 3.0.116.</p>"},{"location":"page/page-find-one/#example","title":"Example","text":"<pre><code>// Find the most recently modified descendant page\n$item = $page-&gt;findOne(\"sort=-modified\");\n</code></pre>"},{"location":"page/page-find-one/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;findOne();\n\n// usage with all arguments\n$page = $page-&gt;findOne($selector = '', array $options = []);\n</code></pre>"},{"location":"page/page-find-one/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array</p> <p>Selector string or array</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Optional options to modify default bheavior, see options for <code>Pages::find()</code>.</p>"},{"location":"page/page-find-one/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p> <p>Returns Page when found, or NullPage when nothing found.</p>"},{"location":"page/page-find-one/#see-also","title":"See Also","text":"<ul> <li>Pages::findOne()</li> <li>Page::child()</li> </ul>"},{"location":"page/page-find/","title":"Page find","text":""},{"location":"page/page-find/#find-descendant-pages-matching-given-selector","title":"Find descendant pages matching given selector","text":"<p>This is the same as <code>Pages::find()</code> except that the results are limited to descendents of this Page.</p>"},{"location":"page/page-find/#example","title":"Example","text":"<pre><code>// Find all unpublished pages underneath the current page\n$items = $page-&gt;find(\"status=unpublished\");\n</code></pre>"},{"location":"page/page-find/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;find();\n\n// usage with all arguments\n$items = $page-&gt;find($selector = '', array $options = []);\n</code></pre>"},{"location":"page/page-find/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array</p> <p>Selector string or array</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Same as the $options array passed to $pages-&gt;find().</p>"},{"location":"page/page-find/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-find/#see-also","title":"See Also","text":"<ul> <li>Pages::find()</li> </ul>"},{"location":"page/page-get-access-parent/","title":"Page get access parent","text":""},{"location":"page/page-get-access-parent/#returns-the-page-from-which-roleaccess-settings-are-inherited-from","title":"Returns the page from which role/access settings are inherited from","text":""},{"location":"page/page-get-access-parent/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;getAccessParent();\n\n// usage with all arguments\n$page = $page-&gt;getAccessParent(string $type = 'view');\n</code></pre>"},{"location":"page/page-get-access-parent/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>type</code> (optional)</p> <p>string</p> <p>Optionally specify one of 'view', 'edit', 'add', or 'create' (default='view')</p>"},{"location":"page/page-get-access-parent/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p> <p>Returns NullPage if none found</p>"},{"location":"page/page-get-access-roles/","title":"Page get access roles","text":""},{"location":"page/page-get-access-roles/#return-roles-pagearray-that-have-access-to-this-page","title":"Return Roles (PageArray) that have access to this page","text":"<p>This is determined from the page's template. If the page's template has roles turned off, then it will go down the tree till it finds usable roles to use and inherit from.</p>"},{"location":"page/page-get-access-roles/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;getAccessRoles();\n\n// usage with all arguments\n$items = $page-&gt;getAccessRoles(string $type = 'view');\n</code></pre>"},{"location":"page/page-get-access-roles/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>type</code> (optional)</p> <p>string</p> <p>May be 'view', 'edit', 'create' or 'add' (default='view')</p>"},{"location":"page/page-get-access-roles/#return-value","title":"Return value","text":"<p><code>PageArray</code></p> <p>of Role objects</p>"},{"location":"page/page-get-access-template/","title":"Page get access template","text":""},{"location":"page/page-get-access-template/#returns-the-template-from-which-roleaccess-settings-are-inherited-from","title":"Returns the template from which role/access settings are inherited from","text":""},{"location":"page/page-get-access-template/#usage","title":"Usage","text":"<pre><code>// basic usage\n$template = $page-&gt;getAccessTemplate();\n\n// usage with all arguments\n$template = $page-&gt;getAccessTemplate(string $type = 'view');\n</code></pre>"},{"location":"page/page-get-access-template/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>type</code> (optional)</p> <p>string</p> <p>Optionally specify one of 'view', 'edit', 'add', or 'create' (default='view')</p>"},{"location":"page/page-get-access-template/#return-value","title":"Return value","text":"<p><code>Template</code> <code>null</code></p> <p>Returns Template object or NULL if none</p>"},{"location":"page/page-get-field/","title":"Page get field","text":""},{"location":"page/page-get-field/#get-a-field-object-in-context-or-null-if-not-valid-for-this-page","title":"Get a Field object in context or NULL if not valid for this page","text":"<p>Field in context is only returned when output formatting is on.</p>"},{"location":"page/page-get-field/#usage","title":"Usage","text":"<pre><code>$field = $page-&gt;getField($field);\n</code></pre>"},{"location":"page/page-get-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code></p> <p>string, int, Field</p>"},{"location":"page/page-get-field/#return-value","title":"Return value","text":"<p><code>Field</code> <code>null</code></p>"},{"location":"page/page-get-fields/","title":"Page get fields","text":""},{"location":"page/page-get-fields/#returns-a-fieldsarray-of-all-field-objects-in-the-context-of-this-page","title":"Returns a FieldsArray of all Field objects in the context of this Page","text":"<p>Unlike $page-&gt;fieldgroup (or its alias $page-&gt;fields), the fields returned from this method are in the context of this page/template. Meaning returned Field objects may have some properties that are different from the Field outside of the context of this page.</p>"},{"location":"page/page-get-fields/#usage","title":"Usage","text":"<pre><code>$items = $page-&gt;getFields();\n</code></pre>"},{"location":"page/page-get-fields/#return-value","title":"Return value","text":"<p><code>FieldsArray</code></p> <p>of Field objects</p>"},{"location":"page/page-get-formatted/","title":"Page get formatted","text":""},{"location":"page/page-get-formatted/#get-the-formatted-value-of-a-field-regardless-of-output-formatting-state","title":"Get the formatted value of a field, regardless of output formatting state","text":"<p>When a page's output formatting state is on, <code>$page-&gt;get('property')</code> or <code>$page-&gt;property</code> will produce the same result as this method call.</p>"},{"location":"page/page-get-formatted/#example","title":"Example","text":"<pre><code>// Get the formatted 'body' field (text formatters applied)\n$body = $page-&gt;getFormatted('body');\n</code></pre>"},{"location":"page/page-get-formatted/#usage","title":"Usage","text":"<pre><code>$mixed = $page-&gt;getFormatted(string $key);\n</code></pre>"},{"location":"page/page-get-formatted/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Field or property name to retrieve</p>"},{"location":"page/page-get-formatted/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"page/page-get-formatted/#see-also","title":"See Also","text":"<ul> <li>Page::getUnformatted()</li> <li>Page::of()</li> </ul>"},{"location":"page/page-get-inputfield/","title":"Page get inputfield","text":""},{"location":"page/page-get-inputfield/#get-a-single-inputfield-for-the-given-field-name","title":"Get a single Inputfield for the given field name","text":"<ul> <li>If requested field name refers to a single field, an Inputfield object is returned.</li> <li>If requested field name refers to a fieldset or tab, then an InputfieldWrapper representing will be returned.</li> <li>Returned Inputfield already has values populated to it.</li> <li>Please note this method deals only with custom fields, not system fields name 'name' or 'status', etc., as those are exclusive to the ProcessPageEdit page editor.</li> </ul>"},{"location":"page/page-get-inputfield/#usage","title":"Usage","text":"<pre><code>$inputfield = $page-&gt;getInputfield(string $fieldName);\n</code></pre>"},{"location":"page/page-get-inputfield/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>fieldName</code></p> <p>string</p>"},{"location":"page/page-get-inputfield/#return-value","title":"Return value","text":"<p><code>Inputfield</code> <code>InputfieldWrapper</code> <code>null</code></p> <p>Returns Inputfield, or null if given field name doesn't match field for this page.</p>"},{"location":"page/page-get-inputfields/","title":"Page get inputfields","text":""},{"location":"page/page-get-inputfields/#return-all-inputfield-objects-necessary-to-edit-this-page","title":"Return all Inputfield objects necessary to edit this page","text":"<p>This method returns an InputfieldWrapper object that contains all the custom Inputfield objects required to edit this page. You may also specify a <code>$fieldName</code> argument to limit what is contained in the returned InputfieldWrapper.</p> <p>Please note this method deals only with custom fields, not system fields name 'name' or 'status', etc., as those are exclusive to the ProcessPageEdit page editor.</p>"},{"location":"page/page-get-inputfields/#usage","title":"Usage","text":"<pre><code>// basic usage\n$inputfieldWrapper = $page-&gt;getInputfields();\n\n// usage with all arguments\n$inputfieldWrapper = $page-&gt;getInputfields($fieldName = '');\n</code></pre>"},{"location":"page/page-get-inputfields/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>fieldName</code> (optional)</p> <p>string, array</p> <p>Optional field to limit to, typically the name of a fieldset or tab.</p> <ul> <li>Or optionally specify array of $options (See <code>Fieldgroup::getPageInputfields()</code> for options).</li> </ul>"},{"location":"page/page-get-inputfields/#return-value","title":"Return value","text":"<p><code>null</code> <code>InputfieldWrapper</code></p> <p>Returns an InputfieldWrapper array of Inputfield objects, or NULL on failure.</p>"},{"location":"page/page-get-iterator/","title":"Page get iterator","text":""},{"location":"page/page-get-iterator/#enables-iteration-of-the-pages-properties-and-fields-with-phps-foreach","title":"Enables iteration of the page's properties and fields with PHP\u2019s foreach()","text":"<p>This fulfills PHP's IteratorAggregate interface, enabling you to interate all of the page's properties and fields.</p>"},{"location":"page/page-get-iterator/#example","title":"Example","text":"<pre><code>// List all properties and fields from the page\nforeach($page as $name =&gt; $value) {\n  echo \"&lt;h3&gt;$name&lt;/h3&gt;\";\n  echo \"&lt;p&gt;$value&lt;/p&gt;\";\n}\n</code></pre>"},{"location":"page/page-get-iterator/#usage","title":"Usage","text":"<pre><code>$arrayObject = $page-&gt;getIterator();\n</code></pre>"},{"location":"page/page-get-iterator/#return-value","title":"Return value","text":"<p><code>ArrayObject</code></p>"},{"location":"page/page-get-languages/","title":"Page get languages","text":""},{"location":"page/page-get-languages/#get-languages-active-for-this-page-and-viewable-by-current-user","title":"Get languages active for this page and viewable by current user","text":""},{"location":"page/page-get-languages/#usage","title":"Usage","text":"<pre><code>$items = $page-&gt;getLanguages();\n</code></pre>"},{"location":"page/page-get-languages/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>null</code></p> <p>Returns PageArray of languages, or null if language support is not active.</p>"},{"location":"page/page-get-markup/","title":"Page get markup","text":""},{"location":"page/page-get-markup/#return-the-markup-value-for-a-given-field-name-or-tag-string","title":"Return the markup value for a given field name or {tag} string","text":"<ol> <li>If given a field name (or <code>name.subname</code> or <code>name1|name2|name3</code>) it will return the markup value as defined by the fieldtype.</li> <li>If given a string with field names referenced in <code>{tags}</code>, it will populate those tags and return the populated string.</li> </ol>"},{"location":"page/page-get-markup/#usage","title":"Usage","text":"<pre><code>$string = $page-&gt;getMarkup(string $key);\n</code></pre>"},{"location":"page/page-get-markup/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Field name or markup string with field {name} tags in it</p>"},{"location":"page/page-get-markup/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"page/page-get-multiple/","title":"Page get multiple","text":""},{"location":"page/page-get-multiple/#get-multiple-page-propertyfield-values-in-an-array","title":"Get multiple Page property/field values in an array","text":"<p>This method works exactly the same as the <code>get()</code> method except that it accepts an array (or CSV string) of properties/fields to get, and likewise returns an array of those property/field values. By default it returns a regular (non-indexed) PHP array in the same order given. To instead get an associative array indexed by the property/field names given, specify <code>true</code> for the <code>$assoc</code> argument.</p> <p>Available since version 3.0.201.</p>"},{"location":"page/page-get-multiple/#example","title":"Example","text":"<pre><code>// returns regular array i.e. [ 'foo val', 'bar val' ]\n$a = $page-&gt;getMultiple([ 'foo', 'bar' ]);\nlist($foo, $bar) = $a;\n\n// returns associative array i.e. [ 'foo' =&gt; 'foo val', 'bar' =&gt; 'bar val' ]\n$a = $page-&gt;getMultiple([ 'foo', 'bar' ], true);\n$foo = $a['foo'];\n$bar = $a['bar'];\n\n// CSV string can also be used instead of array\n$a = $page-&gt;getMultiple('foo,bar');\n</code></pre>"},{"location":"page/page-get-multiple/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $page-&gt;getMultiple($keys);\n\n// usage with all arguments\n$array = $page-&gt;getMultiple($keys, bool $assoc = false);\n</code></pre>"},{"location":"page/page-get-multiple/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>keys</code></p> <p>array, string</p> <p>Array or CSV string of properties to get.</p> <p><code>assoc</code> (optional)</p> <p>bool</p> <p>Get associative array indexed by given properties? (default=false)</p>"},{"location":"page/page-get-multiple/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"page/page-get-text/","title":"Page get text","text":""},{"location":"page/page-get-text/#same-as-getmarkup-except-returned-value-is-plain-text","title":"Same as getMarkup() except returned value is plain text","text":"<p>If no <code>$entities</code> argument is provided, returned value is entity encoded when output formatting is on, and not entity encoded when output formatting is off.</p>"},{"location":"page/page-get-text/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $page-&gt;getText(string $key);\n\n// usage with all arguments\n$string = $page-&gt;getText(string $key, bool $oneLine = false, $entities = null);\n</code></pre>"},{"location":"page/page-get-text/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Field name or string with field {name} tags in it.</p> <p><code>oneLine</code> (optional)</p> <p>bool</p> <p>Specify true if returned value must be on single line.</p> <p><code>entities</code> (optional)</p> <p>bool, null</p> <p>True to entity encode, false to not. Null for auto, which follows page's outputFormatting state.</p>"},{"location":"page/page-get-text/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"page/page-get-text/#see-also","title":"See Also","text":"<ul> <li>Page::getMarkup()</li> </ul>"},{"location":"page/page-get-unformatted/","title":"Page get unformatted","text":""},{"location":"page/page-get-unformatted/#get-the-unformatted-value-of-a-field-regardless-of-current-output-formatting-state","title":"Get the unformatted value of a field, regardless of current output formatting state","text":"<p>When a page\u2019s output formatting state is off, <code>$page-&gt;get('property')</code> or <code>$page-&gt;property</code> will produce the same result as this method call.</p>"},{"location":"page/page-get-unformatted/#example","title":"Example","text":"<pre><code>// Get the 'body' field without any text formatters applied\n$body = $page-&gt;getUnformatted('body');\n</code></pre>"},{"location":"page/page-get-unformatted/#usage","title":"Usage","text":"<pre><code>$mixed = $page-&gt;getUnformatted(string $key);\n</code></pre>"},{"location":"page/page-get-unformatted/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Field or property name to retrieve</p>"},{"location":"page/page-get-unformatted/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"page/page-get-unformatted/#see-also","title":"See Also","text":"<ul> <li>Page::getFormatted()</li> <li>Page::of()</li> <li>Page::setOutputFormatting()</li> <li>Page::outputFormatting()</li> </ul>"},{"location":"page/page-get-unknown/","title":"Page get unknown","text":""},{"location":"page/page-get-unknown/#hookable-method-called-when-a-request-to-a-field-was-made-that-didnt-match-anything","title":"Hookable method called when a request to a field was made that didn't match anything","text":"<p>Hooks that want to inject something here should hook after and modify the $event-&gt;return.</p>"},{"location":"page/page-get-unknown/#usage","title":"Usage","text":"<pre><code>$mixed = $page-&gt;getUnknown(string $key);\n</code></pre>"},{"location":"page/page-get-unknown/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property.</p>"},{"location":"page/page-get-unknown/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code></p> <p>Returns null if property not known, or a value if it is.</p>"},{"location":"page/page-get/","title":"$page->get() method - ProcessWire API","text":"<p>URL Source: https://processwire.com/api/ref/page/get/</p> <p>Markdown Content: Get the value of a Page property (see details for several options)</p> <p>This method can accept a simple property name, and also much more:</p> <ul> <li>You can retrieve a value using either <code>$page-&gt;get('property');</code> or <code>$page-&gt;property</code>.</li> <li>Get the first populated property by specifying multiple properties separated by a pipe, i.e. <code>headline|title</code>.</li> <li>Get multiple properties in a string by specifying a string <code>{property}</code> tags, i.e. <code>{title}: {summary}</code>.</li> <li>Specify a selector string to get the first matching child page, i.e. <code>created&gt;=today</code>.</li> <li>This method can also retrieve sub-properties of object properties, i.e. <code>parent.title</code>.</li> <li>To get a guaranteed iterable value, append <code>[]</code> to the key, i.e. <code>$page-&gt;get('name[]')</code>. 3.0.205+</li> </ul>"},{"location":"page/page-get/#example","title":"Example","text":"<pre><code>// retrieve the title using get\u2026\n$title = $page-&gt;get('title');\n\n// \u2026or retrieve using direct access\n$title = $page-&gt;title;\n\n// retrieve headline if populated, otherwise title\n$headline = $page-&gt;get('headline|title');\n\n// retrieve title, created date, and summary, formatted in a string\n$str = $page-&gt;get('{createdStr}: {title} - {summary}');\n\n// example of getting a sub-property: title of parent page\n$title = $page-&gt;get('parent.title');\n\n// all following features are supported in 3.0.205+\n\n// get value guaranteed to be iterable (array, WireArray, or derived)\n$images = $page-&gt;get('image[]');\n$categories = $page-&gt;get('category[]');\n\n// get item by position/index, returns 1 item whether field is single or multi value\n$file = $page-&gt;get('files[0]'); // get first file  (or null if files is empty)\n$file = $page-&gt;get('files.first); // same as above\n$file = $page-&gt;get('files.last'); // get last file\n$file = $page-&gt;get('files[1]'); // get 2nd file (or null if there isn't one)\n\n// get titles from Page reference field categories in an array\n$titles = $page-&gt;get('categories.title');  // array of titles\n$title = $page-&gt;get('categories[0].title'); // string of just first title\n\n// you can also use a selector in [brackets] for a filtered value\n// example: get categories with titles matching text 'design'\n$categories = $page-&gt;get('categories[title%=design]'); // PageArray\n$category = $page-&gt;get('categories[title%=design][0]'); // Page or null\n$titles = $page-&gt;get('categories[title%=design].title'); // array of strings\n$title = $page-&gt;get('categories[title%=design].title[0]'); // string or null\n</code></pre>"},{"location":"page/page-get/#usage","title":"Usage","text":"<pre><code>$mixed = $page-&gt;get(string $key);\n</code></pre>"},{"location":"page/page-get/#arguments","title":"Arguments","text":"Name Type(s) Description <code>key</code> string Name of property, format string or selector, per the details above."},{"location":"page/page-get/#return-value","title":"Return value","text":"<p><code>mixed</code></p> <p>Value of found property, or NULL if not found.</p>"},{"location":"page/page-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul> <p>$page methods and properties</p> <p>API reference based on ProcessWire core version 3.0.244</p>"},{"location":"page/page-has-access-role/","title":"Page has access role","text":""},{"location":"page/page-has-access-role/#returns-whether-this-page-has-the-given-access-role","title":"Returns whether this page has the given access role","text":"<p>Given access role may be a role name, role ID or Role object.</p>"},{"location":"page/page-has-access-role/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;hasAccessRole($role);\n\n// usage with all arguments\n$bool = $page-&gt;hasAccessRole($role, string $type = 'view');\n</code></pre>"},{"location":"page/page-has-access-role/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>role</code></p> <p>string, int, Role</p> <p><code>type</code> (optional)</p> <p>string</p> <p>May be 'view', 'edit', 'create' or 'add' (default is 'view')</p>"},{"location":"page/page-has-access-role/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-has-children/","title":"Page has children","text":""},{"location":"page/page-has-children/#return-the-number-of-visible-children-optionally-with-conditions","title":"Return the number of visible children, optionally with conditions","text":"<p>This method is similar to <code>$page-&gt;numChildren()</code> except that the default behavior is to exclude non-visible children.</p> <p>This method may be more convenient for front-end navigation use than the <code>$page-&gt;numChildren()</code> method because it only includes the count of visible children. By visible, we mean children that are not hidden, unpublished, or non-accessible due to access control.</p>"},{"location":"page/page-has-children/#example","title":"Example","text":"<pre><code>// Determine if we should show navigation to children\nif($page-&gt;hasChildren()) {\n  // Yes, we should show navigation to children\n}\n</code></pre>"},{"location":"page/page-has-children/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;hasChildren();\n\n// usage with all arguments\n$int = $page-&gt;hasChildren($selector = true);\n</code></pre>"},{"location":"page/page-has-children/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p>"},{"location":"page/page-has-children/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Number of children</p>"},{"location":"page/page-has-field/","title":"Page has field","text":""},{"location":"page/page-has-field/#returns-whether-or-not-given-field-name-id-or-object-is-valid-for-this-page","title":"Returns whether or not given $field name, ID or object is valid for this Page","text":"<p>Note that this only indicates validity, not whether the field is populated.</p>"},{"location":"page/page-has-field/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;hasField($field);\n</code></pre>"},{"location":"page/page-has-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code></p> <p>int, string, Field, array</p> <p>Field name, object or ID to check.</p> <ul> <li>In 3.0.126+ this may also be an array or pipe \"|\" separated string of field names to check.</li> </ul>"},{"location":"page/page-has-field/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p> <p>True if valid, false if not.</p> <ul> <li>In 3.0.126+ returns first matching field name if given an array of field names or pipe separated string of field names.</li> </ul>"},{"location":"page/page-has-file/","title":"Page has file","text":""},{"location":"page/page-has-file/#does-page-have-given-filename-in-its-files-directory","title":"Does Page have given filename in its files directory?","text":"<p>Available since version 3.0.166.</p>"},{"location":"page/page-has-file/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;hasFile(string $file);\n\n// usage with all arguments\n$bool = $page-&gt;hasFile(string $file, array $options = []);\n</code></pre>"},{"location":"page/page-has-file/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>file</code></p> <p>string</p> <p>File basename or verbose hash</p> <p><code>options</code> (optional)</p> <p>array</p> <ul> <li><code>getPathname</code> (bool): Get full path + filename when would otherwise return boolean true? (default=false)</li> <li><code>getPagefile</code> (bool): Get Pagefile object when would otherwise return boolean true? (default=false)</li> </ul>"},{"location":"page/page-has-file/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p>"},{"location":"page/page-has-files-path/","title":"Page has files path","text":""},{"location":"page/page-has-files-path/#does-the-page-have-a-files-path-for-storing-files","title":"Does the page have a files path for storing files?","text":"<p>This will only check if files path exists, it will not create the path if it\u2019s not already present.</p> <p>Available since version 3.0.138. Earlier versions must use the more verbose PagefilesManager::hasPath($page)</p>"},{"location":"page/page-has-files-path/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;hasFilesPath();\n</code></pre>"},{"location":"page/page-has-files-path/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-has-files/","title":"Page has files","text":""},{"location":"page/page-has-files/#does-the-page-have-a-files-path-and-one-or-more-files-present-in-it","title":"Does the page have a files path and one or more files present in it?","text":"<p>This will only check if files exist, it will not create the directory if it\u2019s not already present.</p> <p>Available since version 3.0.138. Earlier versions must use the more verbose PagefilesManager::hasFiles($page)</p>"},{"location":"page/page-has-files/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;hasFiles();\n</code></pre>"},{"location":"page/page-has-files/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-has-status/","title":"Page has status","text":""},{"location":"page/page-has-status/#does-this-page-have-the-given-status","title":"Does this page have the given status?","text":"<p>This method is the preferred way to check if a page has a particular status. The status may be specified as one of the <code>Page::status</code> constants or a string representing one of the constants, i.e. <code>hidden</code>, <code>unpublished</code>, <code>locked</code>, and so on.</p>"},{"location":"page/page-has-status/#example","title":"Example","text":"<pre><code>// check if page has hidden status using status name\nif($page-&gt;hasStatus('hidden')) { ... }\n\n// check if page has hidden status using status constant\nif($page-&gt;hasStatus(Page::statusHidden)) { ... }\n\n// There are also method shortcuts, i.e.\nif($page-&gt;isHidden()) { ... }\nif($page-&gt;isUnpublished()) { ... }\nif($page-&gt;isLocked()) { ... }\n</code></pre>"},{"location":"page/page-has-status/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;hasStatus($status);\n</code></pre>"},{"location":"page/page-has-status/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>status</code></p> <p>int, string</p> <p>Status flag constant or string representation (hidden, locked, unpublished, etc.)</p>"},{"location":"page/page-has-status/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns true if page has the given status, or false if it doesn't.</p>"},{"location":"page/page-has-status/#see-also","title":"See Also","text":"<ul> <li>Page::addStatus()</li> <li>Page::removeStatus()</li> <li>Page::isHidden()</li> <li>Page::isUnpublished()</li> <li>Page::isLocked()</li> </ul>"},{"location":"page/page-http-url/","title":"Page http url","text":""},{"location":"page/page-http-url/#returns-the-url-to-the-page-including-scheme-and-hostname","title":"Returns the URL to the page, including scheme and hostname","text":"<ul> <li> <p>This method is just like the <code>$page-&gt;url()</code> method except that it also includes scheme and hostname.</p> </li> <li> <p>This method can also be accessed at the property <code>$page-&gt;httpUrl</code> (without parenthesis).</p> </li> <li> <p>It is desirable to use this method when some page templates require https while others don't.     This ensures local links will always point to pages with the proper scheme. For other cases, it may be preferable to use <code>$page-&gt;url()</code> since it produces shorter output.</p> </li> </ul>"},{"location":"page/page-http-url/#example","title":"Example","text":"<pre><code>// Generating a link to this page using httpUrl\necho \"&lt;a href='$page-&gt;httpUrl'&gt;$page-&gt;title&lt;/a&gt;\";\n</code></pre>"},{"location":"page/page-http-url/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $page-&gt;httpUrl();\n\n// usage with all arguments\n$string = $page-&gt;httpUrl(array $options = []);\n</code></pre>"},{"location":"page/page-http-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array</p> <p>For details on usage see <code>Page::url()</code> options argument.</p>"},{"location":"page/page-http-url/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns full URL to page, for example: <code>https://processwire.com/about/</code></p>"},{"location":"page/page-http-url/#see-also","title":"See Also","text":"<ul> <li>Page::url()</li> <li>Page::localHttpUrl()</li> </ul>"},{"location":"page/page-if/","title":"Page if","text":""},{"location":"page/page-if/#if-value-is-available-for-key-return-or-call-yes-condition-with-optional-no-condition","title":"If value is available for $key return or call $yes condition (with optional $no condition)","text":"<p>This merges the capabilities of an if() statement, get() and getMarkup() methods in one, plus some useful PW type-specific logic, providing a useful output shortcut. It many situations it enables you to accomplish on one-line of code what might have otherwise taken multiple lines of code. Use this when looking for a useful shortcut and this one fits your need, otherwise use a regular PHP if() statement.</p> <p>This function is primarily intended for conditionally outputting some formatted string value or markup, however its use is not limited to that, as you can specify whatever you\u2019d like for the $yes and $no conditions. The examples section best describes potential usages of this method, so I recommend looking at those before reading all the details of this method.</p> <p>Note that the logic is a little bit smarter for PW than a regular PHP if() statement in these ways:</p> <ul> <li> <p>If value resolves to any kind of empty <code>WireArray</code> (like a <code>PageArray</code>) the NO condition is used. If the WireArray is populated with at least one item then the YES condition is used. So this if() method (unlike PHP if) requires that not only is the value present, but it is also populated.</p> </li> <li> <p>If value resolves to a <code>NullPage</code> the NO condition is used.</p> </li> </ul> <p>The <code>$key</code> argument may be any of the following:</p> <ul> <li> <p>A field name, in which case we will use the value of that field on this page. If the value is empty the NO condition will be used, otherwise the YES condition will be used. You can use any format for the field name that the <code>Page::get()</code> method accepts, so subfields and OR field statements are also okay, i.e. <code>categories.count</code>, `field1|field2|field3', etc.</p> </li> <li> <p>A selector string that must match this page in order to return the YES condition. If it does not match then the NO condition will be used.</p> </li> <li> <p>A boolean, integer, digit string or PHP array. If considered empty by PHP it will return the NO condition, otherwise it will return the YES condition.</p> </li> </ul> <p>The <code>$yes</code> and <code>$no</code> arguments (the conditional actions) may be any of the following:</p> <ul> <li> <p>Any string value that you\u2019d like (HTML markup is fine too).</p> </li> <li> <p>A field name that is present on this page, or optionally the word \u201cvalue\u201d to refer to the field specified in the <code>$key</code> argument. Either way, makes this method return the actual field value as it exists on the page, rather than a string/markup version of it. Note that if this word (\u201cvalue\u201d) is used for the argument then of course the <code>$key</code> argument must be a field name (not a selector string).</p> </li> <li> <p>Any callable inline function that returns the value you want this function to return.</p> </li> <li> <p>A string containing one or more <code>{field}</code> placeholders, where you replace \u201cfield\u201d with a field name. These are in turn populated by the <code>Page::getMarkup()</code> method. You can also use <code>{field.subfield}</code> and <code>{field1|field2|field3}</code> type placeholder strings.</p> </li> <li> <p>A string containing <code>{val}</code> or <code>{value}</code> where they will be replaced with the markup value of the field name given in the $key argument.</p> </li> <li> <p>If you omit the <code>$no</code> argument an empty string is assumed.</p> </li> <li> <p>If you omit both the <code>$yes</code> and <code>$no</code> arguments, then boolean is assumed (true for yes, false for no), which makes this method likewise return a boolean. The only real reason to do this would be to take advantage of the method\u2019s slightly different behavior than regular PHP if() statements (i.e. treating empty WireArray or NullPage objects as false conditions).</p> </li> </ul> <p>Available since version 3.0.126.</p>"},{"location":"page/page-if/#example","title":"Example","text":"<pre><code>// if summary is populated, output it in an paragraph\necho $page-&gt;if(\"summary\", \"&lt;p class='summary'&gt;{summary}&lt;/p&gt;\");\n\n// same as above, but shows you can specify {value} to assume field in $key arg\necho $page-&gt;if(\"summary\", \"&lt;p class='summary'&gt;{value}&lt;/p&gt;\");\n\n// if price is populated, format for output, otherwise ask them to call for price\necho $page-&gt;if(\"price\", function($val) { return '$' . number_format($val); }, \"Please call\");\n\n// you can also use selector strings\necho $page-&gt;if(\"inventory&gt;10\", \"In stock\", \"Limited availability\");\n\n// output an &lt;img&gt; tag for the first image on the page, or blank if none\necho $page-&gt;if(\"images\", function($val) { return \"&lt;img src='{$val-&gt;first-&gt;url}'&gt;\"; });\n</code></pre>"},{"location":"page/page-if/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $page-&gt;if($key);\n\n// usage with all arguments\n$mixed = $page-&gt;if($key, $yes = '', $no = '');\n</code></pre>"},{"location":"page/page-if/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, bool, int</p> <p>Name of field to check, selector string to evaluate, or boolean/int to evalute</p> <p><code>yes</code> (optional)</p> <p>string, callable, mixed</p> <p>If value for $key is present, return or call this</p> <p><code>no</code> (optional)</p> <p>string, callable, mixed</p> <p>If value for $key is empty, return or call this</p>"},{"location":"page/page-if/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>string</code> <code>bool</code></p>"},{"location":"page/page-index/","title":"Page index","text":""},{"location":"page/page-index/#return-the-indexposition-of-this-page-relative-to-siblings","title":"Return the index/position of this page relative to siblings.","text":"<p>If given a hidden or unpublished page, that page would not usually be part of the group of siblings. As a result, such pages will return what the value would be if they were visible (as of 3.0.121). This may overlap with the index of other pages, since indexes are relative to visible pages, unless you specify an include mode (see next paragraph).</p> <p>If you want this method to include hidden/unpublished pages as part of the index numbers, then specify boolean true for the $selector argument (which implies \"include=all\") OR specify a selector of \"include=hidden\", \"include=unpublished\" or \"include=all\".</p> <p>Available since version 3.0.24.</p>"},{"location":"page/page-index/#example","title":"Example","text":"<pre><code>$i = $page-&gt;index();\n$n = $page-&gt;parent-&gt;numChildren();\necho \"This page is $i out of $n total pages\";\n</code></pre>"},{"location":"page/page-index/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;index();\n\n// usage with all arguments\n$int = $page-&gt;index($selector = '');\n</code></pre>"},{"location":"page/page-index/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p>"},{"location":"page/page-index/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Returns index number (zero-based)</p>"},{"location":"page/page-is-changed/","title":"Page is changed","text":""},{"location":"page/page-is-changed/#has-the-page-changed-since-it-was-loaded","title":"Has the Page changed since it was loaded?","text":"<p>To check if only a specific property on the page has changed, specify the property/field name as the first argument. This method assumes that change tracking is enabled for the Page (as it is by default). Pages that are new (i.e. don't yet exist in the database) always return true.</p>"},{"location":"page/page-is-changed/#examples","title":"Examples","text":"<pre><code>// Check if page has any changes\nif($page-&gt;isChanged()) {\n  // There are changes to this page\n  $changes = $page-&gt;getChanges();\n}\n\n// When page is about to be saved, update summary when body has changed\n$this-&gt;addHookBefore('Pages::saveReady', function($event) {\n  $page = $event-&gt;arguments('page');\n  if($page-&gt;isChanged('body')) {\n    // get first 300 chars from body\n    $summary = substr($page-&gt;body, 0, 300);\n    // truncate to position of last period\n    $period = strrpos($summary, '.');\n    if($period) $summary = substr($summary, 0, $period);\n    // populate to the page, so that summary is also saved\n    $page-&gt;summary = $summary;\n  }\n});\n</code></pre>"},{"location":"page/page-is-changed/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;isChanged();\n\n// usage with all arguments\n$bool = $page-&gt;isChanged(string $what = '');\n</code></pre>"},{"location":"page/page-is-changed/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>what</code> (optional)</p> <p>string</p> <p>If specified, only checks the given property for changes rather than the whole page.</p>"},{"location":"page/page-is-changed/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if property has changed, false if not.</p>"},{"location":"page/page-is-changed/#see-also","title":"See Also","text":"<ul> <li>Wire::setTrackChanges()</li> <li>Wire::getChanges()</li> <li>Wire::trackChange()</li> </ul>"},{"location":"page/page-is-hidden/","title":"Page is hidden","text":""},{"location":"page/page-is-hidden/#does-this-page-have-a-hidden-status","title":"Does this page have a 'hidden' status?","text":""},{"location":"page/page-is-hidden/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;isHidden();\n</code></pre>"},{"location":"page/page-is-hidden/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-is-locked/","title":"Page is locked","text":""},{"location":"page/page-is-locked/#does-this-page-have-a-locked-status","title":"Does this page have a 'locked' status?","text":""},{"location":"page/page-is-locked/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;isLocked();\n</code></pre>"},{"location":"page/page-is-locked/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-is-public/","title":"Page is public","text":""},{"location":"page/page-is-public/#is-this-page-public-and-viewable-by-all","title":"Is this page public and viewable by all?","text":"<p>This is a state that persists regardless of user, so has nothing to do with the current user. To be public, the page must be published and have guest view access.</p>"},{"location":"page/page-is-public/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;isPublic();\n</code></pre>"},{"location":"page/page-is-public/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if public, false if not</p>"},{"location":"page/page-is-trash/","title":"Page is trash","text":""},{"location":"page/page-is-trash/#is-this-page-in-the-trash","title":"Is this Page in the trash?","text":""},{"location":"page/page-is-trash/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;isTrash();\n</code></pre>"},{"location":"page/page-is-trash/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-is-unpublished/","title":"Page is unpublished","text":""},{"location":"page/page-is-unpublished/#does-this-page-have-a-unpublished-status","title":"Does this page have a 'unpublished' status?","text":""},{"location":"page/page-is-unpublished/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;isUnpublished();\n</code></pre>"},{"location":"page/page-is-unpublished/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-is/","title":"Page is","text":""},{"location":"page/page-is/#does-this-page-have-the-specified-status-number-or-template-name","title":"Does this page have the specified status number or template name?","text":"<p>See status flag constants at top of Page class. You may also use status names: hidden, locked, unpublished, system, systemID</p>"},{"location":"page/page-is/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;is($status);\n</code></pre>"},{"location":"page/page-is/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>status</code></p> <p>int, string, Selectors</p> <p>Status number, status name, or Template name or selector string/object</p>"},{"location":"page/page-is/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"page/page-links/","title":"Page links","text":""},{"location":"page/page-links/#return-pages-linking-to-this-one-in-textareahtml-fields","title":"Return pages linking to this one (in Textarea/HTML fields)","text":"<p>Applies only to Textarea fields with \u201chtml\u201d content-type and link abstraction enabled.</p> <p>Available since version 3.0.107.</p>"},{"location":"page/page-links/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;links();\n\n// usage with all arguments\n$items = $page-&gt;links($selector = '', $field = '');\n</code></pre>"},{"location":"page/page-links/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, bool</p> <p>Optional selector to filter by or boolean true for \u201cinclude=all\u201d. (default='')</p> <p><code>field</code> (optional)</p> <p>string, Field</p> <p>Optionally limit results to specified field. (default=all applicable Textarea fields)</p>"},{"location":"page/page-links/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-loaded/","title":"Page loaded","text":""},{"location":"page/page-loaded/#for-hooks-to-listen-to-triggered-when-page-is-loaded-and-ready","title":"For hooks to listen to, triggered when page is loaded and ready","text":""},{"location":"page/page-loaded/#usage","title":"Usage","text":"<pre><code>$page-&gt;loaded();\n</code></pre>"},{"location":"page/page-matches-database/","title":"Page matches database","text":""},{"location":"page/page-matches-database/#given-a-selector-return-whether-or-not-this-page-matches-by-querying-the-database","title":"Given a selector, return whether or not this Page matches by querying the database","text":"<p>Available since version 3.0.225.</p>"},{"location":"page/page-matches-database/#example","title":"Example","text":"<pre><code>if($page-&gt;matchesDatabase(\"created&gt;=today\")) {\n  echo \"This page was created today\";\n}\n</code></pre>"},{"location":"page/page-matches-database/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;matchesDatabase($s);\n</code></pre>"},{"location":"page/page-matches-database/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>s</code></p> <p>string, Selectors, array</p> <p>Selector to compare against (string, Selectors object, or array).</p>"},{"location":"page/page-matches-database/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns true if this page matches, or false if it doesn't.</p>"},{"location":"page/page-matches/","title":"Page matches","text":""},{"location":"page/page-matches/#given-a-selector-return-whether-or-not-this-page-matches-using-runtimememory-comparison","title":"Given a selector, return whether or not this Page matches using runtime/memory comparison","text":""},{"location":"page/page-matches/#example","title":"Example","text":"<pre><code>if($page-&gt;matches(\"created&gt;=\" . strtotime(\"today\"))) {\n  echo \"This page was created today\";\n}\n</code></pre>"},{"location":"page/page-matches/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;matches($s);\n</code></pre>"},{"location":"page/page-matches/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>s</code></p> <p>string, Selectors, array</p> <p>Selector to compare against (string, Selectors object, or array).</p>"},{"location":"page/page-matches/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns true if this page matches, or false if it doesn't.</p>"},{"location":"page/page-meta/","title":"Page meta","text":""},{"location":"page/page-meta/#get-or-set-pages-persistent-meta-data","title":"Get or set page\u2019s persistent meta data","text":"<p>This meta data is managed in the DB. Setting a value immediately saves it in the DB, while getting a value immediately loads it from the DB. As a result, this data is independent of the usual Page load and save operations. This is primarily for internal core use, but may be useful for other specific non-core purposes as well.</p> <p>Note that this data is tied to the page where you call it. Meta data is completely free-form and has no connection to ProcessWire fields.</p> <p>Values for meta data must be basic PHP types, whether arrays, strings, numbers, etc. Please do not use objects for meta values at this time.</p> <p>Available since version 3.0.133.</p>"},{"location":"page/page-meta/#example","title":"Example","text":"<pre><code>// set and save a meta value \n$page-&gt;meta()-&gt;set('colors', [ 'red, 'green', 'blue' ]);\n\n// get a meta value\n$colors = $page-&gt;meta()-&gt;get('colors');\n\n// alternate shorter syntax for either of the above\n$page-&gt;meta('colors', [ 'red', 'green', 'blue' ]); // set\n$colors = $page-&gt;meta('colors'); // get\n\n// delete a meta value\n$page-&gt;meta()-&gt;remove('colors');\n\n// get the WireDataDB instance that stores the meta values,\n// it has all the same methods as WireData objects...\n$meta = $page-&gt;meta();\n\n// ...such as, get all values in an array:\n$values = $meta-&gt;getArray();\n</code></pre>"},{"location":"page/page-meta/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wireDataDB = $page-&gt;meta();\n\n// usage with all arguments\n$wireDataDB = $page-&gt;meta($key = '', $value = null);\n</code></pre>"},{"location":"page/page-meta/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string, bool</p> <p>Omit to get the WireData instance or specify property name to get or set.</p> <p><code>value</code> (optional)</p> <p>null, mixed</p> <p>Value to set for given $key or omit if getting a value.</p>"},{"location":"page/page-meta/#return-value","title":"Return value","text":"<p><code>WireDataDB</code> <code>string</code> <code>array</code> <code>int</code> <code>float</code></p>"},{"location":"page/page-next-all/","title":"Page next all","text":""},{"location":"page/page-next-all/#return-all-sibling-pages-after-this-one-optionally-matching-a-selector","title":"Return all sibling pages after this one, optionally matching a selector","text":""},{"location":"page/page-next-all/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;nextAll();\n\n// usage with all arguments\n$items = $page-&gt;nextAll($selector = '', $getQty = false, bool $getPrev = false);\n</code></pre>"},{"location":"page/page-next-all/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, bool</p> <p>Optional selector. When specified, will filter the found siblings.</p> <p><code>getQty</code> (optional)</p> <p>bool, PageArray</p> <p>Return a count instead of PageArray? (boolean)</p> <ul> <li>If no $selector argument is needed, this may be specified as the first argument.</li> <li>Legacy support: You may specify a PageArray of siblings to use instead of the default (deprecated, avoid it).</li> </ul> <p><code>getPrev</code> (optional)</p> <p>bool</p> <p>For internal use, makes this method implement the prevAll() behavior instead.</p>"},{"location":"page/page-next-all/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>int</code></p> <p>Returns all matching pages after this one, or integer if $count option specified.</p>"},{"location":"page/page-next-until/","title":"Page next until","text":""},{"location":"page/page-next-until/#return-all-sibling-pages-after-this-one-until-matching-the-one-specified","title":"Return all sibling pages after this one until matching the one specified","text":""},{"location":"page/page-next-until/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;nextUntil();\n\n// usage with all arguments\n$items = $page-&gt;nextUntil($selector = '', $filter = '', PageArray $siblings = null);\n</code></pre>"},{"location":"page/page-next-until/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, Page, array</p> <p>May either be a selector or Page to stop at. Results will not include this.</p> <p><code>filter</code> (optional)</p> <p>string, array</p> <p>Optional selector to filter matched pages by</p> <p><code>siblings</code> (optional)</p> <p>PageArray</p> <p>Optional PageArray of siblings to use instead (avoid).</p>"},{"location":"page/page-next-until/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-next/","title":"Page next","text":""},{"location":"page/page-next/#return-the-next-sibling-page","title":"Return the next sibling page","text":"<p>By default, hidden, unpublished and non-viewable pages are excluded. If you want them included, be sure to specify <code>include=</code> with hidden, unpublished or all, in your selector.</p>"},{"location":"page/page-next/#example","title":"Example","text":"<pre><code>// Get the next sibling\n$sibling = $page-&gt;next();\n\n// Get the next newest sibling\n$sibling = $page-&gt;next(\"created&gt;$page-&gt;created\");\n\n// Get the next sibling, even if it isn't viewable\n$sibling = $page-&gt;next(\"include=all\");\n</code></pre>"},{"location":"page/page-next/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;next();\n\n// usage with all arguments\n$page = $page-&gt;next($selector = '', PageArray $siblings = null);\n</code></pre>"},{"location":"page/page-next/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array</p> <p>Optional selector. When specified, will find nearest next sibling that matches.</p> <p><code>siblings</code> (optional)</p> <p>PageArray</p> <p>Optional siblings to use instead of the default. Avoid using this argument as it forces this method to use the older/slower functions.</p>"},{"location":"page/page-next/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p> <p>Returns the next sibling page, or a NullPage if none found.</p>"},{"location":"page/page-num-children/","title":"Page num children","text":""},{"location":"page/page-num-children/#return-number-of-all-children-optionally-with-conditions","title":"Return number of all children, optionally with conditions","text":"<p>Use this over the <code>$page-&gt;numChildren</code> property when you want to specify a selector, or when you want the result to include only visible children. See the options for the $selector argument.</p> <p>When you want to retrieve all children with no exclusions or conditions, use the <code>$page-&gt;numChildren</code> property instead.</p>"},{"location":"page/page-num-children/#example","title":"Example","text":"<pre><code>// Find how many children were modified in the last week\n$qty = $page-&gt;numChildren(\"modified&gt;='-1 WEEK'\");\n</code></pre>"},{"location":"page/page-num-children/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;numChildren();\n\n// usage with all arguments\n$int = $page-&gt;numChildren($selector = null);\n</code></pre>"},{"location":"page/page-num-children/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>bool, string, array</p> <ul> <li>When not specified, result includes all children without conditions, same as $page-&gt;numChildren property.</li> <li>When a string or array, a selector is assumed and quantity will be counted based on selector.</li> <li>When boolean true, number includes only visible children (excludes unpublished, hidden, no-access, etc.)</li> <li>When boolean false, number includes all children without conditions, including unpublished, hidden, no-access, etc.</li> </ul>"},{"location":"page/page-num-children/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Number of children</p>"},{"location":"page/page-num-children/#see-also","title":"See Also","text":"<ul> <li>Page::hasChildren()</li> <li>Page::children()</li> <li>Page::child()</li> </ul>"},{"location":"page/page-num-descendants/","title":"Page num descendants","text":""},{"location":"page/page-num-descendants/#return-number-of-descendants-children-grandchildren-great-grandchildren-optionally-with-conditions","title":"Return number of descendants (children, grandchildren, great-grandchildren, \u2026), optionally with conditions","text":"<p>Use this over the <code>$page-&gt;numDescendants</code> property when you want to specify a selector or apply some other filter to the result (see options for <code>$selector</code> argument). If you want to include only visible descendants specify a selector (string or array) or boolean true for the <code>$selector</code> argument, if you don\u2019t need a selector.</p> <p>If you want to find descendant pages (rather than count), use the <code>Page::find()</code> method.</p>"},{"location":"page/page-num-descendants/#example","title":"Example","text":"<pre><code>// Find how many descendants were modified in the last week\n$qty = $page-&gt;numDescendants(\"modified&gt;='-1 WEEK'\");\n</code></pre>"},{"location":"page/page-num-descendants/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;numDescendants();\n\n// usage with all arguments\n$int = $page-&gt;numDescendants($selector = null);\n</code></pre>"},{"location":"page/page-num-descendants/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p>"},{"location":"page/page-num-descendants/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Number of descendants</p>"},{"location":"page/page-num-descendants/#see-also","title":"See Also","text":"<ul> <li>Page::numChildren()</li> <li>Page::find()</li> </ul>"},{"location":"page/page-num-parents/","title":"Page num parents","text":""},{"location":"page/page-num-parents/#return-number-of-parents-depth-relative-to-homepage-that-this-page-has-optionally-filtered-by-a-selector","title":"Return number of parents (depth relative to homepage) that this page has, optionally filtered by a selector","text":"<p>For example, homepage has 0 parents and root level pages have 1 parent (which is the homepage), and the number increases the deeper the page is in the pages structure.</p>"},{"location":"page/page-num-parents/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;numParents();\n\n// usage with all arguments\n$int = $page-&gt;numParents(string $selector = '');\n</code></pre>"},{"location":"page/page-num-parents/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string</p> <p>Optional selector to filter by (default='')</p>"},{"location":"page/page-num-parents/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Number of parents</p>"},{"location":"page/page-of/","title":"Page of","text":""},{"location":"page/page-of/#get-or-set-the-current-output-formatting-state-of-the-page","title":"Get or set the current output formatting state of the page","text":"<ul> <li> <p>Always returns the current output formatting state: true if ON, or false if OFF.</p> </li> <li> <p>To set the current output formatting state, provide a boolean true to turn it ON, or boolean false to turn it OFF.</p> </li> <li> <p>Pages used for front-end output should have output formatting turned ON.</p> </li> <li> <p>Pages that you are manipulating and saving should have output formatting turned OFF.</p> </li> </ul>"},{"location":"page/page-of/#example","title":"Example","text":"<pre><code>// Set output formatting state off, for page manipulation\n$page-&gt;of(false);\n$page-&gt;title = 'About Us';\n$page-&gt;save();\n</code></pre>"},{"location":"page/page-of/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;of();\n\n// usage with all arguments\n$bool = $page-&gt;of(bool $outputFormatting = null);\n</code></pre>"},{"location":"page/page-of/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>outputFormatting</code> (optional)</p> <p>bool</p> <p>If specified, sets output formatting state ON or OFF. If not specified, nothing is changed.</p>"},{"location":"page/page-of/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Current output formatting state (before this function call, if it was changed)</p>"},{"location":"page/page-parent/","title":"Page parent","text":""},{"location":"page/page-parent/#return-this-pages-parent-page-orif-given-a-selectorthe-closest-matching-parent","title":"Return this page\u2019s parent Page, or\u2013if given a selector\u2013the closest matching parent.","text":"<p>Omit all arguments if you just want to retrieve the parent of this page, which would be the same as the <code>$page-&gt;parent</code> property. To retrieve the closest parent matching your selector, specify either a selector string or array.</p>"},{"location":"page/page-parent/#example","title":"Example","text":"<pre><code>// Retrieve the parent\n$parent = $page-&gt;parent();\n\n// Retrieve the closest parent using template \"products\"\n$parent = $page-&gt;parent(\"template=products\");\n</code></pre>"},{"location":"page/page-parent/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;parent();\n\n// usage with all arguments\n$page = $page-&gt;parent($selector = '');\n</code></pre>"},{"location":"page/page-parent/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array</p> <p>Optional selector. When used, it returns the closest parent matching the selector.</p>"},{"location":"page/page-parent/#return-value","title":"Return value","text":"<p><code>Page</code></p> <p>Returns a Page or a NullPage when there is no parent or the selector string did not match any parents.</p>"},{"location":"page/page-parents-until/","title":"Page parents until","text":""},{"location":"page/page-parents-until/#return-all-parents-from-current-page-till-the-one-matched-by-selector","title":"Return all parents from current page till the one matched by $selector","text":"<p>This duplicates the jQuery parentsUntil() function in ProcessWire.</p>"},{"location":"page/page-parents-until/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;parentsUntil();\n\n// usage with all arguments\n$items = $page-&gt;parentsUntil($selector = '', $filter = '');\n</code></pre>"},{"location":"page/page-parents-until/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, Page, array</p> <p>May either be a selector sor Page to stop at. Results will not include this.</p> <p><code>filter</code> (optional)</p> <p>string, array</p> <p>Optional selector to filter matched pages by</p>"},{"location":"page/page-parents-until/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-parents/","title":"Page parents","text":""},{"location":"page/page-parents/#return-this-pages-parent-pages-or-the-parent-pages-matching-the-given-selector","title":"Return this page\u2019s parent pages, or the parent pages matching the given selector.","text":"<p>This method returns all parents of this page, in order. If a selector is specified, they will be filtered by the selector. By default, parents are returned in breadcrumb order. In 3.0.158+ if you specify boolean true for selector argument, then it will return parents in reverse order (closest to furthest).</p>"},{"location":"page/page-parents/#examples","title":"Examples","text":"<pre><code>// Render breadcrumbs \nforeach($page-&gt;parents() as $parent) {\n  echo \"&lt;li&gt;&lt;a href='$parent-&gt;url'&gt;$parent-&gt;title&lt;/a&gt;&lt;/li&gt;\";\n}\n\n// Return all parents, excluding the homepage\n$parents = $page-&gt;parents(\"template!=home\");\n\n// Return parents in reverse order (closest to furthest, 3.0.158+)\n$parents = $page-&gt;parents(true);\n</code></pre>"},{"location":"page/page-parents/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;parents();\n\n// usage with all arguments\n$items = $page-&gt;parents($selector = '');\n</code></pre>"},{"location":"page/page-parents/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, bool</p> <p>Optional selector string to filter parents by or boolean true for reverse order</p>"},{"location":"page/page-parents/#return-value","title":"Return value","text":"<p><code>PageArray</code></p> <p>All parent pages, or those matching the given selector.</p>"},{"location":"page/page-path/","title":"Page path","text":""},{"location":"page/page-path/#returns-the-pages-path-from-the-processwire-installation-root","title":"Returns the Page\u2019s path from the ProcessWire installation root.","text":"<p>The path is always indicated from the ProcessWire installation root. Meaning, if the installation is running from a subdirectory, then the path does not include that subdirectory, whereas the url does. Note that path and url are identical if installation is not running from a subdirectory.</p>"},{"location":"page/page-path/#example","title":"Example","text":"<pre><code>// Difference between path and url on site running from subdirectory /my-site/\necho $page-&gt;path(); // outputs: /about/contact/\necho $page-&gt;url();  // outputs: /my-site/about/contact/\n</code></pre>"},{"location":"page/page-path/#usage","title":"Usage","text":"<pre><code>$string = $page-&gt;path();\n</code></pre>"},{"location":"page/page-path/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns the page path, for example: <code>/about/contact/</code></p>"},{"location":"page/page-prev-all/","title":"Page prev all","text":""},{"location":"page/page-prev-all/#return-all-sibling-pages-before-this-one-optionally-matching-a-selector","title":"Return all sibling pages before this one, optionally matching a selector","text":""},{"location":"page/page-prev-all/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;prevAll();\n\n// usage with all arguments\n$page = $page-&gt;prevAll($selector = '', $getQty = false);\n</code></pre>"},{"location":"page/page-prev-all/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, bool</p> <p>Optional selector. When specified, will filter the found siblings.</p> <p><code>getQty</code> (optional)</p> <p>bool, PageArray</p> <p>Return a count instead of PageArray? (boolean)</p> <ul> <li>If no $selector argument is needed, this may be specified as the first argument.</li> <li>Legacy support: You may specify a PageArray of siblings to use instead of the default (deprecated, avoid it).</li> </ul>"},{"location":"page/page-prev-all/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code> <code>int</code></p> <p>Returns all matching pages before this one, or integer if $getQty requested.</p>"},{"location":"page/page-prev-until/","title":"Page prev until","text":""},{"location":"page/page-prev-until/#return-all-sibling-pages-before-this-one-until-matching-the-one-specified","title":"Return all sibling pages before this one until matching the one specified","text":""},{"location":"page/page-prev-until/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;prevUntil();\n\n// usage with all arguments\n$items = $page-&gt;prevUntil($selector = '', $filter = '', $siblings = null);\n</code></pre>"},{"location":"page/page-prev-until/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, Page, array</p> <p>May either be a selector or Page to stop at. Results will not include this.</p> <p><code>filter</code> (optional)</p> <p>string, array</p> <p>Optional selector to filter matched pages by</p> <p><code>siblings</code> (optional)</p> <p>PageArray, null</p> <p>Optional PageArray of siblings to use instead of default.</p>"},{"location":"page/page-prev-until/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-prev/","title":"Page prev","text":""},{"location":"page/page-prev/#return-the-previous-sibling-page","title":"Return the previous sibling page","text":""},{"location":"page/page-prev/#example","title":"Example","text":"<pre><code>// Get the previous sibling\n$sibling = $page-&gt;prev();\n\n// Get the previous sibling having field \"featured\" with value of \"1\"\n$sibling = $page-&gt;prev(\"featured=1\");\n</code></pre>"},{"location":"page/page-prev/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page = $page-&gt;prev();\n\n// usage with all arguments\n$page = $page-&gt;prev($selector = '', $siblings = null);\n</code></pre>"},{"location":"page/page-prev/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array</p> <p>Optional selector. When specified, will find nearest previous sibling that matches.</p> <p><code>siblings</code> (optional)</p> <p>PageArray, null</p> <p>Optional siblings to use instead of the default.</p>"},{"location":"page/page-prev/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p> <p>Returns the previous sibling page, or a NullPage if none found.</p>"},{"location":"page/page-references/","title":"Page references","text":""},{"location":"page/page-references/#return-pages-that-have-page-reference-fields-pointing-to-this-one-references","title":"Return pages that have Page reference fields pointing to this one (references)","text":"<p>By default this excludes pages that are hidden, unpublished and pages excluded due to access control for the current user. To prevent these exclusions specify an include mode in the selector, i.e. <code>include=all</code>, or you can use boolean <code>true</code> as a shortcut to specify that you do not want any exclusions.</p> <p>Available since version 3.0.107.</p>"},{"location":"page/page-references/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;references();\n\n// usage with all arguments\n$items = $page-&gt;references($selector = '', $field = '');\n</code></pre>"},{"location":"page/page-references/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, bool</p> <p>Optional selector to filter results by, or boolean true as shortcut for <code>include=all</code>.</p> <p><code>field</code> (optional)</p> <p>Field, string, bool</p> <p>Optionally limit to pages using specified field (name or Field object),</p> <ul> <li>OR specify boolean TRUE to return array of PageArrays indexed by field names.</li> <li>If $field argument not specified, it searches all applicable Page fields.</li> </ul>"},{"location":"page/page-references/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>array</code></p>"},{"location":"page/page-remove-status/","title":"Page remove status","text":""},{"location":"page/page-remove-status/#remove-the-specified-status-from-this-page","title":"Remove the specified status from this page","text":"<p>This is the preferred way to remove a status from a page. There is also a corresponding <code>Page::addStatus()</code> method.</p>"},{"location":"page/page-remove-status/#example","title":"Example","text":"<pre><code>// Remove hidden status from the page using status name\n$page-&gt;removeStatus('hidden');\n\n// Remove hidden status from the page using status constant\n$page-&gt;removeStatus(Page::statusHidden);\n</code></pre>"},{"location":"page/page-remove-status/#usage","title":"Usage","text":"<pre><code>$page-&gt;removeStatus($statusFlag);\n</code></pre>"},{"location":"page/page-remove-status/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>statusFlag</code></p> <p>int, string</p> <p>Status flag constant or string representation (hidden, locked, unpublished, etc.)</p>"},{"location":"page/page-remove-status/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page/page-remove-status/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If you attempt to remove <code>Page::statusSystem</code> or <code>Page::statusSystemID</code> statuses without first adding <code>Page::statusSystemOverride</code> status.</li> </ul>"},{"location":"page/page-remove-status/#see-also","title":"See Also","text":"<ul> <li>Page::addStatus()</li> <li>Page::hasStatus()</li> </ul>"},{"location":"page/page-render-field/","title":"Page render field","text":""},{"location":"page/page-render-field/#render-given-fieldname-using-sitetemplatesfields-markup-file","title":"Render given $fieldName using site/templates/fields/ markup file","text":"<p>Shorter aliases of this method include:</p> <ul> <li><code>$page-&gt;render('fieldName', $file);</code></li> <li><code>$page-&gt;render-&gt;fieldName;</code></li> <li><code>$page-&gt;_fieldName_;</code></li> </ul> <p>This method expects that there is a file in <code>/site/templates/fields/</code> to render the field with:</p> <ul> <li><code>/site/templates/fields/fieldName.php</code></li> <li><code>/site/templates/fields/fieldName.templateName.php</code></li> <li><code>/site/templates/fields/fieldName/$file.php</code> (using $file argument)</li> <li><code>/site/templates/fields/$file.php</code> (using $file argument)</li> <li><code>/site/templates/fields/$file/fieldName.php</code> (using $file argument, must have trailing slash)</li> <li><code>/site/templates/fields/$file.fieldName.php</code> (using $file argument, must have trailing period)</li> </ul> <p>Note that the examples above showing $file require that the <code>$file</code> argument is specified.</p>"},{"location":"page/page-render-field/#example","title":"Example","text":"<pre><code>// Render output for the 'images' field (assumes you have implemented an output file)\necho $page-&gt;renderField('images');\n</code></pre>"},{"location":"page/page-render-field/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $page-&gt;renderField(string $fieldName);\n\n// usage with all arguments\n$mixed = $page-&gt;renderField(string $fieldName, string $file = '', $value = null);\n</code></pre>"},{"location":"page/page-render-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>fieldName</code></p> <p>string</p> <p>May be any custom field name or native page property.</p> <p><code>file</code> (optional)</p> <p>string</p> <p>Optionally specify file (in site/templates/fields/) to render with (may omit .php extension).</p> <p><code>value</code> (optional)</p> <p>mixed, null</p> <p>Optionally specify value to render, otherwise it will be pulled from this $page.</p>"},{"location":"page/page-render-field/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>string</code></p> <p>Returns the rendered value of the field</p>"},{"location":"page/page-render-value/","title":"Page render value","text":""},{"location":"page/page-render-value/#render-given-value-using-sitetemplatesfields-markup-file","title":"Render given $value using /site/templates/fields/ markup file","text":"<p>See the documentation for the <code>Page::renderField()</code> method for information about the <code>$file</code> argument.</p>"},{"location":"page/page-render-value/#example","title":"Example","text":"<pre><code>// Render a value using site/templates/fields/my-images.php custom output template\n$images = $page-&gt;images;\necho $page-&gt;renderValue($images, 'my-images');\n</code></pre>"},{"location":"page/page-render-value/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $page-&gt;renderValue(mixed $value);\n\n// usage with all arguments\n$mixed = $page-&gt;renderValue(mixed $value, string $file = '');\n</code></pre>"},{"location":"page/page-render-value/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>mixed</p> <p>Value to render</p> <p><code>file</code> (optional)</p> <p>string</p> <p>Optionally specify file (in site/templates/fields/) to render with (may omit .php extension)</p>"},{"location":"page/page-render-value/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>string</code></p> <p>Returns rendered value</p>"},{"location":"page/page-reset-track-changes/","title":"Page reset track changes","text":""},{"location":"page/page-reset-track-changes/#clears-out-any-tracked-changes-and-turns-change-tracking-on-or-off","title":"Clears out any tracked changes and turns change tracking ON or OFF","text":"<p>Use this method when you want to clear a list of tracked changes on the page. Note that any changes are still present, but ProcessWire no longer knows they had been changed. Meaning, the changes won't be available to the <code>$page-&gt;isChanged()</code> and <code>$page-&gt;getChanges()</code> methods, and the changes might be skipped over if/when the page is saved.</p>"},{"location":"page/page-reset-track-changes/#example","title":"Example","text":"<pre><code>// Clear any changes that have been tracked and start fresh\n$page-&gt;resetTrackChanges();\n</code></pre>"},{"location":"page/page-reset-track-changes/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page-&gt;resetTrackChanges();\n\n// usage with all arguments\n$page-&gt;resetTrackChanges(bool $trackChanges = true);\n</code></pre>"},{"location":"page/page-reset-track-changes/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>trackChanges</code> (optional)</p> <p>bool</p> <p>True to turn change tracking ON, or false to turn OFF. Default of true is assumed.</p>"},{"location":"page/page-reset-track-changes/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page/page-reset-track-changes/#see-also","title":"See Also","text":"<ul> <li>Page::isChanged()</li> <li>Page::getChanges()</li> <li>Page::trackChanges()</li> </ul>"},{"location":"page/page-root-parent/","title":"Page root parent","text":""},{"location":"page/page-root-parent/#get-the-lowest-level-non-homepage-parent-of-this-page","title":"Get the lowest-level, non-homepage parent of this page","text":"<p>The rootParents typically comprise the first level of navigation on a site, and in many cases are considered the \"section\" pages of the site.</p>"},{"location":"page/page-root-parent/#example","title":"Example","text":"<pre><code>// Determine if we are in the \"products\" section of the site\nif($page-&gt;rootParent()-&gt;template == 'products') {\n  // we are in the products section\n} else {\n  // we are in some other section of the site\n}\n</code></pre>"},{"location":"page/page-root-parent/#usage","title":"Usage","text":"<pre><code>$page = $page-&gt;rootParent();\n</code></pre>"},{"location":"page/page-root-parent/#return-value","title":"Return value","text":"<p><code>Page</code></p>"},{"location":"page/page-save/","title":"Page save","text":""},{"location":"page/page-save/#save-the-entire-page-to-the-database-or-just-a-field-from-it","title":"Save the entire page to the database, or just a field from it","text":"<p>This is the same as calling <code>$pages-&gt;save($page);</code> or <code>$pages-&gt;saveField($page, $field)</code>, but calling directly on the $page like this may be more convenient in many instances.</p> <p>If you want to hook into the save operation, hook into one of the many Pages class hooks referenced in the 'See Also' section.</p>"},{"location":"page/page-save/#example","title":"Example","text":"<pre><code>// Save the page\n$page-&gt;save();\n\n// Save just the 'title' field from the page\n$page-&gt;save('title');\n</code></pre>"},{"location":"page/page-save/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;save();\n\n// usage with all arguments\n$bool = $page-&gt;save($field = null, array $options = []);\n</code></pre>"},{"location":"page/page-save/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>field</code> (optional)</p> <p>Field, string</p> <p>Optional field to save (name of field or Field object)</p> <p><code>options</code> (optional)</p> <p>array</p> <p>See Pages::save() documentation for options. You may also specify $options as the first argument if no $field is needed.</p>"},{"location":"page/page-save/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns true on success false on fail</p>"},{"location":"page/page-save/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - on database error</li> </ul>"},{"location":"page/page-save/#see-also","title":"See Also","text":"<ul> <li>Pages::save()</li> <li>Pages::saveField()</li> <li>Pages::saveReady()</li> <li>Pages::saveFieldReady()</li> <li>Pages::saved()</li> <li>Pages::fieldSaved()</li> </ul>"},{"location":"page/page-secure-files/","title":"Page secure files","text":""},{"location":"page/page-secure-files/#does-this-page-use-secure-pagefiles","title":"Does this Page use secure Pagefiles?","text":"<p>See also <code>$template-&gt;pagefileSecure</code> and <code>$config-&gt;pagefileSecure</code> which determine the return value.</p> <p>Available since version 3.0.166.</p>"},{"location":"page/page-secure-files/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;secureFiles();\n</code></pre>"},{"location":"page/page-secure-files/#return-value","title":"Return value","text":"<p><code>bool</code> <code>null</code></p> <p>Returns boolean true if yes, false if no, or null if not known</p>"},{"location":"page/page-set-and-save/","title":"Page set and save","text":""},{"location":"page/page-set-and-save/#quickly-set-field-values-and-save-to-database","title":"Quickly set field value(s) and save to database","text":"<p>You can specify a single field and value, or an array of fields and values.</p> <p>This method does not need output formatting to be turned off first, so make sure that whatever value(s) you set are not formatted values.</p>"},{"location":"page/page-set-and-save/#examples","title":"Examples","text":"<pre><code>// Set and save the summary field\n$page-&gt;setAndSave('summary', 'When nothing is done, nothing is left undone.');\n\n// Set and save multiple fields\n$page-&gt;setAndSave([\n  'title' =&gt; 'It is Friday again',\n  'subtitle' =&gt; 'Here is another new blog post',\n  'body' =&gt; 'Hope you all have a great weekend!'\n]);\n\n// Update a 'last_login' field after every user login\n$session-&gt;addHookAfter('loginSuccess', function($event) {\n  $user = $event-&gt;arguments(0);\n  $user-&gt;setAndSave('last_login', time());\n});\n</code></pre>"},{"location":"page/page-set-and-save/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $page-&gt;setAndSave($key);\n\n// usage with all arguments\n$bool = $page-&gt;setAndSave($key, $value = null, array $options = []);\n</code></pre>"},{"location":"page/page-set-and-save/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>array, string</p> <p>Field or property name to set, or array of one or more ['property' =&gt; $value].</p> <p><code>value</code> (optional)</p> <p>string, int, bool, object</p> <p>Value to set, or omit if you provided an array in first argument.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>See Pages::save() for additional $options that may be specified.</p>"},{"location":"page/page-set-and-save/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns true on success, false on failure</p>"},{"location":"page/page-set-and-save/#see-also","title":"See Also","text":"<ul> <li>Blog post about setAndSave</li> <li>Pages::save()</li> </ul>"},{"location":"page/page-set-name/","title":"Page set name","text":""},{"location":"page/page-set-name/#set-the-page-name-optionally-for-specific-language","title":"Set the page name, optionally for specific language","text":""},{"location":"page/page-set-name/#example","title":"Example","text":"<pre><code>// Set page name (default language)\n$page-&gt;setName('my-page-name');\n\n// This is equivalent to the above\n$page-&gt;name = 'my-page-name';\n\n// Set page name for Spanish language\n$page-&gt;setName('la-cerveza', 'es');\n</code></pre>"},{"location":"page/page-set-name/#usage","title":"Usage","text":"<pre><code>// basic usage\n$page-&gt;setName(string $value);\n\n// usage with all arguments\n$page-&gt;setName(string $value, $language = null);\n</code></pre>"},{"location":"page/page-set-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string</p> <p>Page name that you want to set</p> <p><code>language</code> (optional)</p> <p>Language, string, int, null</p> <p>Set language for name (can also be language name or string in format \"name1234\")</p>"},{"location":"page/page-set-name/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page/page-set-quietly/","title":"Page set quietly","text":""},{"location":"page/page-set-quietly/#quietly-set-the-value-of-a-page-property","title":"Quietly set the value of a page property.","text":"<p>Set a value to a page without tracking changes and without exceptions. Otherwise same as set().</p>"},{"location":"page/page-set-quietly/#usage","title":"Usage","text":"<pre><code>$page-&gt;setQuietly(string $key, mixed $value);\n</code></pre>"},{"location":"page/page-set-quietly/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property you want to set</p> <p><code>value</code></p> <p>mixed</p> <p>Value of property</p>"},{"location":"page/page-set-quietly/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page/page-set-quietly/#see-also","title":"See Also","text":"<ul> <li>Wire::trackChanges()</li> <li>WireData::set()</li> </ul>"},{"location":"page/page-set-unformatted/","title":"Page set unformatted","text":""},{"location":"page/page-set-unformatted/#set-the-unformatted-value-of-a-field-regardless-of-current-output-formatting-state","title":"Set the unformatted value of a field, regardless of current output formatting state","text":"<p>Use this when setting an unformatted value to a page that has (or might have) output formatting enabled. This will save you the steps of checking the output formatting state, turning it off, setting the value, and turning it back on again (if it was on). Note that the output formatting distinction matters for some field types and not others, just depending on the case\u2014this method is safe to use either way.</p> <p>Make sure you do not use this to set an already formatted value to a Page (like some text that has been entity encoded). This method skips over some of the checks that might otherwise flag the page as corrupted.</p> <p>Available since version 3.0.169.</p>"},{"location":"page/page-set-unformatted/#example","title":"Example","text":"<pre><code>// good usage\n$page-&gt;setUnformatted('title', 'This &amp; That');\n\n// bad usage\n$page-&gt;setUnformatted('title', 'This &amp;amp; That');\n</code></pre>"},{"location":"page/page-set-unformatted/#usage","title":"Usage","text":"<pre><code>$self = $page-&gt;setUnformatted(string $key, mixed $value);\n</code></pre>"},{"location":"page/page-set-unformatted/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p><code>value</code></p> <p>mixed</p>"},{"location":"page/page-set-unformatted/#return-value","title":"Return value","text":"<p><code>self</code></p>"},{"location":"page/page-set-unformatted/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given an object value that indicates it is already formatted.</li> </ul>"},{"location":"page/page-set-unformatted/#see-also","title":"See Also","text":"<ul> <li>Page::getUnformatted()</li> <li>Page::of()</li> <li>Page::setOutputFormatting()</li> <li>Page::outputFormatting()</li> </ul>"},{"location":"page/page-set/","title":"Page set","text":""},{"location":"page/page-set/#set-the-value-of-a-page-property","title":"Set the value of a page property","text":"<p>You can set properties to a page using either <code>$page-&gt;set('property', $value);</code> or <code>$page-&gt;property = $value;</code>.</p>"},{"location":"page/page-set/#example","title":"Example","text":"<pre><code>// Set the page title using set() method\n$page-&gt;set('title', 'About Us');\n\n// Set the page title directly (equivalent to the above)\n$page-&gt;title = 'About Us';\n</code></pre>"},{"location":"page/page-set/#usage","title":"Usage","text":"<pre><code>$page = $page-&gt;set(string $key, mixed $value);\n</code></pre>"},{"location":"page/page-set/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property to set</p> <p><code>value</code></p> <p>mixed</p> <p>Value to set</p>"},{"location":"page/page-set/#return-value","title":"Return value","text":"<p><code>Page</code> <code>WireData</code></p> <p>Reference to this Page</p>"},{"location":"page/page-set/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"page/page-set/#see-also","title":"See Also","text":"<ul> <li>WireData::setQuietly()</li> <li>WireData::get()</li> </ul>"},{"location":"page/page-siblings/","title":"Page siblings","text":""},{"location":"page/page-siblings/#return-this-pages-sibling-pages-optionally-filtered-by-a-selector","title":"Return this Page\u2019s sibling pages, optionally filtered by a selector.","text":"<p>To exclude the current page in list of siblings, specify boolean false for first or second argument.</p>"},{"location":"page/page-siblings/#example","title":"Example","text":"<pre><code>// Get all sibling pages \n$siblings = $page-&gt;siblings();\n\n// Get all sibling pages, and exclude current page from the returned value\n$siblings = $page-&gt;siblings(false);\n\n// Get all siblings having the \"product-featured\" template, sorted by name\n$featured = $page-&gt;siblings(\"template=product-featured, sort=name\");\n\n// Same as above, while excluding current page\n$featured = $page-&gt;siblings(\"template=product-featured, sort=name\", false);\n</code></pre>"},{"location":"page/page-siblings/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $page-&gt;siblings();\n\n// usage with all arguments\n$items = $page-&gt;siblings($selector = '', bool $includeCurrent = true);\n</code></pre>"},{"location":"page/page-siblings/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, bool</p> <p>Optional selector to filter siblings by, or omit for all siblings.</p> <p><code>includeCurrent</code> (optional)</p> <p>bool</p> <p>Specify false to exclude current page in the returned siblings (default=true). If no $selector argument is given, this argument may optionally be specified as the first argument.</p>"},{"location":"page/page-siblings/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"page/page-sortfield/","title":"Page sortfield","text":""},{"location":"page/page-sortfield/#return-the-field-name-by-which-children-are-sorted","title":"Return the field name by which children are sorted","text":"<ul> <li>If sort is descending, then field name is prepended with a \"-\".</li> <li>Returns the value \"sort\" if pages are unsorted or sorted manually.</li> <li>Note the return value from this method may be different from the <code>Page::sortfield</code> (lowercase) property, as this method considers the sort field specified with the template as well.</li> </ul>"},{"location":"page/page-sortfield/#usage","title":"Usage","text":"<pre><code>$string = $page-&gt;sortfield();\n</code></pre>"},{"location":"page/page-sortfield/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"page/page-status/","title":"Page status","text":""},{"location":"page/page-status/#get-or-set-current-status","title":"Get or set current status","text":"<ul> <li> <p>When manipulating status, you may prefer to use the <code>$page-&gt;addStatus()</code> and <code>$page-&gt;removeStatus()</code> methods instead.</p> </li> <li> <p>Use this <code>status()</code> method when you want to set multiple statuses at once, or when you want to get status rather than set it.</p> </li> <li> <p>You can also get or set status directly, by manipulating the <code>$page-&gt;status</code> property.</p> </li> </ul>"},{"location":"page/page-status/#example","title":"Example","text":"<pre><code>// Get the current status as bitmask\n$status = $page-&gt;status();\n\n// Get an array of status names assigned to page\n$statuses = $page-&gt;status(true);\n\n// Set status by Page constant bitmask\n$page-&gt;status(Page::statusHidden | Page::statusUnpublished);\n\n// Set status by name\n$page-&gt;status('unpublished');\n\n// Set status by names\n$page-&gt;status(['hidden', 'unpublished']);\n</code></pre>"},{"location":"page/page-status/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $page-&gt;status();\n\n// usage with all arguments\n$int = $page-&gt;status($value = false, $status = null);\n</code></pre>"},{"location":"page/page-status/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code> (optional)</p> <p>bool, int</p> <p>Optionally specify one of the following:</p> <ul> <li><code>true</code> (boolean): To return an array of status names (indexed by status number).</li> <li><code>integer|string|array</code>: Status number(s) or status name(s) to set the current page status (same as $page-&gt;status = $value)</li> </ul> <p><code>status</code> (optional)</p> <p>int, null</p> <p>If you specified <code>true</code> for first argument, optionally specify status value you want to use (if not the current).</p>"},{"location":"page/page-status/#return-value","title":"Return value","text":"<p><code>int</code> <code>array</code> <code>Page</code></p> <p>If setting status, <code>$this</code> is returned. If getting status: current status or array of status names is returned.</p>"},{"location":"page/page-status/#see-also","title":"See Also","text":"<ul> <li>Page::addStatus()</li> <li>Page::removeStatus()</li> <li>Page::hasStatus()</li> </ul>"},{"location":"page/page-template/","title":"Page template","text":""},{"location":"page/page-template/#get-or-set-template","title":"Get or set template","text":"<p>Available since version 3.0.181.</p>"},{"location":"page/page-template/#usage","title":"Usage","text":"<pre><code>// basic usage\n$template = $page-&gt;template();\n\n// usage with all arguments\n$template = $page-&gt;template($template = null);\n</code></pre>"},{"location":"page/page-template/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>template</code> (optional)</p> <p>null, Template, string, int</p>"},{"location":"page/page-template/#return-value","title":"Return value","text":"<p><code>Template</code> <code>null</code></p>"},{"location":"page/page-trash/","title":"Page trash","text":""},{"location":"page/page-trash/#move-this-page-to-the-trash","title":"Move this page to the trash","text":"<p>This is the same as calling <code>$pages-&gt;trash($page)</code>.</p>"},{"location":"page/page-trash/#example","title":"Example","text":"<pre><code>// Trash a page\n$item = $pages-&gt;get('/some-page/');\n$item-&gt;trash();\n</code></pre>"},{"location":"page/page-trash/#usage","title":"Usage","text":"<pre><code>$bool = $page-&gt;trash();\n</code></pre>"},{"location":"page/page-trash/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"page/page-trash/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"page/page-url/","title":"Page url","text":""},{"location":"page/page-url/#returns-the-url-to-the-page-optionally-with-additional-options","title":"Returns the URL to the page (optionally with additional $options)","text":"<ul> <li> <p>This method can also be accessed by property <code>$page-&gt;url</code> (without parenthesis).</p> </li> <li> <p>Like <code>$page-&gt;path()</code> but comes from server document root. Path and url are identical if installation is not running from a subdirectory.</p> </li> <li> <p>Use <code>$page-&gt;httpUrl()</code> if you need the URL to include scheme and hostname.</p> </li> <li> <p>Need to hook this method? While it's not directly hookable, it does use the <code>$page-&gt;path()</code> method, which is hookable. As a result, you can affect the output of the url() method by hooking the path() method instead.</p> </li> </ul>"},{"location":"page/page-url/#options-argument","title":"$options argument","text":"<p>You can specify an <code>$options</code> argument to this method with any of the following:</p> <ul> <li><code>pageNum</code> (int|string|bool): Specify pagination number, \"+\" for next pagination, \"-\" for previous pagination, or boolean true (3.0.155+) for current.</li> <li><code>urlSegmentStr</code> (string|bool): Specify a URL segment string to append, or true (3.0.155+) for current.</li> <li><code>urlSegments</code> (array|bool): Specify array of URL segments to append (may be used instead of urlSegmentStr), or boolean true (3.0.155+) for current. Specify associative array to use keys and values in order (3.0.155+).</li> <li><code>data</code> (array): Array of key=value variables to form a query string.</li> <li><code>http</code> (bool): Specify true to make URL include scheme and hostname (default=false).</li> <li><code>language</code> (Language): Specify Language object to return URL in that Language.</li> <li><code>host</code> (string): Force hostname to use, i.e. 'world.com' or 'hello.world.com'. The 'http' option is implied. (3.0.178+)</li> <li><code>scheme</code> (string): Like http option, makes URL have scheme+hostname, but you specify scheme here, i.e. 'https' (3.0.178+) Note that if you specify scheme of 'https' and $config-&gt;noHTTPS is true, the 'http' scheme will still be used.</li> </ul> <p>You can also specify any of the following for <code>$options</code> as shortcuts:</p> <ul> <li>If you specify an <code>int</code> for options it is assumed to be the <code>pageNum</code> option.</li> <li>If you specify <code>+</code> or <code>-</code> for options it is assumed to be the <code>pageNum</code> \u201cnext/previous pagination\u201d option.</li> <li>If you specify any other <code>string</code> for options it is assumed to be the <code>urlSegmentStr</code> option.</li> <li>If you specify a <code>boolean</code> (true) for options it is assumed to be the <code>http</code> option.</li> </ul> <p>Please also note regarding <code>$options</code>:</p> <ul> <li>This method honors template slash settings for page, URL segments and page numbers.</li> <li>Any passed in URL segments are automatically sanitized with <code>Sanitizer::pageNameUTF8()</code>.</li> <li>If using the <code>pageNum</code> or URL segment options please also make sure these are enabled on the page\u2019s template.</li> <li>The query string generated by any <code>data</code> variables is entity encoded when output formatting is on.</li> <li>The <code>language</code> option requires that the <code>LanguageSupportPageNames</code> module is installed.</li> <li>The prefix for page numbers honors <code>$config-&gt;pageNumUrlPrefix</code> and multi-language prefixes as well.</li> </ul>"},{"location":"page/page-url/#examples","title":"Examples","text":"<pre><code>// Using $page-&gt;url to output navigation\nforeach($page-&gt;children as $child) {\n  echo \"&lt;li&gt;&lt;a href='$child-&gt;url'&gt;$child-&gt;title&lt;/a&gt;&lt;/li&gt;\";\n}\n\n// Difference between url() and path() on site running from subdirectory /my-site/\necho $page-&gt;url();  // outputs: /my-site/about/contact/\necho $page-&gt;path(); // outputs: /about/contact/\n\n// Specify that you want a specific pagination (output: /example/page2)\necho $page-&gt;url(2);\n\n// Get URL for next and previous pagination\necho $page-&gt;url('+'); // next\necho $page-&gt;url('-'); // prev\n\n// Get a URL with scheme and hostname (output: http://domain.com/example/)\necho $page-&gt;url(true);\n\n// Specify a URL segment string (output: /example/photos/1)\necho $page-&gt;url('photos/1');\n\n// Use a URL segment array (output: /example/photos/1)\necho $page-&gt;url([\n  'urlSegments' =&gt; [ 'photos', '1' ]\n]);\n\n// Get URL in a specific language\n$fr = $languages-&gt;get('fr');\necho $page-&gt;url($fr);\n\n// Include data/query vars (output: /example/?action=view&amp;type=photos)\necho $page-&gt;url([\n  'data' =&gt; [\n    'action' =&gt; 'view',\n    'type' =&gt; 'photos'\n  ]\n]);\n\n// Specify multiple options (output: http://domain.com/example/foo/page3?bar=baz)\necho $page-&gt;url([\n  'http' =&gt; true,\n  'pageNum' =&gt; 3,\n  'urlSegmentStr' =&gt; 'foo',\n  'data' =&gt; [ 'bar' =&gt; 'baz' ]\n]);\n</code></pre>"},{"location":"page/page-url/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $page-&gt;url();\n\n// usage with all arguments\n$string = $page-&gt;url($options = null);\n</code></pre>"},{"location":"page/page-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array, int, string, bool, Language, null</p> <p>Optionally specify options to modify default behavior (see method description).</p>"},{"location":"page/page-url/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns page URL, for example: <code>/my-site/about/contact/</code></p>"},{"location":"page/page-url/#see-also","title":"See Also","text":"<ul> <li>Page::path()</li> <li>Page::httpUrl()</li> <li>Page::editUrl()</li> <li>Page::localUrl()</li> </ul>"},{"location":"page/page-urls/","title":"Page urls","text":""},{"location":"page/page-urls/#return-all-urls-that-this-page-can-be-accessed-from-excluding-url-segments-and-pagination","title":"Return all URLs that this page can be accessed from (excluding URL segments and pagination)","text":"<p>This includes the current page URL, any other language URLs (for which page is active), and any past (historical) URLs the page was previously available at (which will redirect to it).</p> <ul> <li>Returned URLs do not include additional URL segments or pagination numbers.</li> <li>Returned URLs are indexed by language name, i.e. \u201cdefault\u201d, \u201cfr\u201d, \u201ces\u201d, etc.</li> <li>If multi-language URLs not installed, then index is just \u201cdefault\u201d.</li> <li>Past URLs are indexed by language; then ISO-8601 date, i.e. \u201cdefault;2016-08-11T07:44:43-04:00\u201d, where the date represents the last date that URL was considered current.</li> <li>If PagePathHistory core module is not installed then past/historical URLs are excluded.</li> <li>You can disable past/historical or multi-language URLs by using the $options argument.</li> </ul> <p>Available since version 3.0.107.</p>"},{"location":"page/page-urls/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $page-&gt;urls();\n\n// usage with all arguments\n$array = $page-&gt;urls(array $options = []);\n</code></pre>"},{"location":"page/page-urls/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify default behavior:</p> <ul> <li><code>http</code> (bool): Make URLs include current scheme and hostname (default=false).</li> <li><code>past</code> (bool): Include past/historical URLs? (default=true)</li> <li><code>languages</code> (bool): Include other language URLs when supported/available? (default=true).</li> <li><code>language</code> (Language|int|string): Include only URLs for this language (default=null). Note: the <code>languages</code> option must be true if using the <code>language</code> option.</li> </ul>"},{"location":"page/page-urls/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"page/page-urls/#see-also","title":"See Also","text":"<ul> <li>Page::addUrl()</li> <li>page::removeUrl()</li> </ul>"},{"location":"page-array/page-array-add/","title":"Page array add","text":""},{"location":"page-array/page-array-add/#add-one-or-more-page-objects-to-this-pagearray","title":"Add one or more Page objects to this PageArray.","text":"<p>Please see the <code>WireArray::add()</code> method for more details.</p>"},{"location":"page-array/page-array-add/#example","title":"Example","text":"<pre><code>// Add one page\n$pageArray-&gt;add($page);\n\n// Add multiple pages\n$pageArray-&gt;add($pages-&gt;find(\"template=basic-page\"));\n\n// Add page by ID\n$pageArray-&gt;add(1005);\n</code></pre>"},{"location":"page-array/page-array-add/#usage","title":"Usage","text":"<pre><code>$pageArray-&gt;add($item);\n</code></pre>"},{"location":"page-array/page-array-add/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Page, PageArray, int</p> <p>Page object, PageArray object, or Page ID.</p> <ul> <li>If given a <code>Page</code>, the Page will be added.</li> <li>If given a <code>PageArray</code>, it will do the same thing as the <code>WireArray::import()</code> method and append all the pages.</li> <li>If Page <code>ID</code>, the Page identified by that ID will be loaded and added to the PageArray.</li> </ul>"},{"location":"page-array/page-array-add/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"page-array/page-array-add/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If given an item that can't be stored by this WireArray.</li> </ul>"},{"location":"page-array/page-array-add/#see-also","title":"See Also","text":"<ul> <li>WireArray::prepend()</li> <li>WireArray::append()</li> </ul>"},{"location":"page-array/page-array-find-one-page/","title":"Page array find one page","text":""},{"location":"page-array/page-array-find-one-page/#same-as-find-or-findone-methods-but-always-returns-a-page-whether-page-or-nullpage","title":"Same as find() or findOne() methods, but always returns a Page (whether Page or NullPage)","text":"<p>Available since version 3.0.162.</p>"},{"location":"page-array/page-array-find-one-page/#usage","title":"Usage","text":"<pre><code>$page = $pageArray-&gt;findOnePage(string $selector);\n</code></pre>"},{"location":"page-array/page-array-find-one-page/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string</p>"},{"location":"page-array/page-array-find-one-page/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p>"},{"location":"page-array/page-array-get-page/","title":"Page array get page","text":""},{"location":"page-array/page-array-get-page/#like-the-base-get-method-but-can-only-return-page-objects-whether-page-or-nullpage","title":"Like the base get() method but can only return Page objects (whether Page or NullPage)","text":"<p>Available since version 3.0.162.</p>"},{"location":"page-array/page-array-get-page/#usage","title":"Usage","text":"<pre><code>$page = $pageArray-&gt;getPage($key);\n</code></pre>"},{"location":"page-array/page-array-get-page/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>int, string, array</p> <p>Provide any of the following:</p> <ul> <li>Key of Page to retrieve.</li> <li>A selector string or selector array, to return the first item that matches the selector.</li> <li>A string containing the \"name\" property of any Page, and the matching Page will be returned.</li> </ul>"},{"location":"page-array/page-array-get-page/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p>"},{"location":"page-array/page-array-get-page/#see-also","title":"See Also","text":"<ul> <li>WireArray::get()</li> </ul>"},{"location":"pagefile/pagefile-basename/","title":"Pagefile basename","text":""},{"location":"pagefile/pagefile-basename/#returns-the-basename-of-this-pagefile-name-and-extension-without-disk-path","title":"Returns the basename of this Pagefile (name and extension, without disk path).","text":""},{"location":"pagefile/pagefile-basename/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $pagefile-&gt;basename();\n\n// usage with all arguments\n$string = $pagefile-&gt;basename(bool $ext = true);\n</code></pre>"},{"location":"pagefile/pagefile-basename/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>ext</code> (optional)</p> <p>bool</p> <p>Specify false to exclude the extension (default=true)</p>"},{"location":"pagefile/pagefile-basename/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"pagefile/pagefile-construct/","title":"Pagefile construct","text":""},{"location":"pagefile/pagefile-construct/#represents-a-single-file-item-attached-to-a-page-typically-via-a-file-fieldtype","title":"Represents a single file item attached to a page, typically via a File Fieldtype.","text":"<p>Pagefile objects are contained by a <code>Pagefiles</code> object.</p>"},{"location":"pagefile/pagefile-description/","title":"Pagefile description","text":""},{"location":"pagefile/pagefile-description/#get-or-set-the-files-description-with-multi-language-support","title":"Get or set the file\u2019s description (with multi-language support).","text":"<p>When not in a multi-language environment, you can still use this method but we recommend using the simpler method of just getting/seting the <code>Pagefile::$description</code> property directly instead.</p>"},{"location":"pagefile/pagefile-description/#example","title":"Example","text":"<pre><code>// Get a Pagefile to work with\n$pagefile = $page-&gt;files-&gt;first();\n\n// Setting description\n$pagefile-&gt;description('en', 'Setting English description');\n$pagefile-&gt;description('de', 'Setting German description');\n\n// Getting description for current language (whatever it happens to be)\necho $pagefile-&gt;description();\n\n// Getting description for language \"de\"\necho $pagefile-&gt;description('de');\n</code></pre>"},{"location":"pagefile/pagefile-description/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $pagefile-&gt;description();\n\n// usage with all arguments\n$string = $pagefile-&gt;description($language = null, $value = null);\n</code></pre>"},{"location":"pagefile/pagefile-description/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>language</code> (optional)</p> <p><code>value</code> (optional)</p> <p>null, string</p> <p>Specify only when you are setting (single language) rather than getting a value.</p>"},{"location":"pagefile/pagefile-description/#return-value","title":"Return value","text":"<p><code>string</code> <code>array</code></p>"},{"location":"pagefile/pagefile-ext/","title":"Pagefile ext","text":""},{"location":"pagefile/pagefile-ext/#returns-the-files-extension-pdf-jpg-etc","title":"Returns the file\u2019s extension - \"pdf\", \"jpg\", etc.","text":""},{"location":"pagefile/pagefile-ext/#usage","title":"Usage","text":"<pre><code>$string = $pagefile-&gt;ext();\n</code></pre>"},{"location":"pagefile/pagefile-ext/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"pagefiles/pagefiles-clone/","title":"Pagefiles clone","text":""},{"location":"pagefiles/pagefiles-clone/#duplicate-the-pagefile-and-add-to-this-pagefiles-instance","title":"Duplicate the Pagefile and add to this Pagefiles instance","text":"<p>After duplicating a file, you must follow up with a save of the page containing it. Otherwise the file is marked for deletion.</p>"},{"location":"pagefiles/pagefiles-clone/#usage","title":"Usage","text":"<pre><code>// basic usage\n$pagefile = $pagefiles-&gt;clone(Pagefile $item);\n\n// usage with all arguments\n$pagefile = $pagefiles-&gt;clone(Pagefile $item, array $options = []);\n</code></pre>"},{"location":"pagefiles/pagefiles-clone/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Pagefile</p> <p>Pagefile item to duplicate</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify default behavior:</p> <ul> <li><code>action</code> (string): Specify \"append\", \"prepend\", \"after\", \"before\" or blank to only return Pagefile. (default=\"after\")</li> <li><code>pagefiles</code> (Pagefiles): Pagefiles instance file should be duplicated to. (default=$this)</li> </ul>"},{"location":"pagefiles/pagefiles-clone/#return-value","title":"Return value","text":"<p><code>Pagefile</code> <code>bool</code></p> <p>Returns new Pagefile or boolean false on fail</p>"},{"location":"pagefiles/pagefiles-formatted/","title":"Pagefiles formatted","text":""},{"location":"pagefiles/pagefiles-formatted/#get-or-set-formatted-state","title":"Get or set formatted state","text":""},{"location":"pagefiles/pagefiles-formatted/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $pagefiles-&gt;formatted();\n\n// usage with all arguments\n$bool = $pagefiles-&gt;formatted($set = null);\n</code></pre>"},{"location":"pagefiles/pagefiles-formatted/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>set</code> (optional)</p> <p>bool, null</p>"},{"location":"pagefiles/pagefiles-formatted/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"pagefiles/pagefiles-get-field/","title":"Pagefiles get field","text":""},{"location":"pagefiles/pagefiles-get-field/#get-the-field-these-files-are-assigned-to","title":"Get the field these files are assigned to","text":""},{"location":"pagefiles/pagefiles-get-field/#usage","title":"Usage","text":"<pre><code>$field = $pagefiles-&gt;getField();\n</code></pre>"},{"location":"pagefiles/pagefiles-get-field/#return-value","title":"Return value","text":"<p><code>Field</code> <code>null</code></p> <p>Returns Field, or null if Field has not yet been assigned.</p>"},{"location":"pagefiles/pagefiles-get-fields-page/","title":"Pagefiles get fields page","text":""},{"location":"pagefiles/pagefiles-get-fields-page/#get-mockplaceholder-page-object-used-for-pagefile-custom-fields","title":"Get mock/placeholder Page object used for Pagefile custom fields","text":"<p>Available since version 3.0.142.</p>"},{"location":"pagefiles/pagefiles-get-fields-page/#usage","title":"Usage","text":"<pre><code>$page = $pagefiles-&gt;getFieldsPage();\n</code></pre>"},{"location":"pagefiles/pagefiles-get-fields-page/#return-value","title":"Return value","text":"<p><code>Page</code></p>"},{"location":"pagefiles/pagefiles-get-file/","title":"Pagefiles get file","text":""},{"location":"pagefiles/pagefiles-get-file/#get-the-pagefile-having-the-given-basename-or-null-if-not-found","title":"Get the Pagefile having the given basename, or null if not found.","text":""},{"location":"pagefiles/pagefiles-get-file/#usage","title":"Usage","text":"<pre><code>$pagefile = $pagefiles-&gt;getFile(string $name);\n</code></pre>"},{"location":"pagefiles/pagefiles-get-file/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p>"},{"location":"pagefiles/pagefiles-get-file/#return-value","title":"Return value","text":"<p><code>null</code> <code>Pagefile</code></p>"},{"location":"pagefiles/pagefiles-get-page/","title":"Pagefiles get page","text":""},{"location":"pagefiles/pagefiles-get-page/#get-the-page-these-files-are-assigned-to","title":"Get the page these files are assigned to","text":""},{"location":"pagefiles/pagefiles-get-page/#usage","title":"Usage","text":"<pre><code>$page = $pagefiles-&gt;getPage();\n</code></pre>"},{"location":"pagefiles/pagefiles-get-page/#return-value","title":"Return value","text":"<p><code>Page</code></p>"},{"location":"pagefiles-manager/pagefiles-manager-get-file/","title":"Pagefiles manager get file","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-file/#get-the-pagefile-object-containing-the-given-filename","title":"Get the Pagefile object containing the given filename.","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-file/#usage","title":"Usage","text":"<pre><code>$pagefile = $pagefilesManager-&gt;getFile(string $name);\n</code></pre>"},{"location":"pagefiles-manager/pagefiles-manager-get-file/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of file to get:</p> <ul> <li>If given a URL or path, this will traverse to other pages.</li> <li>If given a basename, it will stay with current page.</li> </ul>"},{"location":"pagefiles-manager/pagefiles-manager-get-file/#return-value","title":"Return value","text":"<p><code>Pagefile</code> <code>Pageimage</code> <code>null</code></p> <p>Returns Pagefile or Pageimage object if found, or null if not.</p>"},{"location":"pagefiles-manager/pagefiles-manager-get-files/","title":"Pagefiles manager get files","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-files/#get-an-array-of-all-published-filenames-on-the-current-page","title":"Get an array of all published filenames on the current Page.","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-files/#usage","title":"Usage","text":"<pre><code>$array = $pagefilesManager-&gt;getFiles();\n</code></pre>"},{"location":"pagefiles-manager/pagefiles-manager-get-files/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Array of file basenames</p>"},{"location":"pagefiles-manager/pagefiles-manager-get-temp-path/","title":"Pagefiles manager get temp path","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-temp-path/#return-a-path-where-temporary-files-can-be-stored-unique-to-this-processwire-instance","title":"Return a path where temporary files can be stored unique to this ProcessWire instance","text":""},{"location":"pagefiles-manager/pagefiles-manager-get-temp-path/#usage","title":"Usage","text":"<pre><code>$string = $pagefilesManager-&gt;getTempPath();\n</code></pre>"},{"location":"pagefiles-manager/pagefiles-manager-get-temp-path/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"pageimage/pageimage-construct/","title":"Pageimage construct","text":""},{"location":"pageimage/pageimage-construct/#represents-an-image-item-attached-to-a-page-typically-via-an-image-fieldtype","title":"Represents an image item attached to a page, typically via an Image Fieldtype.","text":"<p>Pageimage objects are usually contained by a <code>Pageimages</code> object, which is a type of <code>Pagefiles</code> and <code>WireArray</code>. In addition to the methods and properties below, you'll also want to look at <code>Pagefile</code> which this class inherits several important methods and properties from.</p> <pre><code>// Example of outputting a thumbnail gallery of Pageimage objects\nforeach($page-&gt;images as $image) {\n  // $image and $thumb are both Pageimage objects\n  $thumb = $image-&gt;size(200, 200);\n  echo \"&lt;a href='$image-&gt;url'&gt;\";\n  echo \"&lt;img src='$thumb-&gt;url' alt='$image-&gt;description' /&gt;\";\n  echo \"&lt;/a&gt;\";\n}\n</code></pre>"},{"location":"pageimage/pageimage-filename/","title":"Pageimage filename","text":""},{"location":"pageimage/pageimage-filename/#returns-the-full-disk-path-to-the-image-file","title":"Returns the full disk path to the image file","text":""},{"location":"pageimage/pageimage-filename/#usage","title":"Usage","text":"<pre><code>$string = $pageimage-&gt;filename();\n</code></pre>"},{"location":"pageimage/pageimage-filename/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"pageimage/pageimage-get-debug-info/","title":"Pageimage get debug info","text":""},{"location":"pageimage/pageimage-get-debug-info/#verbose-debug-info-via","title":"Verbose debug info (via","text":"<p>Available since version 3.0.132.</p>"},{"location":"pageimage/pageimage-get-debug-info/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $pageimage-&gt;getDebugInfo();\n\n// usage with all arguments\n$array = $pageimage-&gt;getDebugInfo(array $options = [], string $returnType = 'string');\n</code></pre>"},{"location":"pageimage/pageimage-get-debug-info/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array</p> <p>The individual options you also passes with your image variation creation</p> <p><code>returnType</code> (optional)</p> <p>string</p> <p>'string'|'array'|'object', default is 'string' and returns markup or plain text</p>"},{"location":"pageimage/pageimage-get-debug-info/#return-value","title":"Return value","text":"<p><code>array</code> <code>object</code> <code>string</code></p>"},{"location":"pageimage/pageimage-height/","title":"Pageimage height","text":""},{"location":"pageimage/pageimage-height/#return-the-height-of-this-image-or-return-an-image-sized-with-a-given-height-and-proportional-width","title":"Return the height of this image OR return an image sized with a given height (and proportional width).","text":"<ul> <li>If given a height, it'll return a new Pageimage object sized to that height.</li> <li>If not given a height, it'll return the height of this Pageimage.</li> </ul>"},{"location":"pageimage/pageimage-height/#example","title":"Example","text":"<pre><code>// Get height of image\n$px = $image-&gt;height();\n\n// Create a new variation at 200px height\n$thumb = $image-&gt;height(200);\n</code></pre>"},{"location":"pageimage/pageimage-height/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $pageimage-&gt;height();\n\n// usage with all arguments\n$int = $pageimage-&gt;height(int $n = 0, $options = []);\n</code></pre>"},{"location":"pageimage/pageimage-height/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>n</code> (optional)</p> <p>int</p> <p>Optional height if you are creating a new size.</p> <p><code>options</code> (optional)</p> <p>array, string, int, bool</p> <p>See <code>Pageimage::size()</code> $options argument for details.</p>"},{"location":"pageimage/pageimage-height/#return-value","title":"Return value","text":"<p><code>int</code> <code>Pageimage</code></p> <p>Returns height (in px) when given no arguments, or Pageimage when given a height argument.</p>"},{"location":"pageimages/pageimages-add/","title":"Pageimages add","text":""},{"location":"pageimages/pageimages-add/#add-a-new-pageimage-item-or-create-one-from-given-filename-and-add-it","title":"Add a new Pageimage item, or create one from given filename and add it.","text":"<p>If give a filename (string) it will create the new <code>Pagefile</code> item from it and add it.</p>"},{"location":"pageimages/pageimages-add/#example","title":"Example","text":"<pre><code>$items-&gt;add($item);\n</code></pre>"},{"location":"pageimages/pageimages-add/#usage","title":"Usage","text":"<pre><code>$pageimages = $pageimages-&gt;add($item);\n</code></pre>"},{"location":"pageimages/pageimages-add/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Pageimage, string</p> <p>If item is a string (filename) then the Pageimage instance will be created automatically.</p>"},{"location":"pageimages/pageimages-add/#return-value","title":"Return value","text":"<p><code>Pageimages</code> <code>Pagefiles</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"pageimages/pageimages-add/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If given an item that can't be stored by this WireArray.</li> </ul>"},{"location":"pageimages/pageimages-add/#see-also","title":"See Also","text":"<ul> <li>WireArray::prepend()</li> <li>WireArray::append()</li> </ul>"},{"location":"pageimages/pageimages-get-all-variations/","title":"Pageimages get all variations","text":""},{"location":"pageimages/pageimages-get-all-variations/#get-an-array-of-all-image-variations-on-this-field-indexed-by-original-file-name","title":"Get an array of all image variations on this field indexed by original file name.","text":"<p>More information on any variation filename can be retrieved from <code>Pageimage::isVariation()</code>.</p>"},{"location":"pageimages/pageimages-get-all-variations/#example","title":"Example","text":"<pre><code>$variations = $page-&gt;images-&gt;getAllVariations();\nprint_r($variations);\n// Example output:\n// array(\n//   'foo.jpg' =&gt; array(\n//      'foo.100x100.jpg',\n//      'foo.200x200.jpg'\n//   ),\n//   'bar.jpg' =&gt; array(\n//      'bar.300x300.jpg'\n//   )\n// );\n</code></pre>"},{"location":"pageimages/pageimages-get-all-variations/#usage","title":"Usage","text":"<pre><code>$array = $pageimages-&gt;getAllVariations();\n</code></pre>"},{"location":"pageimages/pageimages-get-all-variations/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Array indexed by file name, each containing array of variation file names</p>"},{"location":"pageimages/pageimages-get-all-variations/#see-also","title":"See Also","text":"<ul> <li>Pageimage::isVariation()</li> </ul>"},{"location":"pageimages/pageimages-get-file/","title":"Pageimages get file","text":""},{"location":"pageimages/pageimages-get-file/#does-this-field-have-the-given-file-name-if-so-return-it-if-not-return-null","title":"Does this field have the given file name? If so, return it, if not return null.","text":""},{"location":"pageimages/pageimages-get-file/#usage","title":"Usage","text":"<pre><code>$pagefile = $pageimages-&gt;getFile(string $name);\n</code></pre>"},{"location":"pageimages/pageimages-get-file/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Basename is assumed</p>"},{"location":"pageimages/pageimages-get-file/#return-value","title":"Return value","text":"<p><code>null</code> <code>Pagefile</code> <code>Pageimage</code></p> <p>Returns Pagefile object if found, null if not</p>"},{"location":"pageimages/pageimages-render/","title":"Pageimages render","text":""},{"location":"pageimages/pageimages-render/#render-markup-for-all-images-here-optionally-using-a-provided-markup-template-string-andor-image-size-options","title":"Render markup for all images here (optionally using a provided markup template string and/or image size options)","text":"<p>Given template string can contain any of the placeholders, which will be replaced:</p> <ul> <li><code>{url}</code> or <code>{src}</code> Image URL (typically used for src attribute)</li> <li><code>{httpUrl}</code> File URL with scheme and hostname (alternate for src attribute)</li> <li><code>{URL}</code> Same as url but with cache busting query string</li> <li><code>{HTTPURL}</code> Same as httpUrl but with cache busting query string</li> <li><code>{description}</code> or <code>{alt}</code> Image description (typically used in alt attribute)</li> <li><code>{tags}</code> File tags (might be useful in class attribute)</li> <li><code>{width}</code> Width of image</li> <li><code>{height}</code> Height of image</li> <li><code>{hidpiWidth}</code> HiDPI width of image</li> <li><code>{hidpiHeight}</code> HiDPI height of image</li> <li><code>{ext}</code> File extension</li> <li><code>{original.name}</code> Replace \u201cname\u201d\u00a0with any of the properties above to refer to original/full-size image. If there is no original image then these just refer back to the current image.</li> </ul> <p>Available since version 3.0.126.</p>"},{"location":"pageimages/pageimages-render/#example","title":"Example","text":"<pre><code>// default output\necho $page-&gt;images-&gt;render();\n\n// custom output\necho $page-&gt;images-&gt;render(\"&lt;img class='pw-image' src='{url}' alt='{alt}'&gt;\");\n\n// custom output with options\necho $page-&gt;images-&gt;render(\"&lt;img src='{url}' alt='{alt}'&gt;\", [ 'width' =&gt; 300 ]);\n\n// options can go in first argument if you prefer\necho $page-&gt;images-&gt;render([ 'width' =&gt; 300, 'height' =&gt; 200 ]);\n\n// if only width/height are needed, they can also be specified as a string (1st or 2nd arg)\necho $page-&gt;images-&gt;render('300x200');\n\n// custom output with link to original/full-size and square crop of 300x300 for thumbnails\necho \"&lt;ul&gt;\" . $page-&gt;images-&gt;render([\n  'markup' =&gt; \"&lt;li&gt;&lt;a href='{original.url}'&gt;&lt;img src='{url}' alt='{alt}'&gt;&lt;/a&gt;&lt;/li&gt;\",\n  'width' =&gt; 300,\n  'height' =&gt; 300\n]) . \"&lt;/ul&gt;\";\n</code></pre>"},{"location":"pageimages/pageimages-render/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $pageimages-&gt;render();\n\n// usage with all arguments\n$string = $pageimages-&gt;render($markup = '', $options = []);\n</code></pre>"},{"location":"pageimages/pageimages-render/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>markup</code> (optional)</p> <p>string, array</p> <p>Markup template string or optional $options array if you do not want the template string here.</p> <p><code>options</code> (optional)</p> <p>array, string</p> <p>Optionally resize image with these options sent to size() method:</p> <ul> <li><code>width</code> (int): Target width or 0 for current image size (or proportional if height specified).</li> <li><code>height</code> (int): Target height or 0 for current image size (or proportional if width specified).</li> <li><code>markup</code> (string): Markup template string (same as $markup argument), or omit for default (same as $markup argument).</li> <li><code>link</code> (bool): Link image to original size? Though you may prefer to do this with your own $markup (see examples). (default=false)</li> <li><code>limit</code> (int): Render no more than this many images (default=0, no limit).</li> <li>Plus any option available to the $options argument on the <code>Pageimage::size()</code> method.</li> <li>If you only need width and/or height, you can specify a width x height string, i.e. 123x456 (use 0 for proportional).</li> </ul>"},{"location":"pageimages/pageimages-render/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"pages/pages-count/","title":"Pages count","text":""},{"location":"pages/pages-count/#count-and-return-how-many-pages-will-match-the-given-selector","title":"Count and return how many pages will match the given selector.","text":"<p>If no selector provided, it returns count of all pages in site.</p>"},{"location":"pages/pages-count/#example","title":"Example","text":"<pre><code>// Return count of how may pages in the site use the blog-post template\n$numBlogPosts = $pages-&gt;count(\"template=blog-post\");\n</code></pre>"},{"location":"pages/pages-count/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $pages-&gt;count();\n\n// usage with all arguments\n$int = $pages-&gt;count($selector = '', $options = []);\n</code></pre>"},{"location":"pages/pages-count/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code> (optional)</p> <p>string, array, Selectors</p> <p>Specify selector, or omit to retrieve a site-wide count.</p> <p><code>options</code> (optional)</p> <p>array, string</p> <p>See $options for $pages-&gt;find().</p>"},{"location":"pages/pages-count/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"pages/pages-count/#see-also","title":"See Also","text":"<ul> <li>Pages::find()</li> </ul>"},{"location":"pages/pages-find-i-ds/","title":"Pages find i ds","text":""},{"location":"pages/pages-find-i-ds/#like-find-except-returns-array-of-ids-rather-than-page-objects","title":"Like find() except returns array of IDs rather than Page objects","text":"<ul> <li>This is a faster method to use when you only need to know the matching page IDs.</li> <li>The default behavior is to simply return a regular PHP array of matching page IDs in order.</li> <li>The alternate behavior (verbose) returns more information for each match, as outlined below.</li> </ul> <p>Verbose option: When specifying boolean true for the <code>$options</code> argument (or using the <code>verbose</code> option), the return value is an array of associative arrays, with each of those associative arrays containing <code>id</code>, <code>parent_id</code> and <code>templates_id</code> keys for each page.</p> <p>Available since version 3.0.46.</p>"},{"location":"pages/pages-find-i-ds/#example","title":"Example","text":"<pre><code>// returns array of page IDs (integers) like [ 1234, 1235, 1236 ]\n$a = $pages-&gt;findIDs(\"foo=bar\");\n\n// verbose option: returns array of associative arrays, each with id, parent_id and templates_id\n$a = $pages-&gt;findIDs(\"foo=bar\", true);\n</code></pre>"},{"location":"pages/pages-find-i-ds/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $pages-&gt;findIDs($selector);\n\n// usage with all arguments\n$array = $pages-&gt;findIDs($selector, $options = []);\n</code></pre>"},{"location":"pages/pages-find-i-ds/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, array, Selectors</p> <p>Selector to find page IDs.</p> <p><code>options</code> (optional)</p> <p>array, bool, int, string</p> <p>Options to modify behavior.</p> <ul> <li><code>verbose</code> (bool|int|string): Specify true to make return value array of associative arrays, each with id, parent_id, templates_id. Specify integer <code>2</code> or string <code>*</code> to return verbose array of associative arrays, each with all columns from pages table.</li> <li><code>indexed</code> (bool): Index by page ID? (default=false) Added 3.0.172</li> <li>The verbose option above can also be specified as alternative to the $options argument.</li> <li>See <code>Pages::find()</code> $options argument for additional options.</li> </ul>"},{"location":"pages/pages-find-i-ds/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Array of page IDs, or in verbose mode: array of arrays, each with id, parent_id and templates_id keys.</p>"},{"location":"pages/pages-find-join/","title":"Pages find join","text":""},{"location":"pages/pages-find-join/#find-pages-and-specify-which-fields-to-join-overriding-configured-autojoin-settings","title":"Find pages and specify which fields to join (overriding configured autojoin settings)","text":"<p>This is a useful optimization when you know exactly which fields you will be using from the returned pages and you want to have their values joined into the page loading query to reduce overhead. Note that this overrides the configured autojoin settings in ProcessWire fields.</p> <p>If a particular page in the returned set of pages was already loaded before this method call, then the one already in memory will be used rather than this method loading another copy of it.</p> <p>Available since version 3.0.172.</p>"},{"location":"pages/pages-find-join/#example","title":"Example","text":"<pre><code>// 1. Example of loading blog posts where we want to join title, date, summary:\n$posts = $pages-&gt;findJoin(\"template=blog-post\", [ 'title', 'date', 'summary' ]);\n\n// 2. You can also specify the join fields as a CSV string:\n$posts = $pages-&gt;findJoin(\"template=blog-post\", 'title, date, summary');\n\n// 3. You can also use the join functionality on a regular $pages-&gt;find() by specifying\n// property 'join' or 'field' in the selector. The words 'join' and 'field' are aliases\n// of each other here, just in case you have an existing field with one of those names.\n// Otherwise, use whichever makes more sense to you. The following examples demonstrate\n// this and all do exactly the same thing as examples 1 and 2 above:\n$posts = $pages-&gt;find(\"template=blog-post, join=title|date|summary\");\n$posts = $pages-&gt;find(\"template=blog-post, field=title|date|summary\");\n$posts = $pages-&gt;find(\"template=blog-post, join=title, join=date, join=summary\");\n$posts = $pages-&gt;find(\"template=blog-post, field=title, field=date, field=summary\");\n\n// 4. Let\u2019s say you want to load pages with NO autojoin fields, here is how.\n// The following loads all blog-post pages and prevents ANY fields from being joined,\n// even if they are configured to be autojoin in ProcessWire:\n$posts = $pages-&gt;findJoin(\"template=blog-post\", false);\n$posts = $pages-&gt;find(\"template=blog-post, join=none\"); // same as above\n</code></pre>"},{"location":"pages/pages-find-join/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $pages-&gt;findJoin($selector, $joinFields);\n\n// usage with all arguments\n$items = $pages-&gt;findJoin($selector, $joinFields, array $options = []);\n</code></pre>"},{"location":"pages/pages-find-join/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, array, Selectors</p> <p><code>joinFields</code></p> <p>array, string, bool</p> <p>Array or CSV string of field names to autojoin, or false to join none.</p> <p><code>options</code> (optional)</p> <p>array</p>"},{"location":"pages/pages-find-join/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"pages/pages-find-many/","title":"Pages find many","text":""},{"location":"pages/pages-find-many/#like-find-but-with-lazy-loading-to-support-giant-result-sets-without-running-out-of-memory","title":"Like find(), but with \u201clazy loading\u201d to support giant result sets without running out of memory.","text":"<p>When using this method, you can retrieve tens of thousands, or hundreds of thousands of pages or more, without needing a pagination \"limit\" in your selector. Individual pages are loaded and unloaded in chunks as you iterate them, making it possible to iterate all pages without running out of memory. This is useful for performing some kind of calculation on all pages or other tasks like that. Note however that if you are building something from the result set that consumes more memory for each page iterated (like concatening a string of page titles or something), then you could still run out of memory there.</p> <p>The example below demonstrates use of this method. Note that attempting to do the same using the regular <code>$pages-&gt;find()</code> would run out of memory, as it's unlikely the server would have enough memory to store 20k pages in memory at once.</p> <p>Available since version 3.0.19.</p>"},{"location":"pages/pages-find-many/#example","title":"Example","text":"<pre><code>// Calculating a total from 20000 pages\n$totalCost = 0;\n$items = $pages-&gt;findMany(\"template=foo\"); // 20000 pages\nforeach($items as $item) {\n  $totalCost += $item-&gt;cost;\n}\necho \"Total cost is: $totalCost\";\n</code></pre>"},{"location":"pages/pages-find-many/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $pages-&gt;findMany($selector);\n\n// usage with all arguments\n$items = $pages-&gt;findMany($selector, array $options = []);\n</code></pre>"},{"location":"pages/pages-find-many/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, array, Selectors</p> <p>Selector to find pages</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify behavior. See <code>Pages::find()</code> $options argument for details.</p>"},{"location":"pages/pages-find-many/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"pages/pages-find-many/#see-also","title":"See Also","text":"<ul> <li>Pages::find()</li> <li>Pages::findOne()</li> </ul>"},{"location":"pages/pages-find/","title":"Pages find","text":""},{"location":"pages/pages-find/#given-a-selector-string-return-the-page-objects-that-match-in-a-pagearray","title":"Given a Selector string, return the Page objects that match in a PageArray.","text":"<ul> <li>This is one of the most commonly used API methods in ProcessWire.</li> <li>If you only need to find one page, use the <code>Pages::get()</code> or <code>Pages::findOne()</code> method instead (and note the difference).</li> <li>If you need to find a huge quantity of pages (like thousands) without limit or pagination, look at the <code>Pages::findMany()</code> method.</li> </ul>"},{"location":"pages/pages-find/#example","title":"Example","text":"<pre><code>// Find all pages using template \"building\" with 25 or more floors\n$skyscrapers = $pages-&gt;find(\"template=building, floors&gt;=25\");\n</code></pre>"},{"location":"pages/pages-find/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $pages-&gt;find($selector);\n\n// usage with all arguments\n$items = $pages-&gt;find($selector, $options = []);\n</code></pre>"},{"location":"pages/pages-find/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selector</code></p> <p>string, int, array, Selectors</p> <p>Specify selector (standard usage), but can also accept page ID or array of page IDs.</p> <p><code>options</code> (optional)</p> <p>array, string</p> <p>One or more options that can modify certain behaviors. May be associative array or \"key=value\" selector string.</p> <ul> <li><code>findOne</code> (bool): Apply optimizations for finding a single page (default=false).</li> <li><code>findAll</code> (bool): Find all pages with no exclusions, same as \"include=all\" option (default=false).</li> <li><code>findIDs</code> (bool|int): 1 to get array of page IDs, true to return verbose array, 2 to return verbose array with all cols in 3.0.153+. (default=false).</li> <li><code>getTotal</code> (bool): Whether to set returning PageArray's \"total\" property (default=true, except when findOne=true).</li> <li><code>loadPages</code> (bool): Whether to populate the returned PageArray with found pages (default=true). The only reason why you'd want to change this to false would be if you only needed the count details from the PageArray: getTotal(), getStart(), getLimit, etc. This is intended as an optimization for $pages-&gt;count(). Does not apply if $selector argument is an array.</li> <li><code>cache</code> (bool): Allow caching of selectors and loaded pages? (default=true). Also sets loadOptions[cache].</li> <li><code>allowCustom</code> (boolean): Allow use of _custom=\"another selector\" in given $selector? For specific uses. (default=false)</li> <li><code>caller</code> (string): Optional name of calling function, for debugging purposes, i.e. \"pages.count\" (default=blank).</li> <li><code>include</code> (string): Optional inclusion mode of 'hidden', 'unpublished' or 'all'. (default=none). Typically you would specify this directly in the selector string, so the option is mainly useful if your first argument is not a string.</li> <li><code>stopBeforeID</code> (int): Stop loading pages once page matching this ID is found (default=0).</li> <li><code>startAfterID</code> (int): Start loading pages once page matching this ID is found (default=0).</li> <li><code>lazy</code> (bool): Specify true to force lazy loading. This is the same as using the Pages::findMany() method (default=false).</li> <li><code>loadOptions</code> (array): Optional associative array of options to pass to getById() load options.</li> </ul>"},{"location":"pages/pages-find/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>array</code></p> <p>PageArray of that matched the given selector, or array of page IDs (if using findIDs option).</p> <p>Non-visible pages are excluded unless an \"include=x\" mode is specified in the selector (where \"x\" is \"hidden\", \"unpublished\" or \"all\"). If \"all\" is specified, then non-accessible pages (via access control) can also be included.</p>"},{"location":"pages-type/pages-type-add/","title":"Pages type add","text":""},{"location":"pages-type/pages-type-add/#adds-a-new-page-with-the-given-name-and-returns-it","title":"Adds a new page with the given $name and returns it","text":"<ul> <li>If the page has any other fields, they will not be populated, only the name will.</li> <li>Returns a <code>NullPage</code> on error, such as when a page of this type already exists with the same name/parent.</li> </ul> <p>Hook note: If you want to hook this method, please hook the <code>addReady</code>, <code>Pages::add</code>, or <code>Pages::addReady</code> method instead, as hooking this method will not hook relevant pages added directly through $pages-&gt;add().</p>"},{"location":"pages-type/pages-type-add/#usage","title":"Usage","text":"<pre><code>$page = $pagesType-&gt;add(string $name);\n</code></pre>"},{"location":"pages-type/pages-type-add/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name to use for the new page</p>"},{"location":"pages-type/pages-type-add/#return-value","title":"Return value","text":"<p><code>Page</code> <code>NullPage</code></p>"},{"location":"pages-type/pages-type-construct/","title":"Pages type construct","text":""},{"location":"pages-type/pages-type-construct/#provides-an-interface-to-the-pages-class-but-specific-to-a-given-page-classtype-with-predefined-parent-and-template","title":"Provides an interface to the Pages class but specific to a given page class/type, with predefined parent and template.","text":"<p>This class is primarily used by the core as an alternative to <code>$pages</code>, providing an API for other Page types like <code>User</code>, <code>Role</code>, <code>Permission</code>, and <code>Language</code>. The <code>$users</code>, <code>$roles</code>, <code>$permissions</code> and <code>$languages</code> API variables are all instances of <code>PagesType</code>. This class is typically not instantiated on its own and instead acts as a base class which is extended.</p>"},{"location":"pages-type/pages-type-count/","title":"Pages type count","text":""},{"location":"pages-type/pages-type-count/#return-the-number-of-pages-in-this-type-matching-the-given-selector-string","title":"Return the number of pages in this type matching the given selector string","text":""},{"location":"pages-type/pages-type-count/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $pagesType-&gt;count();\n\n// usage with all arguments\n$int = $pagesType-&gt;count(string $selectorString = '', array $options = []);\n</code></pre>"},{"location":"pages-type/pages-type-count/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selectorString</code> (optional)</p> <p>string</p> <p>Optional, if omitted then returns count of all pages of this type</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify default behavior (see $pages-&gt;count method for details)</p>"},{"location":"pages-type/pages-type-count/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"pages-type/pages-type-count/#see-also","title":"See Also","text":"<ul> <li>Pages::count()</li> </ul>"},{"location":"pages-type/pages-type-delete/","title":"Pages type delete","text":""},{"location":"pages-type/pages-type-delete/#permanently-delete-a-page-and-its-fields","title":"Permanently delete a page and its fields.","text":"<p>Unlike <code>$pages-&gt;trash()</code>, pages deleted here are not restorable.</p> <p>If you attempt to delete a page with children, and don\u2019t specifically set the <code>$recursive</code> argument to <code>true</code>, then this method will throw an exception. If a recursive delete fails for any reason, an exception will be thrown.</p> <p>Hook note: If you want to hook this method, please hook the <code>deleteReady</code>, <code>deleted</code>, or <code>Pages::delete</code> method instead, as hooking this method will not hook relevant pages deleted directly through $pages-&gt;delete().</p>"},{"location":"pages-type/pages-type-delete/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $pagesType-&gt;delete(Page $page);\n\n// usage with all arguments\n$bool = $pagesType-&gt;delete(Page $page, bool $recursive = false);\n</code></pre>"},{"location":"pages-type/pages-type-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p><code>recursive</code> (optional)</p> <p>bool</p> <p>If set to true, then this will attempt to delete all children too.</p>"},{"location":"pages-type/pages-type-delete/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"pages-type/pages-type-delete/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"pages-type/pages-type-find/","title":"Pages type find","text":""},{"location":"pages-type/pages-type-find/#given-a-selector-string-return-the-page-objects-that-match-in-a-pagearray","title":"Given a Selector string, return the Page objects that match in a PageArray.","text":""},{"location":"pages-type/pages-type-find/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $pagesType-&gt;find(string $selectorString);\n\n// usage with all arguments\n$items = $pagesType-&gt;find(string $selectorString, array $options = []);\n</code></pre>"},{"location":"pages-type/pages-type-find/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selectorString</code></p> <p>string</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify default behavior:</p> <ul> <li><code>findOne</code> (bool): apply optimizations for finding a single page and include pages with 'hidden' status</li> </ul>"},{"location":"pages-type/pages-type-find/#return-value","title":"Return value","text":"<p><code>PageArray</code></p>"},{"location":"pages-type/pages-type-find/#see-also","title":"See Also","text":"<ul> <li>Pages::find()</li> </ul>"},{"location":"paginated-array/paginated-array-get-limit/","title":"Paginated array get limit","text":""},{"location":"paginated-array/paginated-array-get-limit/#get-the-limit-that-was-used-in-pagination","title":"Get the limit that was used in pagination.","text":"<p>If no limit was set, then it returns the number of items currently in this WireArray.</p>"},{"location":"paginated-array/paginated-array-get-limit/#usage","title":"Usage","text":"<pre><code>$int = $paginatedArray-&gt;getLimit();\n</code></pre>"},{"location":"paginated-array/paginated-array-get-limit/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"paginated-array/paginated-array-get-start/","title":"Paginated array get start","text":""},{"location":"paginated-array/paginated-array-get-start/#get-the-starting-offset-number-that-was-used-for-pagination","title":"Get the starting offset number that was used for pagination.","text":""},{"location":"paginated-array/paginated-array-get-start/#usage","title":"Usage","text":"<pre><code>$int = $paginatedArray-&gt;getStart();\n</code></pre>"},{"location":"paginated-array/paginated-array-get-start/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"paginated-array/paginated-array-get-total/","title":"Paginated array get total","text":""},{"location":"paginated-array/paginated-array-get-total/#get-the-total-number-of-items-in-the-wirearray-including-all-paginations","title":"Get the total number of items in the WireArray, including all paginations.","text":"<p>If no limit is used, this returns total number of items currently in the WireArray, which would be the same as the <code>WireArray::count()</code> value. But when a limit is used, this number will typically be larger than the count, as it includes all items across all paginations, whether currently present or not.</p>"},{"location":"paginated-array/paginated-array-get-total/#usage","title":"Usage","text":"<pre><code>$int = $paginatedArray-&gt;getTotal();\n</code></pre>"},{"location":"paginated-array/paginated-array-get-total/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Total number of items across all paginations.</p>"},{"location":"paginated-array/paginated-array-set-limit/","title":"Paginated array set limit","text":""},{"location":"paginated-array/paginated-array-set-limit/#set-the-limit-that-was-used-in-pagination","title":"Set the limit that was used in pagination.","text":""},{"location":"paginated-array/paginated-array-set-limit/#usage","title":"Usage","text":"<pre><code>$paginatedArray-&gt;setLimit(int $numLimit);\n</code></pre>"},{"location":"paginated-array/paginated-array-set-limit/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>numLimit</code></p> <p>int</p>"},{"location":"paginated-array/paginated-array-set-limit/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"paginated-array/paginated-array-set-start/","title":"Paginated array set start","text":""},{"location":"paginated-array/paginated-array-set-start/#set-the-starting-offset-number-to-use-for-pagination","title":"Set the starting offset number to use for pagination.","text":"<p>This is typically the current page number (minus 1) multiplied by limit setting.</p>"},{"location":"paginated-array/paginated-array-set-start/#usage","title":"Usage","text":"<pre><code>$paginatedArray-&gt;setStart(int $numStart);\n</code></pre>"},{"location":"paginated-array/paginated-array-set-start/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>numStart</code></p> <p>int</p>"},{"location":"paginated-array/paginated-array-set-start/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"paginated-array/paginated-array-set-total/","title":"Paginated array set total","text":""},{"location":"paginated-array/paginated-array-set-total/#set-the-total-number-of-items-if-more-than-are-in-the-wirearray","title":"Set the total number of items, if more than are in the WireArray.","text":""},{"location":"paginated-array/paginated-array-set-total/#usage","title":"Usage","text":"<pre><code>$paginatedArray-&gt;setTotal(int $total);\n</code></pre>"},{"location":"paginated-array/paginated-array-set-total/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>total</code></p> <p>int</p>"},{"location":"paginated-array/paginated-array-set-total/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"paths/paths-get/","title":"Paths get","text":""},{"location":"paths/paths-get/#return-the-requested-path-or-url-functionally-the-same-as-direct-access","title":"Return the requested path or URL (functionally the same as direct access)","text":"<ul> <li>If the given $key is an object, it will cast it to a string.</li> <li>If the given $key is a string with \"|\" pipe characters in it, it will try all till it finds a non-empty value.</li> <li>If given an API variable name, it will return that API variable unless the class has direct access API variables disabled.</li> </ul>"},{"location":"paths/paths-get/#example","title":"Example","text":"<pre><code>// Retrieve the value of a property\n$value = $item-&gt;get(\"some_property\");\n\n// Retrieve the value of the first non-empty property:\n$value = $item-&gt;get(\"property1|property2|property2\");\n\n// Retrieve a value using array access\n$value = $item[\"some_property\"];\n</code></pre>"},{"location":"paths/paths-get/#usage","title":"Usage","text":"<pre><code>$mixed = $urls-&gt;get($key);\n</code></pre>"},{"location":"paths/paths-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>object, string</p> <p>Name of property you want to retrieve.</p>"},{"location":"paths/paths-get/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>null</code> <code>string</code></p> <p>The requested path variable</p>"},{"location":"paths/paths-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"paths/paths-set/","title":"Paths set","text":""},{"location":"paths/paths-set/#set-a-new-pathurl-location","title":"Set a new path/URL location","text":""},{"location":"paths/paths-set/#example","title":"Example","text":"<pre><code>// Set a value for a property\n$item-&gt;set('foo', 'bar');\n\n// Set a property value directly\n$item-&gt;foo = 'bar';\n\n// Set a property using array access\n$item['foo'] = 'bar';\n</code></pre>"},{"location":"paths/paths-set/#usage","title":"Usage","text":"<pre><code>$paths = $urls-&gt;set(string $key, mixed $value);\n</code></pre>"},{"location":"paths/paths-set/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property you want to set</p> <p><code>value</code></p> <p>mixed</p> <p>If the first character of the provided path is a slash, then that specific path will be used without modification. If the first character is anything other than a slash, then the 'root' variable will be prepended to the path.</p>"},{"location":"paths/paths-set/#return-value","title":"Return value","text":"<p><code>Paths</code> <code>WireData</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"paths/paths-set/#see-also","title":"See Also","text":"<ul> <li>WireData::setQuietly()</li> <li>WireData::get()</li> </ul>"},{"location":"permission/permission-wired/","title":"Permission wired","text":""},{"location":"permission/permission-wired/#wired-to-api","title":"Wired to API","text":""},{"location":"permission/permission-wired/#usage","title":"Usage","text":"<pre><code>$permission-&gt;wired();\n</code></pre>"},{"location":"permissions/permissions-add/","title":"Permissions add","text":""},{"location":"permissions/permissions-add/#add-a-new-permission-with-the-given-name-and-return-it","title":"Add a new Permission with the given name and return it","text":"<ul> <li>If the page has any other fields, they will not be populated, only the name will.</li> <li>Returns a <code>NullPage</code> on error, such as when a page of this type already exists with the same name/parent.</li> </ul> <p>Hook note: If you want to hook this method, please hook the <code>addReady</code>, <code>Pages::add</code>, or <code>Pages::addReady</code> method instead, as hooking this method will not hook relevant pages added directly through $pages-&gt;add().</p>"},{"location":"permissions/permissions-add/#usage","title":"Usage","text":"<pre><code>$permission = $permissions-&gt;add(string $name);\n</code></pre>"},{"location":"permissions/permissions-add/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of permission you want to add, i.e. \"hello-world\"</p>"},{"location":"permissions/permissions-add/#return-value","title":"Return value","text":"<p><code>Permission</code> <code>NullPage</code></p> <p>Returns a Permission page on success, or a NullPage on error</p>"},{"location":"permissions/permissions-delete/","title":"Permissions delete","text":""},{"location":"permissions/permissions-delete/#permanently-delete-a-permission","title":"Permanently delete a Permission","text":"<p>Unlike <code>$pages-&gt;trash()</code>, pages deleted here are not restorable.</p> <p>If you attempt to delete a page with children, and don\u2019t specifically set the <code>$recursive</code> argument to <code>true</code>, then this method will throw an exception. If a recursive delete fails for any reason, an exception will be thrown.</p> <p>Hook note: If you want to hook this method, please hook the <code>deleteReady</code>, <code>deleted</code>, or <code>Pages::delete</code> method instead, as hooking this method will not hook relevant pages deleted directly through $pages-&gt;delete().</p>"},{"location":"permissions/permissions-delete/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $permissions-&gt;delete($page);\n\n// usage with all arguments\n$bool = $permissions-&gt;delete($page, bool $recursive = false);\n</code></pre>"},{"location":"permissions/permissions-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Permission, Page</p> <p>Permission to delete</p> <p><code>recursive</code> (optional)</p> <p>bool</p> <p>If set to true, then this will attempt to delete any pages below the Permission too.</p>"},{"location":"permissions/permissions-delete/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"permissions/permissions-delete/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"permissions/permissions-deleted/","title":"Permissions deleted","text":""},{"location":"permissions/permissions-deleted/#hook-called-when-a-permission-is-deleted","title":"Hook called when a permission is deleted","text":"<p>Available since version 3.0.128.</p>"},{"location":"permissions/permissions-deleted/#usage","title":"Usage","text":"<pre><code>$permissions-&gt;deleted(Page $page);\n</code></pre>"},{"location":"permissions/permissions-deleted/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p>Page that was deleted</p>"},{"location":"permissions/permissions-deleted/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"permissions/permissions-get-iterator/","title":"Permissions get iterator","text":""},{"location":"permissions/permissions-get-iterator/#returns-all-installed-permission-pages-and-enables-foreach-iteration-of-permissions","title":"Returns all installed Permission pages and enables foreach() iteration of $permissions","text":""},{"location":"permissions/permissions-get-iterator/#example","title":"Example","text":"<pre><code>// Example of listing all permissions\nforeach($permissions as $permission) {\n  echo \"&lt;li&gt;$permission-&gt;name&lt;/li&gt;\";\n}\n</code></pre>"},{"location":"permissions/permissions-get-iterator/#usage","title":"Usage","text":"<pre><code>$array = $permissions-&gt;getIterator();\n</code></pre>"},{"location":"permissions/permissions-get-iterator/#return-value","title":"Return value","text":"<p><code>array</code> <code>PageArray</code> <code>\\Traversable</code></p>"},{"location":"permissions/permissions-get-reducer-permissions/","title":"Permissions get reducer permissions","text":""},{"location":"permissions/permissions-get-reducer-permissions/#get-permission-names-that-can-reduce-existing-access-when-installed","title":"Get permission names that can reduce existing access, when installed","text":"<p>Returned permission names that end with a \"-\" indicate that given permission name is a prefix that applies for anything that appears after it.</p>"},{"location":"permissions/permissions-get-reducer-permissions/#usage","title":"Usage","text":"<pre><code>$array = $permissions-&gt;getReducerPermissions();\n</code></pre>"},{"location":"permissions/permissions-get-reducer-permissions/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Array of permission names where both index and value are permission name</p>"},{"location":"permissions/permissions-has/","title":"Permissions has","text":""},{"location":"permissions/permissions-has/#does-the-system-have-a-permission-with-the-given-name","title":"Does the system have a permission with the given name?","text":""},{"location":"permissions/permissions-has/#example","title":"Example","text":"<pre><code>// Check if page-publish permission is available\nif($permissions-&gt;has('page-publish')) {\n  // system has the page-publish permission installed\n}\n</code></pre>"},{"location":"permissions/permissions-has/#usage","title":"Usage","text":"<pre><code>$bool = $permissions-&gt;has(string $name);\n</code></pre>"},{"location":"permissions/permissions-has/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of permission</p>"},{"location":"permissions/permissions-has/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if system has a permission with this name, or false if not.</p>"},{"location":"permissions/permissions-save/","title":"Permissions save","text":""},{"location":"permissions/permissions-save/#save-a-permission","title":"Save a Permission","text":"<ul> <li>This is the same as calling $page-&gt;save()</li> <li>If the page is new, it will be inserted. If existing, it will be updated.</li> <li>If you want to just save a particular field in a Page, use <code>$page-&gt;save($fieldName)</code> instead.</li> </ul> <p>Hook note: If you want to hook this method, please hook the <code>saveReady</code>, <code>saved</code>, or one of the <code>Pages::save*</code> methods instead, as hooking this method will not hook relevant pages saved directly through $pages-&gt;save().</p>"},{"location":"permissions/permissions-save/#usage","title":"Usage","text":"<pre><code>$bool = $permissions-&gt;save($page);\n</code></pre>"},{"location":"permissions/permissions-save/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Permission, Page</p>"},{"location":"permissions/permissions-save/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"permissions/permissions-save/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"permissions/permissions-saved/","title":"Permissions saved","text":""},{"location":"permissions/permissions-saved/#hook-called-when-a-permission-is-saved","title":"Hook called when a permission is saved","text":"<p>Available since version 3.0.128.</p>"},{"location":"permissions/permissions-saved/#usage","title":"Usage","text":"<pre><code>// basic usage\n$permissions-&gt;saved(Page $page);\n\n// usage with all arguments\n$permissions-&gt;saved(Page $page, array $changes = [], array $values = []);\n</code></pre>"},{"location":"permissions/permissions-saved/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p>Page that was saved</p> <p><code>changes</code> (optional)</p> <p>array</p> <p>Array of changed field names</p> <p><code>values</code> (optional)</p> <p>array</p> <p>Array of changed field values indexed by name (when enabled)</p>"},{"location":"permissions/permissions-saved/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"process/process-breadcrumb/","title":"Process breadcrumb","text":""},{"location":"process/process-breadcrumb/#add-a-breadcrumb","title":"Add a breadcrumb","text":""},{"location":"process/process-breadcrumb/#example","title":"Example","text":"<pre><code>$this-&gt;breadcrumb(\"../\", \"Widgets\");\n</code></pre>"},{"location":"process/process-breadcrumb/#usage","title":"Usage","text":"<pre><code>$process-&gt;breadcrumb(string $href, string $label);\n</code></pre>"},{"location":"process/process-breadcrumb/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>href</code></p> <p>string</p> <p>URL of breadcrumb</p> <p><code>label</code></p> <p>string</p> <p>Label for breadcrumb</p>"},{"location":"process/process-breadcrumb/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"process/process-browser-title/","title":"Process browser title","text":""},{"location":"process/process-browser-title/#set-the-current-browser-title-tag","title":"Set the current browser title tag","text":""},{"location":"process/process-browser-title/#example","title":"Example","text":"<pre><code>$this-&gt;browserTitle(\"Hello World\");\n</code></pre>"},{"location":"process/process-browser-title/#usage","title":"Usage","text":"<pre><code>$process-&gt;browserTitle(string $title);\n</code></pre>"},{"location":"process/process-browser-title/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>title</code></p> <p>string</p>"},{"location":"process/process-browser-title/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"process/process-execute/","title":"Process execute","text":""},{"location":"process/process-execute/#execute-this-process-and-return-the-output-you-may-have-any-number-of-executename-methods-triggered-by-url-segments","title":"Execute this Process and return the output. You may have any number of execute[name] methods, triggered by URL segments.","text":"<p>When any execute() method returns a string, it us used as the actual output. When the method returns an associative array, it is considered an array of variables to send to the output view layer. Returned array must not be empty, otherwise it cannot be identified as an associative array.</p> <p>This execute() method is called when no URL segments are present. You may have any number of execute() methods, i.e. <code>executeFoo()</code> would be called for the URL <code>./foo/</code> and <code>executeBarBaz()</code> would be called for the URL <code>./bar-baz/</code>.</p>"},{"location":"process/process-execute/#usage","title":"Usage","text":"<pre><code>$string = $process-&gt;execute();\n</code></pre>"},{"location":"process/process-execute/#return-value","title":"Return value","text":"<p><code>string</code> <code>array</code></p>"},{"location":"process/process-get-after-login-url/","title":"Process get after login url","text":""},{"location":"process/process-get-after-login-url/#url-to-redirect-to-after-non-authenticated-user-is-logged-in-or-false-if-module-does-not-support","title":"URL to redirect to after non-authenticated user is logged-in, or false if module does not support","text":"<p>When supported, module should gather any input GET vars and URL segments that it recognizes, sanitize them, and return a URL for that request. ProcessLogin will redirect to the returned URL after user has successfully authenticated.</p> <p>If module does not support this, or only needs to support an integer 'id' GET var, then this method can return false.</p>"},{"location":"process/process-get-after-login-url/#usage","title":"Usage","text":"<pre><code>$bool = Process::getAfterLoginUrl(Page $page);\n</code></pre>"},{"location":"process/process-get-after-login-url/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p>Requested page</p>"},{"location":"process/process-get-after-login-url/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p>"},{"location":"process-wire/process-wire-build-config/","title":"Process wire build config","text":""},{"location":"process-wire/process-wire-build-config/#static-method-to-build-a-config-object-for-booting-processwire","title":"Static method to build a Config object for booting ProcessWire","text":""},{"location":"process-wire/process-wire-build-config/#usage","title":"Usage","text":"<pre><code>// basic usage\n$config = $wire::buildConfig();\n\n// usage with all arguments\n$config = $wire::buildConfig(string $rootPath = '', string $rootURL = null, array $options = []);\n</code></pre>"},{"location":"process-wire/process-wire-build-config/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>rootPath</code> (optional)</p> <p>string</p> <p>Path to root of installation where ProcessWire's index.php file is located.</p> <p><code>rootURL</code> (optional)</p> <p>string</p> <p>Should be specified only for secondary ProcessWire instances. May also include scheme &amp; hostname, i.e. \"http://hostname.com/url\" to force use of scheme+host.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify default behaviors (experimental):</p> <ul> <li><code>siteDir</code> (string): Name of \"site\" directory in $rootPath that contains site's config.php, no slashes (default=\"site\").</li> </ul>"},{"location":"process-wire/process-wire-build-config/#return-value","title":"Return value","text":"<p><code>Config</code></p>"},{"location":"process-wire/process-wire-construct/","title":"Process wire construct","text":""},{"location":"process-wire/process-wire-construct/#represents-an-instance-of-processwire-connected-with-a-set-of-api-variables","title":"Represents an instance of ProcessWire connected with a set of API variables.","text":"<p>This class boots a ProcessWire instance. The current ProcessWire instance is represented by the <code>$wire</code> API variable.</p> <pre><code>// To create a new ProcessWire instance\n$wire = new ProcessWire('/server/path/', 'https://hostname/url/');\n</code></pre>"},{"location":"process-wire/process-wire-get-root-path/","title":"Process wire get root path","text":""},{"location":"process-wire/process-wire-get-root-path/#get-root-path-check-it-and-optionally-auto-detect-it-if-not-provided","title":"Get root path, check it, and optionally auto-detect it if not provided","text":""},{"location":"process-wire/process-wire-get-root-path/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $wire::getRootPath();\n\n// usage with all arguments\n$string = $wire::getRootPath($rootPath = '');\n</code></pre>"},{"location":"process-wire/process-wire-get-root-path/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>rootPath</code> (optional)</p> <p>bool, string</p> <p>Root path if already known, in which case we\u2019ll just modify as needed \u2026or specify boolean true to get absolute root path, which disregards any symbolic links to core.</p>"},{"location":"process-wire/process-wire-get-root-path/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"process-wire/process-wire-set-status/","title":"Process wire set status","text":""},{"location":"process-wire/process-wire-set-status/#set-the-system-status-to-one-of-the-processwirestatus-constants","title":"Set the system status to one of the ProcessWire::status* constants","text":"<p>This also triggers init/ready functions for modules, when applicable.</p>"},{"location":"process-wire/process-wire-set-status/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire-&gt;setStatus(int $status);\n\n// usage with all arguments\n$wire-&gt;setStatus(int $status, array $data = []);\n</code></pre>"},{"location":"process-wire/process-wire-set-status/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>status</code></p> <p>int</p> <p><code>data</code> (optional)</p> <p>array</p> <p>Associative array of any extra data to pass along to include files as locally scoped vars (3.0.142+)</p>"},{"location":"process-wire/process-wire-set/","title":"Process wire set","text":""},{"location":"process-wire/process-wire-set/#set-a-new-api-variable","title":"Set a new API variable","text":"<p>Alias of $this-&gt;wire(), but for setting only, for syntactic convenience. i.e. $this-&gt;wire()-&gt;set($key, $value);</p>"},{"location":"process-wire/process-wire-set/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire-&gt;set(string $key, $value);\n\n// usage with all arguments\n$wire-&gt;set(string $key, $value, bool $lock = false);\n</code></pre>"},{"location":"process-wire/process-wire-set/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>API variable name to set</p> <p><code>value</code></p> <p>Wire, mixed</p> <p>Value of API variable</p> <p><code>lock</code> (optional)</p> <p>bool</p> <p>Whether to lock the value from being overwritten</p>"},{"location":"process-wire/process-wire-set/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"role/role-add-permission/","title":"Role add permission","text":""},{"location":"role/role-add-permission/#add-the-given-permission-string-id-or-object","title":"Add the given Permission string, id or object.","text":"<p>This is the same as <code>$role-&gt;permissions-&gt;add($permission)</code> except this one will accept ID or name.</p>"},{"location":"role/role-add-permission/#usage","title":"Usage","text":"<pre><code>$bool = $role-&gt;addPermission($permission);\n</code></pre>"},{"location":"role/role-add-permission/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>permission</code></p> <p>string, int, Permission</p> <p>Permission object, name or id.</p>"},{"location":"role/role-add-permission/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns false if permission not recognized, true otherwise</p>"},{"location":"role/role-has-permission/","title":"Role has permission","text":""},{"location":"role/role-has-permission/#does-this-role-have-the-given-permission-name-id-or-object","title":"Does this role have the given permission name, id or object?","text":""},{"location":"role/role-has-permission/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $role-&gt;hasPermission($permission);\n\n// usage with all arguments\n$bool = $role-&gt;hasPermission($permission, $context = null);\n</code></pre>"},{"location":"role/role-has-permission/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>permission</code></p> <p>string, int, Permission</p> <p>Permission object, name, or id.</p> <p><code>context</code> (optional)</p> <p>Page, Template, null</p> <p>Optional Page or Template context.</p>"},{"location":"role/role-has-permission/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"role/role-has-permission/#see-also","title":"See Also","text":"<ul> <li>User::hasPermission()</li> </ul>"},{"location":"role/role-remove-permission/","title":"Role remove permission","text":""},{"location":"role/role-remove-permission/#remove-the-given-permission-string-id-or-object","title":"Remove the given permission string, id or object.","text":"<p>This is the same as <code>$role-&gt;permissions-&gt;remove($permission)</code> except this one will accept ID or name.</p>"},{"location":"role/role-remove-permission/#usage","title":"Usage","text":"<pre><code>$bool = $role-&gt;removePermission($permission);\n</code></pre>"},{"location":"role/role-remove-permission/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>permission</code></p> <p>string, int, Permission</p> <p>Permission object, name or id.</p>"},{"location":"role/role-remove-permission/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>false if permission not recognized, true otherwise</p>"},{"location":"role/role-wired/","title":"Role wired","text":""},{"location":"role/role-wired/#wired-to-api","title":"Wired to API","text":""},{"location":"role/role-wired/#usage","title":"Usage","text":"<pre><code>$role-&gt;wired();\n</code></pre>"},{"location":"roles/roles-add/","title":"Roles add","text":""},{"location":"roles/roles-add/#add-a-new-role-with-the-given-name-and-return-it","title":"Add a new Role with the given name and return it","text":"<ul> <li>If the page has any other fields, they will not be populated, only the name will.</li> <li>Returns a <code>NullPage</code> on error, such as when a page of this type already exists with the same name/parent.</li> </ul> <p>Hook note: If you want to hook this method, please hook the <code>addReady</code>, <code>Pages::add</code>, or <code>Pages::addReady</code> method instead, as hooking this method will not hook relevant pages added directly through $pages-&gt;add().</p>"},{"location":"roles/roles-add/#usage","title":"Usage","text":"<pre><code>$role = $roles-&gt;add(string $name);\n</code></pre>"},{"location":"roles/roles-add/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of role you want to add, i.e. \"hello-world\"</p>"},{"location":"roles/roles-add/#return-value","title":"Return value","text":"<p><code>Role</code> <code>NullPage</code></p> <p>Returns a Role page on success, or a NullPage on error</p>"},{"location":"roles/roles-delete/","title":"Roles delete","text":""},{"location":"roles/roles-delete/#permanently-delete-a-role","title":"Permanently delete a Role","text":"<p>Unlike <code>$pages-&gt;trash()</code>, pages deleted here are not restorable.</p> <p>If you attempt to delete a page with children, and don\u2019t specifically set the <code>$recursive</code> argument to <code>true</code>, then this method will throw an exception. If a recursive delete fails for any reason, an exception will be thrown.</p> <p>Hook note: If you want to hook this method, please hook the <code>deleteReady</code>, <code>deleted</code>, or <code>Pages::delete</code> method instead, as hooking this method will not hook relevant pages deleted directly through $pages-&gt;delete().</p>"},{"location":"roles/roles-delete/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $roles-&gt;delete($page);\n\n// usage with all arguments\n$bool = $roles-&gt;delete($page, bool $recursive = false);\n</code></pre>"},{"location":"roles/roles-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Role, Page</p> <p>Permission to delete</p> <p><code>recursive</code> (optional)</p> <p>bool</p> <p>If set to true, then this will attempt to delete any pages below the Permission too.</p>"},{"location":"roles/roles-delete/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"roles/roles-delete/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"roles/roles-get/","title":"Roles get","text":""},{"location":"roles/roles-get/#get-a-role-by-name-numeric-id-or-selector","title":"Get a Role by name, numeric ID or selector","text":""},{"location":"roles/roles-get/#usage","title":"Usage","text":"<pre><code>$role = $roles-&gt;get(string $selectorString);\n</code></pre>"},{"location":"roles/roles-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selectorString</code></p> <p>string</p> <p>Role name or selector</p>"},{"location":"roles/roles-get/#return-value","title":"Return value","text":"<p><code>Role</code> <code>NullPage</code> <code>null</code></p>"},{"location":"roles/roles-save/","title":"Roles save","text":""},{"location":"roles/roles-save/#save-a-role","title":"Save a Role","text":"<ul> <li>This is the same as calling $page-&gt;save()</li> <li>If the page is new, it will be inserted. If existing, it will be updated.</li> <li>If you want to just save a particular field in a Page, use <code>$page-&gt;save($fieldName)</code> instead.</li> </ul> <p>Hook note: If you want to hook this method, please hook the <code>saveReady</code>, <code>saved</code>, or one of the <code>Pages::save*</code> methods instead, as hooking this method will not hook relevant pages saved directly through $pages-&gt;save().</p>"},{"location":"roles/roles-save/#usage","title":"Usage","text":"<pre><code>$bool = $roles-&gt;save($page);\n</code></pre>"},{"location":"roles/roles-save/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Role, Page</p>"},{"location":"roles/roles-save/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure</p>"},{"location":"roles/roles-save/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"sanitizer/sanitizer-bit/","title":"Sanitizer bit","text":""},{"location":"sanitizer/sanitizer-bit/#sanitize-to-a-bit-returning-only-integer-0-or-1","title":"Sanitize to a bit, returning only integer 0 or 1","text":"<p>This works the same as the bool sanitizer except that it returns 0 or 1 rather than false or true.</p> <p>Available since version 3.0.125.</p>"},{"location":"sanitizer/sanitizer-bit/#usage","title":"Usage","text":"<pre><code>$int = $sanitizer-&gt;bit($value);\n</code></pre>"},{"location":"sanitizer/sanitizer-bit/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string, int, array</p>"},{"location":"sanitizer/sanitizer-bit/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"sanitizer/sanitizer-bit/#see-also","title":"See Also","text":"<ul> <li>Sanitizer::bool()</li> </ul>"},{"location":"sanitizer/sanitizer-date/","title":"Sanitizer date","text":""},{"location":"sanitizer/sanitizer-date/#sanitize-a-date-or-datetime-string-making-sure-it-is-valid-and-return-it","title":"Sanitize a date or date/time string, making sure it is valid, and return it","text":"<ul> <li>If no date $format is specified, date will be returned as a unix timestamp.</li> <li>If given date in invalid format and can\u2019t be made valid, or date is empty, NULL will be returned.</li> <li>If $value is an integer or string of all numbers, it is always assumed to be a unix timestamp.</li> <li>If $format and \u201cstrict\u201d option specified, date will also validate for format and no out-of-bounds values will be converted.</li> </ul>"},{"location":"sanitizer/sanitizer-date/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $sanitizer-&gt;date($value);\n\n// usage with all arguments\n$string = $sanitizer-&gt;date($value, $format = null, array $options = []);\n</code></pre>"},{"location":"sanitizer/sanitizer-date/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string, int</p> <p>Date string or unix timestamp</p> <p><code>format</code> (optional)</p> <p>string, null</p> <p>Format of date string ($value) in any wireDate(), date() or strftime() format.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Options to modify behavior:</p> <ul> <li><code>returnFormat</code> (string): wireDate() format to return date in. If not specified, then the $format argument is used.</li> <li><code>min</code> (string|int): Minimum allowed date in $format or unix timestamp format. Null is returned when date is less than this.</li> <li><code>max</code> (string|int): Maximum allowed date in $format or unix timestamp format. Null is returned when date is more than this.</li> <li><code>default</code> (mixed): Default value to return if no value specified.</li> <li><code>strict</code> (bool): Force dates that don\u2019t match given $format, or out of bounds, to fail. Requires $format. (default=false)</li> </ul>"},{"location":"sanitizer/sanitizer-date/#return-value","title":"Return value","text":"<p><code>string</code> <code>int</code> <code>null</code></p>"},{"location":"sanitizer/sanitizer-digits/","title":"Sanitizer digits","text":""},{"location":"sanitizer/sanitizer-digits/#sanitize-string-to-contain-only-ascii-digits-0-9","title":"Sanitize string to contain only ASCII digits (0-9)","text":""},{"location":"sanitizer/sanitizer-digits/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $sanitizer-&gt;digits(string $value);\n\n// usage with all arguments\n$string = $sanitizer-&gt;digits(string $value, int $maxLength = 1024);\n</code></pre>"},{"location":"sanitizer/sanitizer-digits/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string</p> <p>Value to sanitize</p> <p><code>maxLength</code> (optional)</p> <p>int</p> <p>Maximum length of returned value (default=1024)</p>"},{"location":"sanitizer/sanitizer-digits/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"sanitizer/sanitizer-html-class/","title":"Sanitizer html class","text":""},{"location":"sanitizer/sanitizer-html-class/#sanitize-string-to-ascii-only-html-class-attribute-value","title":"Sanitize string to ASCII-only HTML class attribute value","text":"<p>Note that this does not support all possible characters in an HTML class attribute and instead focuses on the most commonly used ones. Characters allowed in HTML class attributes from this method include: `-_:</p> <p>Available since version 3.0.212.</p>"},{"location":"sanitizer/sanitizer-html-class/#usage","title":"Usage","text":"<pre><code>$string = $sanitizer-&gt;htmlClass(string $value);\n</code></pre>"},{"location":"sanitizer/sanitizer-html-class/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string</p>"},{"location":"sanitizer/sanitizer-html-class/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"sanitizer/sanitizer-html-classes/","title":"Sanitizer html classes","text":""},{"location":"sanitizer/sanitizer-html-classes/#sanitize-string-to-ascii-only-space-separated-html-class-attribute-values-with-no-duplicates","title":"Sanitize string to ASCII-only space-separated HTML class attribute values with no duplicates","text":"<p>See additional notes in <code>Sanitizer::htmlClass()</code> method.</p> <p>Available since version 3.0.212.</p>"},{"location":"sanitizer/sanitizer-html-classes/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $sanitizer-&gt;htmlClasses($value);\n\n// usage with all arguments\n$string = $sanitizer-&gt;htmlClasses($value, bool $getArray = false);\n</code></pre>"},{"location":"sanitizer/sanitizer-html-classes/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string, array</p> <p><code>getArray</code> (optional)</p> <p>bool</p> <p>Get array rather than string? (default=false)</p>"},{"location":"sanitizer/sanitizer-html-classes/#return-value","title":"Return value","text":"<p><code>string</code> <code>array</code></p>"},{"location":"selector/selector-field/","title":"Selector field","text":""},{"location":"selector/selector-field/#get-the-fields-of-this-selector","title":"Get the field(s) of this Selector","text":"<p>Note that if calling this as a property (rather than a method) it can return either a string or an array.</p> <p>Available since version 3.0.42. Prior versions only supported the 'field' property.</p>"},{"location":"selector/selector-field/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $selector-&gt;field();\n\n// usage with all arguments\n$string = $selector-&gt;field($forceString = true);\n</code></pre>"},{"location":"selector/selector-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>forceString</code> (optional)</p> <p>bool, int</p> <p>Specify one of the following:</p> <ul> <li><code>true</code> (bool): to only return a string, where multiple-fields will be split by pipe \"|\". (default)</li> <li><code>false</code> (bool): to return string if 1 field, or array of multiple fields (same behavior as field property).</li> <li><code>1</code> (int): to return only the first value (string).</li> </ul>"},{"location":"selector/selector-field/#return-value","title":"Return value","text":"<p><code>string</code> <code>array</code> <code>null</code></p>"},{"location":"selector/selector-field/#see-also","title":"See Also","text":"<ul> <li>Selector::fields()</li> </ul>"},{"location":"selector/selector-fields/","title":"Selector fields","text":""},{"location":"selector/selector-fields/#return-array-of-fields-for-this-selector","title":"Return array of field(s) for this Selector","text":"<p>Available since version 3.0.42. Prior versions just supported the 'fields' property.</p>"},{"location":"selector/selector-fields/#usage","title":"Usage","text":"<pre><code>$array = $selector-&gt;fields();\n</code></pre>"},{"location":"selector/selector-fields/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"selector/selector-fields/#see-also","title":"See Also","text":"<ul> <li>Selector::field()</li> </ul>"},{"location":"selector/selector-get-compare-type/","title":"Selector get compare type","text":""},{"location":"selector/selector-get-compare-type/#what-type-of-comparson-does-selector-perform","title":"What type of comparson does Selector perform?","text":"<p>Available since version 3.0.154.</p>"},{"location":"selector/selector-get-compare-type/#usage","title":"Usage","text":"<pre><code>$int = Selector::getCompareType();\n</code></pre>"},{"location":"selector/selector-get-compare-type/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Returns a Selector::compareType* constant or 0 if not defined</p>"},{"location":"selector/selector-get-description/","title":"Selector get description","text":""},{"location":"selector/selector-get-description/#get-longer-description-that-describes-this-selector","title":"Get longer description that describes this Selector","text":"<p>Available since version 3.0.160.</p>"},{"location":"selector/selector-get-description/#usage","title":"Usage","text":"<pre><code>$string = Selector::getDescription();\n</code></pre>"},{"location":"selector/selector-get-description/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"selector/selector-get-label/","title":"Selector get label","text":""},{"location":"selector/selector-get-label/#get-short-label-that-describes-this-selector","title":"Get short label that describes this Selector","text":"<p>Available since version 3.0.160.</p>"},{"location":"selector/selector-get-label/#usage","title":"Usage","text":"<pre><code>$string = Selector::getLabel();\n</code></pre>"},{"location":"selector/selector-get-label/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"selector/selector-get/","title":"Selector get","text":""},{"location":"selector/selector-get/#get-a-property","title":"Get a property","text":"<ul> <li>If the given $key is an object, it will cast it to a string.</li> <li>If the given $key is a string with \"|\" pipe characters in it, it will try all till it finds a non-empty value.</li> <li>If given an API variable name, it will return that API variable unless the class has direct access API variables disabled.</li> </ul>"},{"location":"selector/selector-get/#example","title":"Example","text":"<pre><code>// Retrieve the value of a property\n$value = $item-&gt;get(\"some_property\");\n\n// Retrieve the value of the first non-empty property:\n$value = $item-&gt;get(\"property1|property2|property2\");\n\n// Retrieve a value using array access\n$value = $item[\"some_property\"];\n</code></pre>"},{"location":"selector/selector-get/#usage","title":"Usage","text":"<pre><code>$array = $selector-&gt;get(string $key);\n</code></pre>"},{"location":"selector/selector-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Property name</p>"},{"location":"selector/selector-get/#return-value","title":"Return value","text":"<p><code>array</code> <code>mixed</code> <code>null</code> <code>string</code></p> <p>Property value</p>"},{"location":"selector/selector-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"selector/selector-matches/","title":"Selector matches","text":""},{"location":"selector/selector-matches/#does-this-selector-match-the-given-value","title":"Does this Selector match the given value?","text":"<p>If the value held by this Selector is an array of values, it will check if any one of them matches the value supplied here.</p>"},{"location":"selector/selector-matches/#usage","title":"Usage","text":"<pre><code>$bool = $selector-&gt;matches($value);\n</code></pre>"},{"location":"selector/selector-matches/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>value</code></p> <p>string, int, Wire, array</p> <p>If given a Wire, then matches will also operate on OR field=value type selectors, where present</p>"},{"location":"selector/selector-matches/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"selectors/selectors-debug-info-item/","title":"Selectors debug info item","text":""},{"location":"selectors/selectors-debug-info-item/#debug-info-for-selector-item","title":"Debug info for Selector item","text":""},{"location":"selectors/selectors-debug-info-item/#usage","title":"Usage","text":"<pre><code>$array = $selectors-&gt;debugInfoItem($item);\n</code></pre>"},{"location":"selectors/selectors-debug-info-item/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Selector, mixed</p>"},{"location":"selectors/selectors-debug-info-item/#return-value","title":"Return value","text":"<p><code>array</code> <code>mixed</code> <code>null</code> <code>string</code></p>"},{"location":"selectors/selectors-get-all-fields/","title":"Selectors get all fields","text":""},{"location":"selectors/selectors-get-all-fields/#return-array-of-all-field-names-referenced-in-all-of-the-selector-objects-here","title":"Return array of all field names referenced in all of the Selector objects here","text":""},{"location":"selectors/selectors-get-all-fields/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $selectors-&gt;getAllFields();\n\n// usage with all arguments\n$array = $selectors-&gt;getAllFields(bool $subfields = true);\n</code></pre>"},{"location":"selectors/selectors-get-all-fields/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>subfields</code> (optional)</p> <p>bool</p> <p>Default is to allow \"field.subfield\" fields, or specify false to convert them to just \"field\".</p>"},{"location":"selectors/selectors-get-all-fields/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returned array has both keys and values as field names (same)</p>"},{"location":"selectors/selectors-get-all-values/","title":"Selectors get all values","text":""},{"location":"selectors/selectors-get-all-values/#return-array-of-all-values-referenced-in-all-selector-objects-here","title":"Return array of all values referenced in all Selector objects here","text":""},{"location":"selectors/selectors-get-all-values/#usage","title":"Usage","text":"<pre><code>$array = $selectors-&gt;getAllValues();\n</code></pre>"},{"location":"selectors/selectors-get-all-values/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returned array has both keys and values as field values (same)</p>"},{"location":"selectors/selectors-get-selector-by-field/","title":"Selectors get selector by field","text":""},{"location":"selectors/selectors-get-selector-by-field/#get-the-first-selector-that-uses-given-field-name","title":"Get the first selector that uses given field name","text":"<p>This is useful for quickly retrieving values of reserved properties like \"include\", \"limit\", \"start\", etc.</p> <p>Using $or: By default this excludes selectors that have fields in an OR expression, like \"a|b|c\". So if you specified field \"a\" it would not be matched. If you wanted it to still match, specify true for the $or argument.</p> <p>Using $all: By default only the first matching selector is returned. If you want it to return all matching selectors in an array, then specify true for the $all argument. This changes the return value to always be an array of Selector objects, or a blank array if no match.</p>"},{"location":"selectors/selectors-get-selector-by-field/#usage","title":"Usage","text":"<pre><code>// basic usage\n$selector = $selectors-&gt;getSelectorByField(string $fieldName);\n\n// usage with all arguments\n$selector = $selectors-&gt;getSelectorByField(string $fieldName, bool $or = false, bool $all = false);\n</code></pre>"},{"location":"selectors/selectors-get-selector-by-field/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>fieldName</code></p> <p>string</p> <p>Name of field to return value for (i.e. \"include\", \"limit\", etc.)</p> <p><code>or</code> (optional)</p> <p>bool</p> <p>Allow fields that appear in OR expressions? (default=false)</p> <p><code>all</code> (optional)</p> <p>bool</p> <p>Return an array of all matching Selector objects? (default=false)</p>"},{"location":"selectors/selectors-get-selector-by-field/#return-value","title":"Return value","text":"<p><code>Selector</code> <code>array</code> <code>null</code></p> <p>Returns null if field not present in selectors (or blank array if $all mode)</p>"},{"location":"session/session-get-all-for/","title":"Session get all for","text":""},{"location":"session/session-get-all-for/#get-all-session-variables-for-given-namespace-and-return-associative-array","title":"Get all session variables for given namespace and return associative array","text":"<p>Available since version 3.0.141. Method added for consistency, but any version can do this with $session-&gt;getFor($ns, '');</p>"},{"location":"session/session-get-all-for/#usage","title":"Usage","text":"<pre><code>$array = $session-&gt;getAllFor($ns);\n</code></pre>"},{"location":"session/session-get-all-for/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>ns</code></p> <p>string, Wire</p>"},{"location":"session/session-get-all-for/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"session/session-get-all/","title":"Session get all","text":""},{"location":"session/session-get-all/#get-all-session-variables-in-an-associative-array","title":"Get all session variables in an associative array","text":""},{"location":"session/session-get-all/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $session-&gt;getAll();\n\n// usage with all arguments\n$array = $session-&gt;getAll($ns = null);\n</code></pre>"},{"location":"session/session-get-all/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>ns</code> (optional)</p> <p>object, string</p> <p>Optional namespace</p>"},{"location":"session/session-get-all/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"session/session-get-for/","title":"Session get for","text":""},{"location":"session/session-get-for/#get-a-session-variable-within-a-given-namespace","title":"Get a session variable within a given namespace","text":""},{"location":"session/session-get-for/#example","title":"Example","text":"<pre><code>// Retrieve namespaced session value\n$firstName = $session-&gt;getFor($this, 'firstName');\n</code></pre>"},{"location":"session/session-get-for/#usage","title":"Usage","text":"<pre><code>$mixed = $session-&gt;getFor($ns, string $key);\n</code></pre>"},{"location":"session/session-get-for/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>ns</code></p> <p>string, object</p> <p>Namespace string or object</p> <p><code>key</code></p> <p>string</p> <p>Specify variable name to retrieve, or blank string to return all variables in the namespace.</p>"},{"location":"session/session-get-for/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"session/session-get-val-for/","title":"Session get val for","text":""},{"location":"session/session-get-val-for/#get-a-session-variable-or-return-val-argument-if-session-value-not-present","title":"Get a session variable or return $val argument if session value not present","text":"<p>This is the same as get() except that it lets you specify a fallback return value in the method call. For a namespace version use <code>Session::getValFor()</code> instead.</p> <p>Available since version 3.0.133.</p>"},{"location":"session/session-get-val-for/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $session-&gt;getValFor($ns, string $key);\n\n// usage with all arguments\n$mixed = $session-&gt;getValFor($ns, string $key, mixed $val = null);\n</code></pre>"},{"location":"session/session-get-val-for/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>ns</code></p> <p>string, object</p> <p>Namespace string or object</p> <p><code>key</code></p> <p>string</p> <p>Specify variable name to retrieve</p> <p><code>val</code> (optional)</p> <p>mixed</p> <p>Fallback value if session does not have one</p>"},{"location":"session/session-get-val-for/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"session/session-get-val/","title":"Session get val","text":""},{"location":"session/session-get-val/#get-a-session-variable-or-return-val-argument-if-session-value-not-present","title":"Get a session variable or return $val argument if session value not present","text":"<p>This is the same as get() except that it lets you specify a fallback return value in the method call. For a namespace version use <code>Session::getValFor()</code> instead.</p> <p>Available since version 3.0.133.</p>"},{"location":"session/session-get-val/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $session-&gt;getVal(string $key);\n\n// usage with all arguments\n$mixed = $session-&gt;getVal(string $key, mixed $val = null);\n</code></pre>"},{"location":"session/session-get-val/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of session variable to retrieve.</p> <p><code>val</code> (optional)</p> <p>mixed</p> <p>Fallback value to return if session does not have it.</p>"},{"location":"session/session-get-val/#return-value","title":"Return value","text":"<p><code>mixed</code></p> <p>Returns value of seession variable, or NULL if not found.</p>"},{"location":"session/session-get/","title":"Session get","text":""},{"location":"session/session-get/#get-a-session-variable","title":"Get a session variable","text":"<ul> <li>This method returns the value of the requested session variable, or NULL if it's not present.</li> <li>You can optionally use a namespace with this method, to avoid collisions with other session variables. But if using namespaces we recommended using the dedicated getFor() and setFor() methods instead.</li> <li>You can also get or set non-namespaced session values directly (see examples).</li> </ul>"},{"location":"session/session-get/#examples","title":"Examples","text":"<pre><code>// Set value \"Bob\" to session variable named \"firstName\"\n$session-&gt;set('firstName', 'Bob');\n\n// You can retrieve the firstName now, or any later request\n$firstName = $session-&gt;get('firstName');\n\n// outputs: Hello Bob\necho \"Hello $firstName\";\n\n// Setting and getting a session value directly\n$session-&gt;firstName = 'Bob';\n$firstName = $session-&gt;firstName;\n</code></pre>"},{"location":"session/session-get/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $session-&gt;get($key);\n\n// usage with all arguments\n$mixed = $session-&gt;get($key, string $_key = null);\n</code></pre>"},{"location":"session/session-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, object</p> <p>Name of session variable to retrieve (or object if using namespaces)</p> <p><code>_key</code> (optional)</p> <p>string</p> <p>Name of session variable to get if first argument is namespace, omit otherwise.</p>"},{"location":"session/session-get/#return-value","title":"Return value","text":"<p><code>mixed</code></p> <p>Returns value of seession variable, or NULL if not found.</p>"},{"location":"session/session-location/","title":"Session location","text":""},{"location":"session/session-location/#perform-a-temporary-redirect","title":"Perform a temporary redirect","text":"<p>This is an alias of <code>$session-&gt;redirect($url, false);</code> that sends only the location header, which translates to a 302 redirect.</p> <p>Available since version 3.0.166.</p>"},{"location":"session/session-location/#usage","title":"Usage","text":"<pre><code>// basic usage\n$session-&gt;location(string $url);\n\n// usage with all arguments\n$session-&gt;location(string $url, int $status = 302);\n</code></pre>"},{"location":"session/session-location/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>url</code></p> <p>string</p> <p><code>status</code> (optional)</p> <p>int</p> <p>One of the following HTTP status codes, or omit for 302 (added 3.0.192):</p> <ul> <li><code>302</code> (int): \u201cFound\u201d, Temporary redirect using GET. (default)</li> <li><code>303</code> (int): \u201cSee other\u201d, Temporary redirect using GET.</li> <li><code>307</code> (int): Temporary redirect using current request method such as POST (repeat that request).</li> </ul>"},{"location":"session/session-location/#see-also","title":"See Also","text":"<ul> <li>Session::redirect()</li> </ul>"},{"location":"session/session-redirect/","title":"Session redirect","text":""},{"location":"session/session-redirect/#redirect-this-session-to-another-url","title":"Redirect this session to another URL.","text":"<p>Execution halts within this function after redirect has been issued.</p>"},{"location":"session/session-redirect/#example","title":"Example","text":"<pre><code>// redirect to homepage\n$session-&gt;redirect('/');\n</code></pre>"},{"location":"session/session-redirect/#usage","title":"Usage","text":"<pre><code>// basic usage\n$session-&gt;redirect(string $url);\n\n// usage with all arguments\n$session-&gt;redirect(string $url, $status = 301);\n</code></pre>"},{"location":"session/session-redirect/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>url</code></p> <p>string</p> <p>URL to redirect to</p> <p><code>status</code> (optional)</p> <p>bool, int</p> <p>One of the following (or omit for 301):</p> <ul> <li><code>true</code> (bool): Permanent redirect (same as 301).</li> <li><code>false</code> (bool): Temporary redirect (same as 302).</li> <li><code>301</code> (int): Permanent redirect using GET. (3.0.166+)</li> <li><code>302</code> (int): \u201cFound\u201d, Temporary redirect using GET. (3.0.166+)</li> <li><code>303</code> (int): \u201cSee other\u201d, Temporary redirect using GET. (3.0.166+)</li> <li><code>307</code> (int): Temporary redirect using current request method such as POST (repeat that request). (3.0.166+)</li> </ul>"},{"location":"session/session-set/","title":"Session set","text":""},{"location":"session/session-set/#set-a-session-variable","title":"Set a session variable","text":"<ul> <li>You can optionally use a namespace with this method, to avoid collisions with other session variables. But if using namespaces we recommended using the dedicated getFor() and setFor() methods instead.</li> <li>You can also get or set non-namespaced session values directly (see examples).</li> </ul>"},{"location":"session/session-set/#examples","title":"Examples","text":"<pre><code>// Set value \"Bob\" to session variable named \"firstName\"\n$session-&gt;set('firstName', 'Bob');\n\n// You can retrieve the firstName now, or any later request\n$firstName = $session-&gt;get('firstName');\n\n// outputs: Hello Bob\necho \"Hello $firstName\";\n\n// Setting and getting a session value directly\n$session-&gt;firstName = 'Bob';\n$firstName = $session-&gt;firstName;\n</code></pre>"},{"location":"session/session-set/#usage","title":"Usage","text":"<pre><code>// basic usage\n$session-&gt;set($key, $value);\n\n// usage with all arguments\n$session-&gt;set($key, $value, mixed $_value = null);\n</code></pre>"},{"location":"session/session-set/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, object</p> <p>Name of session variable to set (or object for namespace)</p> <p><code>value</code></p> <p>string, mixed</p> <p>Value to set (or name of variable, if first argument is namespace)</p> <p><code>_value</code> (optional)</p> <p>mixed</p> <p>Value to set if first argument is namespace. Omit otherwise.</p>"},{"location":"session/session-set/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-single-use-token/","title":"Session c s r f get single use token","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-single-use-token/#get-a-csrf-token-name-and-value-that-can-only-be-used-once","title":"Get a CSRF Token name and value that can only be used once","text":"<p>Note that a single call to hasValidToken($id) or validate($id) will invalidate the single use token. So call them once and store your result if you need the result multiple times.</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-single-use-token/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $sessionCSRF-&gt;getSingleUseToken();\n\n// usage with all arguments\n$array = $sessionCSRF-&gt;getSingleUseToken($id = '');\n</code></pre>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-single-use-token/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>id</code> (optional)</p> <p>int, string</p> <p>Optional unique ID/name for this token (of omitted one is generated automatically)</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-single-use-token/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>(\"id' =&gt; \"token ID\", \"name\" =&gt; \"token name\", \"value\" =&gt; \"token value\", \"time\" =&gt; created timestamp)</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-name/","title":"Session c s r f get token name","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-name/#get-a-csrf-token-name-or-create-one-if-it-doesnt-yet-exist","title":"Get a CSRF Token name, or create one if it doesn't yet exist","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-name/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $sessionCSRF-&gt;getTokenName();\n\n// usage with all arguments\n$string = $sessionCSRF-&gt;getTokenName($id = '');\n</code></pre>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>id</code> (optional)</p> <p>int, string, null</p> <p>Optional unique ID for this token</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-name/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-time/","title":"Session c s r f get token time","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-time/#get-a-csrf-token-timestamp","title":"Get a CSRF Token timestamp","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-time/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $sessionCSRF-&gt;getTokenTime();\n\n// usage with all arguments\n$int = $sessionCSRF-&gt;getTokenTime($id = '');\n</code></pre>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-time/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>id</code> (optional)</p> <p>int, string, null</p> <p>Optional unique ID for this token</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-time/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-value/","title":"Session c s r f get token value","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-value/#get-a-csrf-token-value-as-stored-in-the-session-or-create-one-if-it-doesnt-yet-exist","title":"Get a CSRF Token value as stored in the session, or create one if it doesn't yet exist","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-value/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $sessionCSRF-&gt;getTokenValue();\n\n// usage with all arguments\n$string = $sessionCSRF-&gt;getTokenValue($id = '');\n</code></pre>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-value/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>id</code> (optional)</p> <p>int, string, null</p> <p>Optional unique ID for this token</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token-value/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token/","title":"Session c s r f get token","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token/#get-a-csrf-token-name-and-value","title":"Get a CSRF Token name and value","text":""},{"location":"session-c-s-r-f/session-c-s-r-f-get-token/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $sessionCSRF-&gt;getToken();\n\n// usage with all arguments\n$array = $sessionCSRF-&gt;getToken($id = '');\n</code></pre>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>id</code> (optional)</p> <p>int, string, null</p> <p>Optional unique ID for this token</p>"},{"location":"session-c-s-r-f/session-c-s-r-f-get-token/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>(\"name\" =&gt; \"token name\", \"value\" =&gt; \"token value\", \"time\" =&gt; created timestamp)</p>"},{"location":"template/template-get-icon/","title":"Template get icon","text":""},{"location":"template/template-get-icon/#return-the-icon-name-used-by-this-template","title":"Return the icon name used by this template","text":""},{"location":"template/template-get-icon/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $template-&gt;getIcon();\n\n// usage with all arguments\n$string = $template-&gt;getIcon(bool $prefix = false);\n</code></pre>"},{"location":"template/template-get-icon/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>prefix</code> (optional)</p> <p>bool</p> <p>Specify true if you want the icon prefix (icon- or fa-) to be included (default=false).</p>"},{"location":"template/template-get-icon/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returns a font-awesome icon name</p>"},{"location":"template/template-get-label/","title":"Template get label","text":""},{"location":"template/template-get-label/#return-template-label-for-current-language-or-specified-language-if-provided","title":"Return template label for current language, or specified language if provided","text":"<p>If no template label, return template name. This is different from <code>$template-&gt;label</code> in that it knows about languages (when installed) and it will always return something. If there's no label, you'll still get the name.</p>"},{"location":"template/template-get-label/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $template-&gt;getLabel();\n\n// usage with all arguments\n$string = $template-&gt;getLabel($language = null);\n</code></pre>"},{"location":"template/template-get-label/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>language</code> (optional)</p> <p>Page, Language</p> <p>Optional, if not used then user's current language is used</p>"},{"location":"template/template-get-label/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"template/template-get-languages/","title":"Template get languages","text":""},{"location":"template/template-get-languages/#get-languages-allowed-for-this-template-or-null-if-language-support-not-active","title":"Get languages allowed for this template or null if language support not active.","text":""},{"location":"template/template-get-languages/#usage","title":"Usage","text":"<pre><code>$items = $template-&gt;getLanguages();\n</code></pre>"},{"location":"template/template-get-languages/#return-value","title":"Return value","text":"<p><code>PageArray</code> <code>Languages</code> <code>null</code></p> <p>Returns a PageArray of Language objects, or NULL if language support not active.</p>"},{"location":"template/template-get-num-pages/","title":"Template get num pages","text":""},{"location":"template/template-get-num-pages/#return-the-number-of-pages-used-by-this-template","title":"Return the number of pages used by this template.","text":""},{"location":"template/template-get-num-pages/#usage","title":"Usage","text":"<pre><code>$int = $template-&gt;getNumPages();\n</code></pre>"},{"location":"template/template-get-num-pages/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"template/template-get-page-class/","title":"Template get page class","text":""},{"location":"template/template-get-page-class/#get-class-name-to-use-for-page-objects-using-this-template","title":"Get class name to use for Page objects using this template","text":"<p>Note that value can be different from the <code>$template-&gt;pageClass</code> property, since it is determined at runtime. If it is different, then it is at least a class that extends the one defined by the pageClass property.</p> <p>Available since version 3.0.152.</p>"},{"location":"template/template-get-page-class/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $template-&gt;getPageClass();\n\n// usage with all arguments\n$string = $template-&gt;getPageClass(bool $withNamespace = true);\n</code></pre>"},{"location":"template/template-get-page-class/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>withNamespace</code> (optional)</p> <p>bool</p> <p>Returned class includes namespace? (default=true)</p>"},{"location":"template/template-get-page-class/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Returned page class includes namespace</p>"},{"location":"template/template-set-icon/","title":"Template set icon","text":""},{"location":"template/template-set-icon/#set-the-icon-to-use-with-this-template","title":"Set the icon to use with this template","text":""},{"location":"template/template-set-icon/#usage","title":"Usage","text":"<pre><code>$template-&gt;setIcon(string $icon);\n</code></pre>"},{"location":"template/template-set-icon/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>icon</code></p> <p>string</p> <p>Font-awesome icon name</p>"},{"location":"template/template-set-icon/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"textformatter/textformatter-format-value/","title":"Textformatter format value","text":""},{"location":"textformatter/textformatter-format-value/#format-the-given-text-string-with-page-and-field-provided","title":"Format the given text string with Page and Field provided.","text":"<p>Module developers may override this function completely when providing your own text formatter. No need to call the parent.</p>"},{"location":"textformatter/textformatter-format-value/#usage","title":"Usage","text":"<pre><code>$textformatter-&gt;formatValue(Page $page, Field $field, $value);\n</code></pre>"},{"location":"textformatter/textformatter-format-value/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code></p> <p>Page</p> <p><code>field</code></p> <p>Field</p> <p><code>value</code></p> <p>string, mixed</p> <p>Value is provided as a reference, so is modified directly (not returned).</p>"},{"location":"textformatter/textformatter-format/","title":"Textformatter format","text":""},{"location":"textformatter/textformatter-format/#format-the-given-text-string-outside-of-specific-page-or-field-context","title":"Format the given text string, outside of specific Page or Field context.","text":""},{"location":"textformatter/textformatter-format/#usage","title":"Usage","text":"<pre><code>$textformatter-&gt;format(string $str);\n</code></pre>"},{"location":"textformatter/textformatter-format/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p> <p>String is provided as a reference, so is modified directly (not returned).</p>"},{"location":"user/user-add-role/","title":"User add role","text":""},{"location":"user/user-add-role/#add-role-to-this-user","title":"Add Role to this user","text":"<p>This is the same as <code>$user-&gt;roles-&gt;add($role)</code> except this one will also accept ID or name.</p>"},{"location":"user/user-add-role/#example","title":"Example","text":"<pre><code>// Add the \"editor\" role to the $user\n$user-&gt;addRole('editor');\n$user-&gt;save();\n</code></pre>"},{"location":"user/user-add-role/#usage","title":"Usage","text":"<pre><code>$bool = $user-&gt;addRole($role);\n</code></pre>"},{"location":"user/user-add-role/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>role</code></p> <p>string, int, Role</p> <p>May be Role name, object, or ID.</p>"},{"location":"user/user-add-role/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>Returns false if role not recognized, true otherwise</p>"},{"location":"user/user-get-permissions/","title":"User get permissions","text":""},{"location":"user/user-get-permissions/#get-this-users-permissions-optionally-within-the-context-of-a-page","title":"Get this user\u2019s permissions, optionally within the context of a Page.","text":""},{"location":"user/user-get-permissions/#example","title":"Example","text":"<pre><code>// Get all permissions the user has across their roles\n$permissions = $user-&gt;getPermissions();\n\n// Get all permissions the user has for $page\n$permissions = $user-&gt;getPermissions($page);\n</code></pre>"},{"location":"user/user-get-permissions/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $user-&gt;getPermissions();\n\n// usage with all arguments\n$items = $user-&gt;getPermissions(Page $page = null);\n</code></pre>"},{"location":"user/user-get-permissions/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>page</code> (optional)</p> <p>Page</p> <p>Optional page to check against</p>"},{"location":"user/user-get-permissions/#return-value","title":"Return value","text":"<p><code>PageArray</code></p> <p>of Permission objects</p>"},{"location":"user/user-get/","title":"User get","text":""},{"location":"user/user-get/#get-value","title":"Get value","text":"<p>This method can accept a simple property name, and also much more:</p> <ul> <li>You can retrieve a value using either <code>$page-&gt;get('property');</code> or <code>$page-&gt;property</code>.</li> <li>Get the first populated property by specifying multiple properties separated by a pipe, i.e. <code>headline|title</code>.</li> <li>Get multiple properties in a string by specifying a string <code>{property}</code> tags, i.e. <code>{title}: {summary}</code>.</li> <li>Specify a selector string to get the first matching child page, i.e. <code>created&gt;=today</code>.</li> <li>This method can also retrieve sub-properties of object properties, i.e. <code>parent.title</code>.</li> <li>To get a guaranteed iterable value, append <code>[]</code> to the key, i.e. <code>$page-&gt;get('name[]')</code>. 3.0.205+</li> </ul>"},{"location":"user/user-get/#example","title":"Example","text":"<pre><code>// retrieve the title using get\u2026\n$title = $page-&gt;get('title');\n\n// \u2026or retrieve using direct access\n$title = $page-&gt;title;\n\n// retrieve headline if populated, otherwise title\n$headline = $page-&gt;get('headline|title');\n\n// retrieve title, created date, and summary, formatted in a string\n$str = $page-&gt;get('{createdStr}: {title} - {summary}');\n\n// example of getting a sub-property: title of parent page\n$title = $page-&gt;get('parent.title');\n\n// all following features are supported in 3.0.205+\n\n// get value guaranteed to be iterable (array, WireArray, or derived)\n$images = $page-&gt;get('image[]');\n$categories = $page-&gt;get('category[]');\n\n// get item by position/index, returns 1 item whether field is single or multi value\n$file = $page-&gt;get('files[0]'); // get first file  (or null if files is empty)\n$file = $page-&gt;get('files.first); // same as above\n$file = $page-&gt;get('files.last'); // get last file\n$file = $page-&gt;get('files[1]'); // get 2nd file (or null if there isn't one)\n\n// get titles from Page reference field categories in an array\n$titles = $page-&gt;get('categories.title');  // array of titles\n$title = $page-&gt;get('categories[0].title'); // string of just first title\n\n// you can also use a selector in [brackets] for a filtered value\n// example: get categories with titles matching text 'design'\n$categories = $page-&gt;get('categories[title%=design]'); // PageArray\n$category = $page-&gt;get('categories[title%=design][0]'); // Page or null\n$titles = $page-&gt;get('categories[title%=design].title'); // array of strings\n$title = $page-&gt;get('categories[title%=design].title[0]'); // string or null\n</code></pre>"},{"location":"user/user-get/#usage","title":"Usage","text":"<pre><code>$mixed = $user-&gt;get(string $key);\n</code></pre>"},{"location":"user/user-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property, format string or selector, per the details above.</p>"},{"location":"user/user-get/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code></p> <p>Value of found property, or NULL if not found.</p>"},{"location":"user/user-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"user/user-has-permission/","title":"User has permission","text":""},{"location":"user/user-has-permission/#does-the-user-have-the-given-permission","title":"Does the user have the given permission?","text":"<ul> <li>Optionally accepts a <code>Page</code> or <code>Template</code> context for the permission.</li> <li>This method accounts for the user's permissions across all their roles.</li> </ul>"},{"location":"user/user-has-permission/#example","title":"Example","text":"<pre><code>if($user-&gt;hasPermission('page-publish')) {\n  // user has the page-publish permission in one of their roles\n}\nif($user-&gt;hasPermission('page-publish', $page)) {\n  // user has page-publish permission for $page\n}\n</code></pre>"},{"location":"user/user-has-permission/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $user-&gt;hasPermission($name);\n\n// usage with all arguments\n$bool = $user-&gt;hasPermission($name, $context = null);\n</code></pre>"},{"location":"user/user-has-permission/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string, Permission</p> <p>Permission name, object or id.</p> <p><code>context</code> (optional)</p> <p>Page, Template, bool, string</p> <p>Page or Template...</p> <ul> <li>or specify boolean true to return if user has permission OR if it was added at any template</li> <li>or specify string \"templates\" to return array of Template objects where user has permission</li> </ul>"},{"location":"user/user-has-permission/#return-value","title":"Return value","text":"<p><code>bool</code> <code>array</code></p>"},{"location":"user/user-has-role/","title":"User has role","text":""},{"location":"user/user-has-role/#does-this-user-have-the-given-role","title":"Does this user have the given Role?","text":""},{"location":"user/user-has-role/#example","title":"Example","text":"<pre><code>if($user-&gt;hasRole('editor')) {\n  // user has the editor role\n}\n</code></pre>"},{"location":"user/user-has-role/#usage","title":"Usage","text":"<pre><code>$bool = $user-&gt;hasRole($role);\n</code></pre>"},{"location":"user/user-has-role/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>role</code></p> <p>string, Role, int</p> <p>May be Role name, object or ID.</p>"},{"location":"user/user-has-role/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"user/user-has-tfa/","title":"User has tfa","text":""},{"location":"user/user-has-tfa/#does-user-have-two-factor-authentication-tfa-enabled-and-what-type","title":"Does user have two-factor authentication (Tfa) enabled? (and what type?)","text":"<ul> <li>Returns boolean false if not enabled.</li> <li>Returns string with Tfa module name (string) if enabled.</li> <li>When <code>$getInstance</code> argument is true, returns Tfa module instance rather than module name.</li> </ul> <p>The benefit of using this method is that it can identify if Tfa is enabled without fully initializing a Tfa module that would attach hooks, etc. So when you only need to know if Tfa is enabled for a user, this method is more efficient than accessing <code>$user-&gt;tfa_type</code>.</p> <p>When using <code>$getInstance</code> to return module instance, note that the module instance might not be initialized (hooks not added, etc.). To retrieve an initialized instance, you can get it from <code>$user-&gt;tfa_type</code> rather than calling this method.</p> <p>Available since version 3.0.162.</p>"},{"location":"user/user-has-tfa/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $user-&gt;hasTfa();\n\n// usage with all arguments\n$bool = $user-&gt;hasTfa(bool $getInstance = false);\n</code></pre>"},{"location":"user/user-has-tfa/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>getInstance</code> (optional)</p> <p>bool</p> <p>Get Tfa module instance when available? (default=false)</p>"},{"location":"user/user-has-tfa/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code> <code>Tfa</code></p>"},{"location":"user/user-is-guest/","title":"User is guest","text":""},{"location":"user/user-is-guest/#is-this-the-non-logged-in-guest-user","title":"Is this the non-logged in guest user?","text":""},{"location":"user/user-is-guest/#usage","title":"Usage","text":"<pre><code>$bool = $user-&gt;isGuest();\n</code></pre>"},{"location":"user/user-is-guest/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"users/users-get-current-user/","title":"Users get current user","text":""},{"location":"users/users-get-current-user/#returns-the-current-user-object","title":"Returns the current user object","text":""},{"location":"users/users-get-current-user/#usage","title":"Usage","text":"<pre><code>$user = $users-&gt;getCurrentUser();\n</code></pre>"},{"location":"users/users-get-current-user/#return-value","title":"Return value","text":"<p><code>User</code></p>"},{"location":"users/users-get-guest-user/","title":"Users get guest user","text":""},{"location":"users/users-get-guest-user/#get-the-guest-user-account","title":"Get the 'guest' user account","text":""},{"location":"users/users-get-guest-user/#usage","title":"Usage","text":"<pre><code>$user = $users-&gt;getGuestUser();\n</code></pre>"},{"location":"users/users-get-guest-user/#return-value","title":"Return value","text":"<p><code>User</code></p>"},{"location":"users/users-get/","title":"Users get","text":""},{"location":"users/users-get/#get-the-user-by-name-id-or-selector-string","title":"Get the user by name, ID or selector string","text":""},{"location":"users/users-get/#usage","title":"Usage","text":"<pre><code>$user = $users-&gt;get(string $selectorString);\n</code></pre>"},{"location":"users/users-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>selectorString</code></p> <p>string</p>"},{"location":"users/users-get/#return-value","title":"Return value","text":"<p><code>User</code> <code>NullPage</code> <code>null</code></p>"},{"location":"wire/wire-add-hook-before/","title":"Wire add hook before","text":""},{"location":"wire/wire-add-hook-before/#add-a-hook-to-be-executed-before-the-hooked-method","title":"Add a hook to be executed before the hooked method","text":"<ul> <li>Use a \"before\" hook when you have code that should execute before a hookable method executes.</li> <li>One benefit of using a \"before\" hook is that you can have it modify the arguments that are sent to the hookable method.</li> <li>This type of hook can also completely replace a hookable method if hook populates an <code>$event-&gt;replace</code> property. See the HookEvent class for details.</li> </ul>"},{"location":"wire/wire-add-hook-before/#example","title":"Example","text":"<pre><code>// Attach hook to a method in current object\n$this-&gt;addHookBefore('Page::path', $this, 'yourHookMethodName');\n\n// Attach hook to an inline function\n$this-&gt;addHookBefore('Page::path', function($event) { ... });\n\n// Attach hook to a procedural function\n$this-&gt;addHookBefore('Page::path', 'your_function_name');\n\n// Attach hook from single object instance ($page) to inline function\n$page-&gt;addHookBefore('path', function($event) { ... });\n</code></pre>"},{"location":"wire/wire-add-hook-before/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $wire-&gt;addHookBefore($method, $toObject);\n\n// usage with all arguments\n$string = $wire-&gt;addHookBefore($method, $toObject, $toMethod = null, array $options = []);\n</code></pre>"},{"location":"wire/wire-add-hook-before/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>method</code></p> <p>string, array</p> <p>Method to hook in one of the following formats (please omit 3 leading underscores):</p> <ul> <li><code>Class::method</code> - If hooking to all object instances of the class.</li> <li><code>method</code> - If hooking to a single object instance.</li> <li>Since 3.0.137 it may also be multiple methods to hook in CSV string or array.</li> </ul> <p><code>toObject</code></p> <p>object, null, callable</p> <p>Specify one of the following:</p> <ul> <li>Object instance to call <code>$toMethod</code> from (like <code>$this</code>).</li> <li>Inline function (closure) if providing implemention inline.</li> <li>Procedural function name, if hook is implemented by a procedural function.</li> <li>Null if you want to use the 3rd argument and don't need this argument.</li> </ul> <p><code>toMethod</code> (optional)</p> <p>string, array</p> <p>Method from $toObject, or function name to call on a hook event. This argument can be sustituted as the 2nd argument when the 2nd argument isn\u2019t needed, or it can be the $options argument.</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Array of options that can modify behavior:</p> <ul> <li><code>type</code> (string): May be either 'method' or 'property'. If property, then it will respond to $obj-&gt;property rather than $obj-&gt;method(). The default type is 'method'.</li> <li><code>priority</code> (int): A number determining the priority of a hook, where lower numbers are executed before higher numbers. The default priority is 100.</li> </ul>"},{"location":"wire/wire-add-hook-before/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>A special Hook ID (or CSV string of hook IDs) that should be retained if you need to remove the hook later.</p>"},{"location":"wire/wire-call-unknown/","title":"Wire call unknown","text":""},{"location":"wire/wire-call-unknown/#if-method-call-resulted-in-no-handler-this-hookable-method-is-called","title":"If method call resulted in no handler, this hookable method is called.","text":"<p>This standard implementation just throws an exception. This is a template method, so the reason it exists is so that other classes can override and provide their own handler. Classes that provide their own handler should not do a <code>parent::__callUnknown()</code> unless they also fail, as that will cause an exception to be thrown.</p> <p>If you want to override this method with a hook, see the example below.</p>"},{"location":"wire/wire-call-unknown/#example","title":"Example","text":"<pre><code>$wire-&gt;addHookBefore('Wire::callUnknown', function(HookEvent $event) {\n  // Get information about unknown method that was called\n  $methodObject = $event-&gt;object;\n  $methodName = $event-&gt;arguments(0); // string\n  $methodArgs = $event-&gt;arguments(1); // array\n  // The replace option replaces the method and blocks the exception\n  $event-&gt;replace = true;\n  // Now do something with the information you have, for example\n  // you might want to populate a value to $event-&gt;return if\n  // you want the unknown method to return a value.\n});\n</code></pre>"},{"location":"wire/wire-call-unknown/#usage","title":"Usage","text":"<pre><code>$mixed = $wire-&gt;callUnknown(string $method, array $arguments);\n</code></pre>"},{"location":"wire/wire-call-unknown/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>method</code></p> <p>string</p> <p>Requested method name</p> <p><code>arguments</code></p> <p>array</p> <p>Arguments provided</p>"},{"location":"wire/wire-call-unknown/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code></p> <p>Return value of method (if applicable)</p>"},{"location":"wire/wire-call-unknown/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"wire/wire-changed/","title":"Wire changed","text":""},{"location":"wire/wire-changed/#hookable-method-that-is-called-whenever-a-property-has-changed-while-change-tracking-is-enabled","title":"Hookable method that is called whenever a property has changed while change tracking is enabled.","text":"<ul> <li>Enables hooks to monitor changes to the object.</li> <li>Do not call this method directly, as the <code>Wire::trackChange()</code> method already does so.</li> <li>Descending classes should call <code>$this-&gt;trackChange('name', $oldValue, $newValue);</code> when a property they are tracking has changed.</li> </ul>"},{"location":"wire/wire-changed/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire-&gt;changed(string $what);\n\n// usage with all arguments\n$wire-&gt;changed(string $what, mixed $old = null, mixed $new = null);\n</code></pre>"},{"location":"wire/wire-changed/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>what</code></p> <p>string</p> <p>Name of property that changed</p> <p><code>old</code> (optional)</p> <p>mixed</p> <p>Previous value before change</p> <p><code>new</code> (optional)</p> <p>mixed</p> <p>New value</p>"},{"location":"wire/wire-get-changes/","title":"Wire get changes","text":""},{"location":"wire/wire-get-changes/#return-an-array-of-properties-that-have-changed-while-change-tracking-was-on","title":"Return an array of properties that have changed while change tracking was on.","text":""},{"location":"wire/wire-get-changes/#example","title":"Example","text":"<pre><code>// Get an array of changed field names\n$changes = $page-&gt;getChanges();\n</code></pre>"},{"location":"wire/wire-get-changes/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $wire-&gt;getChanges();\n\n// usage with all arguments\n$array = $wire-&gt;getChanges(bool $getValues = false);\n</code></pre>"},{"location":"wire/wire-get-changes/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>getValues</code> (optional)</p> <p>bool</p> <p>Specify one of the following, or omit for default setting.</p> <ul> <li><code>false</code> (bool): return array of changed property names (default setting).</li> <li><code>true</code> (bool): return an associative array containing an array of previous values, indexed by property name, oldest to newest. Requires Wire::trackChangesValues mode to be enabled.</li> <li><code>2</code> (int): Return array where both keys and values are changed property names.</li> </ul>"},{"location":"wire/wire-get-changes/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"wire/wire-get-instance-num/","title":"Wire get instance num","text":""},{"location":"wire/wire-get-instance-num/#get-this-wire-objects-instance-number","title":"Get this Wire object\u2019s instance number","text":"<ul> <li>This is a unique number among all other Wire (or derived) instances in the system.</li> <li>If this instance ID has not yet been set, this will set it.</li> <li>Note that this is different from the ProcessWire instance ID.</li> </ul>"},{"location":"wire/wire-get-instance-num/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $wire-&gt;getInstanceNum();\n\n// usage with all arguments\n$int = $wire-&gt;getInstanceNum(bool $getTotal = false);\n</code></pre>"},{"location":"wire/wire-get-instance-num/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>getTotal</code> (optional)</p> <p>bool</p> <p>Specify true to get the total quantity of Wire instances rather than this instance number.</p>"},{"location":"wire/wire-get-instance-num/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Instance number</p>"},{"location":"wire/wire-has-hook/","title":"Wire has hook","text":""},{"location":"wire/wire-has-hook/#returns-true-if-the-method-or-property-is-hooked-false-if-it-isnt","title":"Returns true if the method or property is hooked, false if it isn\u2019t.","text":"<ul> <li>This method checks for both static hooks and local hooks.</li> <li>Accepts a <code>method()</code> or <code>property</code> name as an argument.</li> <li>Class context is assumed to be the current class this method is called on.</li> <li>Also considers the class parents for hooks.</li> </ul>"},{"location":"wire/wire-has-hook/#example","title":"Example","text":"<pre><code>if($pages-&gt;hasHook('find()')) {\n  // the Pages::find() method is hooked\n}\n</code></pre>"},{"location":"wire/wire-has-hook/#usage","title":"Usage","text":"<pre><code>$bool = $wire-&gt;hasHook(string $name);\n</code></pre>"},{"location":"wire/wire-has-hook/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Method() name or property name:</p> <ul> <li>If checking for a hooked method, it should be in the form <code>method()</code>.</li> <li>If checking for a hooked property, it should be in the form <code>property</code>.</li> </ul>"},{"location":"wire/wire-has-hook/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if this class instance has the hook, false if not.</p>"},{"location":"wire/wire-has-hook/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - When you try to call it with a Class::something() type method, which is not supported.</li> </ul>"},{"location":"wire/wire-messages/","title":"Wire messages","text":""},{"location":"wire/wire-messages/#return-or-manage-messages-recorded-by-just-this-object-or-all-wire-objects","title":"Return or manage messages recorded by just this object or all Wire objects","text":"<p>This method returns and manages messages that were previously set by <code>Wire::message()</code>.</p>"},{"location":"wire/wire-messages/#example","title":"Example","text":"<pre><code>// Get messages for one object\n$messages = $obj-&gt;messages();\n\n// Get first message in object\n$message = $obj-&gt;messages('first');\n\n// Get messages for all Wire objects\n$messages = $obj-&gt;messages('all');\n\n// Get and clear all messages for all Wire objects\n$messages = $obj-&gt;messages('clear all');\n</code></pre>"},{"location":"wire/wire-messages/#usage","title":"Usage","text":"<pre><code>// basic usage\n$notices = $wire-&gt;messages();\n\n// usage with all arguments\n$notices = $wire-&gt;messages($options = []);\n</code></pre>"},{"location":"wire/wire-messages/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>string, array</p> <p>One or more of array elements or space separated string of:</p> <ul> <li><code>first</code> - only first item will be returned</li> <li><code>last</code> - only last item will be returned</li> <li><code>all</code> - include all messages, including those beyond the scope of this object</li> <li><code>clear</code> - clear out all items that are returned from this method</li> <li><code>array</code> - return an array of strings rather than series of Notice objects.</li> <li><code>string</code> - return a newline separated string rather than array/Notice objects.</li> </ul>"},{"location":"wire/wire-messages/#return-value","title":"Return value","text":"<p><code>Notices</code> <code>array</code> <code>string</code></p> <p>Array of <code>NoticeMessage</code> messages, or string if last, first or str option was specified.</p>"},{"location":"wire/wire-remove-hook/","title":"Wire remove hook","text":""},{"location":"wire/wire-remove-hook/#given-a-hook-id-remove-the-hook","title":"Given a Hook ID, remove the hook","text":"<p>Once a hook is removed, it will no longer execute.</p>"},{"location":"wire/wire-remove-hook/#examples","title":"Examples","text":"<pre><code>// Add a hook\n$hookID = $pages-&gt;addHookAfter('find', function($event) {\n  // do something\n});\n\n// Remove the hook\n$pages-&gt;removeHook($hookID);\n\n// Hook function that removes itself\n$hookID = $pages-&gt;addHookAfter('find', function($event) {\n  // do something\n  $event-&gt;removeHook(null); // note: calling removeHook on $event\n});\n</code></pre>"},{"location":"wire/wire-remove-hook/#usage","title":"Usage","text":"<pre><code>$wire-&gt;removeHook($hookId);\n</code></pre>"},{"location":"wire/wire-remove-hook/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>hookId</code></p> <p>string, array, null</p> <p>ID of hook to remove (ID is returned by the addHook() methods) Since 3.0.137 it may also be an array or CSV string of hook IDs to remove.</p>"},{"location":"wire/wire-remove-hook/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire/wire-set-track-changes/","title":"Wire set track changes","text":""},{"location":"wire/wire-set-track-changes/#turn-change-tracking-on-or-off","title":"Turn change tracking ON or OFF","text":""},{"location":"wire/wire-set-track-changes/#example","title":"Example","text":"<pre><code>// Enable change tracking\n$page-&gt;setTrackChanges(true);\n\n// Disable change tracking\n$page-&gt;setTrackChanges(false);\n\n// Enable change tracking and remember values\n$page-&gt;setTrackChanges(Wire::trackChangesValues);\n$page-&gt;setTrackChanges(true);\n</code></pre>"},{"location":"wire/wire-set-track-changes/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire-&gt;setTrackChanges();\n\n// usage with all arguments\n$wire-&gt;setTrackChanges($trackChanges = true);\n</code></pre>"},{"location":"wire/wire-set-track-changes/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>trackChanges</code> (optional)</p> <p>bool, int</p> <p>Specify one of the following:</p> <ul> <li><code>true</code> (bool): Enables change tracking.</li> <li><code>false</code> (bool): Disables change tracking</li> <li><code>Wire::trackChangesOn</code> (constant): Enables change tracking (same as specifying boolean true).</li> <li><code>Wire::trackChangesValues</code> (constant): Enables tracking of changed values when change tracking is already on. This uses more memory since it keeps previous values, so it is not enabled by default. Once enabled, the setting will persist through boolean true|false arguments.</li> </ul>"},{"location":"wire/wire-set-track-changes/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire/wire-untrack-change/","title":"Wire untrack change","text":""},{"location":"wire/wire-untrack-change/#untrack-a-change-to-a-property-in-this-object","title":"Untrack a change to a property in this object","text":""},{"location":"wire/wire-untrack-change/#usage","title":"Usage","text":"<pre><code>$wire-&gt;untrackChange(string $what);\n</code></pre>"},{"location":"wire/wire-untrack-change/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>what</code></p> <p>string</p> <p>Name of property that you want to remove its change being tracked</p>"},{"location":"wire/wire-untrack-change/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire/wire-warning/","title":"Wire warning","text":""},{"location":"wire/wire-warning/#record-a-warning-error-message-in-the-system-wide-notices","title":"Record a warning error message in the system-wide notices.","text":"<p>This method automatically identifies the warning as coming from this class.</p>"},{"location":"wire/wire-warning/#example","title":"Example","text":"<pre><code>$this-&gt;warning(\"This is the notice text\");\n$this-&gt;warning(\"This notice is also logged\", true);\n$this-&gt;warning(\"This notice is only shown in debug mode\", Notice::debug);\n$this-&gt;warning(\"This notice allows &lt;em&gt;markup&lt;/em&gt;\", Notice::allowMarkup);\n$this-&gt;warning(\"Notice using multiple flags\", Notice::debug | Notice::logOnly);\n</code></pre>"},{"location":"wire/wire-warning/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire-&gt;warning($text);\n\n// usage with all arguments\n$wire-&gt;warning($text, $flags = 0);\n</code></pre>"},{"location":"wire/wire-warning/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>text</code></p> <p>string, array, Wire</p> <p>Text to include in the notice</p> <p><code>flags</code> (optional)</p> <p>int, bool, string</p> <p>Optional flags to alter default behavior:</p> <ul> <li><code>Notice::admin</code> (constant): Show notice only if user is in the admin.</li> <li><code>Notice::allowMarkdown</code> (constant): Allow basic markdown and bracket markup (see $sanitizer-&gt;entitiesMarkdown()).</li> <li><code>Notice::allowMarkup</code> (constant): Indicates notice should allow the use of HTML markup tags.</li> <li><code>Notice::debug</code> (constant): Indicates notice should only be shown when debug mode is active.</li> <li><code>Notice::log</code> (constant): Indicates notice should also be logged.</li> <li><code>Notice::logOnly</code> (constant): Indicates notice should only be logged.</li> <li><code>Notice::login</code> (constant): Show notice only if it will be seen by a logged-in user.</li> <li><code>Notice::noGroup</code> (constant): Indicates notice should not group with others of the same type (where supported).</li> <li><code>Notice::prepend</code> (constant): Indicates notice should prepend rather than append.</li> <li><code>Notice::superuser</code> (constant): Show notice only if current user is a superuser.</li> <li><code>true</code> (boolean): Shortcut for the <code>Notice::log</code> constant.</li> <li>In 3.0.149+ you may also specify a space-separated string of flag names, i.e. \"admin log noGroup\".</li> </ul>"},{"location":"wire/wire-warning/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire/wire-warning/#see-also","title":"See Also","text":"<ul> <li>Wire::warnings()</li> <li>Wire::message()</li> <li>Wire::error()</li> </ul>"},{"location":"wire/wire-wire/","title":"Wire wire","text":""},{"location":"wire/wire-wire/#get-an-api-variable-create-an-api-variable-or-inject-dependencies","title":"Get an API variable, create an API variable, or inject dependencies.","text":"<p>This method provides the following:</p> <ul> <li> <p>Access to API variables: <code>$pages = $this-&gt;wire('pages');</code></p> </li> <li> <p>Access to current ProcessWire instance: <code>$wire = $this-&gt;wire();</code></p> </li> <li> <p>Creating new API variables: <code>$this-&gt;wire('widgets', $widgets);</code></p> </li> <li> <p>Injection of dependencies to Wire derived objects: <code>$this-&gt;wire($widgets);</code></p> </li> </ul> <p>Most Wire derived objects also support access to API variables directly via <code>$this-&gt;apiVar</code>.</p> <p>There is also the <code>wire()</code> procedural function, which provides the same access to get API variables. Note however the procedural version does not support creating API variables or injection of dependencies.</p>"},{"location":"wire/wire-wire/#example","title":"Example","text":"<pre><code>// Get the 'pages' API variable\n$pages = $this-&gt;wire('pages');\n\n// Get the 'pages' API variable using alternate syntax\n$pages = $this-&gt;wire()-&gt;pages;\n\n// Get all API variables (returns a Fuel object)\n$all = $this-&gt;wire('all');\n\n// Get the current ProcessWire instance (no arguments)\n$wire = $this-&gt;wire();\n\n// Create a new API variable named 'widgets'\n$this-&gt;wire('widgets', $widgets);\n\n// Create new API variable and lock it so nothing can overwrite\n$this-&gt;wire('widgets', $widgets, true);\n\n// Alternate syntax for the two above\n$this-&gt;wire()-&gt;set('widgets', $widgets);\n$this-&gt;wire()-&gt;set('widgets', $widgets, true); // lock\n\n// Inject dependencies into Wire derived object\n$this-&gt;wire($widgets);\n\n// Inject dependencies during construct\n$newPage = $this-&gt;wire(new Page());\n</code></pre>"},{"location":"wire/wire-wire/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $wire-&gt;wire();\n\n// usage with all arguments\n$mixed = $wire-&gt;wire($name = '', $value = null, bool $lock = false);\n</code></pre>"},{"location":"wire/wire-wire/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code> (optional)</p> <p>string, object</p> <p>Name of API variable to retrieve, set, or omit to retrieve the master ProcessWire object.</p> <p><code>value</code> (optional)</p> <p>null, mixed</p> <p>Value to set if using this as a setter, otherwise omit.</p> <p><code>lock</code> (optional)</p> <p>bool</p> <p>When using as a setter, specify true if you want to lock the value from future changes (default=false).</p>"},{"location":"wire/wire-wire/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"wire/wire-wire/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code></li> </ul>"},{"location":"wire-array/wire-array-and/","title":"Wire array and","text":""},{"location":"wire-array/wire-array-and/#return-a-new-copy-of-this-wirearray-with-the-given-items-appended","title":"Return a new copy of this WireArray with the given item(s) appended","text":"<p>Primarily for syntax convenience in fluent interfaces.</p>"},{"location":"wire-array/wire-array-and/#example","title":"Example","text":"<pre><code>if($page-&gt;parents-&gt;and($page)-&gt;has($featured)) { \n  // either $page or its parents has the $featured page\n}\n</code></pre>"},{"location":"wire-array/wire-array-and/#usage","title":"Usage","text":"<pre><code>$items = $wireArray-&gt;and($item);\n</code></pre>"},{"location":"wire-array/wire-array-and/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>item</code></p> <p>Wire, WireArray</p> <p>Item(s) to append</p>"},{"location":"wire-array/wire-array-and/#return-value","title":"Return value","text":"<p><code>WireArray</code></p> <p>New WireArray containing this one and the given item(s).</p>"},{"location":"wire-array/wire-array-each/","title":"Wire array each","text":""},{"location":"wire-array/wire-array-each/#perform-an-action-upon-each-item-in-the-wirearray","title":"Perform an action upon each item in the WireArray","text":"<p>This is typically used to execute a function for each item, or to build a string or array from each item.</p>"},{"location":"wire-array/wire-array-each/#example","title":"Example","text":"<pre><code>// Generate navigation list of page children: \necho $page-&gt;children()-&gt;each(function($child) {\n  return \"&lt;li&gt;&lt;a href='$child-&gt;url'&gt;$child-&gt;title&lt;/a&gt;&lt;/li&gt;\";\n});\n\n// If 2 arguments specified to custom function(), 1st is the key, 2nd is the value\necho $page-&gt;children()-&gt;each(function($key, $child) {\n  return \"&lt;li&gt;&lt;a href='$child-&gt;url'&gt;$key: $child-&gt;title&lt;/a&gt;&lt;/li&gt;\";\n});\n\n// Same as above using different method (template string):\necho $page-&gt;children()-&gt;each(\"&lt;li&gt;&lt;a href='{url}'&gt;{title}&lt;/a&gt;&lt;/li&gt;\");\n\n// If WireArray used to hold non-object items, use only {key} and/or {value}\necho $items-&gt;each('&lt;li&gt;{key}: {value}&lt;/li&gt;');\n\n// Get an array of all \"title\" properties\n$titles = $page-&gt;children()-&gt;each(\"title\");\n\n// Get array of \"title\" and \"url\" properties. Returns an array\n// containing an associative array for each item with \"title\" and \"url\"\n$properties = $page-&gt;children()-&gt;each([\"title\", \"url\"]);\n</code></pre>"},{"location":"wire-array/wire-array-each/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $wireArray-&gt;each();\n\n// usage with all arguments\n$array = $wireArray-&gt;each($func = null);\n</code></pre>"},{"location":"wire-array/wire-array-each/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>func</code> (optional)</p> <p>callable, string, array, null</p> <p>Accepts any of the following:</p> <ol> <li>Callable function that each item will be passed to as first argument. If this function returns a string, it will be appended to that of the other items and the result returned by this each() method.</li> <li>Markup or text string with variable {tags} within it where each {tag} resolves to a property in each item. This each() method will return the concatenated result.</li> <li>A property name (string) common to items in this WireArray. The result will be returned as an array.</li> <li>An array of property names common to items in this WireArray. The result will be returned as an array of associative arrays indexed by property name.</li> </ol>"},{"location":"wire-array/wire-array-each/#return-value","title":"Return value","text":"<p><code>array</code> <code>null</code> <code>string</code> <code>WireArray</code></p> <p>Returns one of the following (related to numbers above):</p> <ul> <li><code>$this</code> (1a): WireArray if given a function that has no return values (if using option #1 in arguments).</li> <li><code>string</code> (1b): Containing the concatenated results of all function calls, if your function returns strings (if using option #1 in arguments).</li> <li><code>string</code> (2): Returns the processed and concatenated result (string) of all items in your template string (if using option #2 in arguments).</li> <li><code>array</code> (3): Returns regular PHP array of the property values for each item you requested (if using option #3 in arguments).</li> <li><code>array</code> (4): Returns an array of associative arrays containing the property values for each item you requested (if using option #4 in arguments).</li> </ul>"},{"location":"wire-array/wire-array-each/#see-also","title":"See Also","text":"<ul> <li>WireArray::implode()</li> <li>WireArray::explode()</li> </ul>"},{"location":"wire-array/wire-array-first/","title":"Wire array first","text":""},{"location":"wire-array/wire-array-first/#returns-the-first-item-in-the-wirearray-or-boolean-false-if-empty","title":"Returns the first item in the WireArray or boolean false if empty.","text":"<p>Note that this resets the internal WireArray pointer, which would affect other active iterations.</p>"},{"location":"wire-array/wire-array-first/#example","title":"Example","text":"<pre><code>$item = $items-&gt;first();\n</code></pre>"},{"location":"wire-array/wire-array-first/#usage","title":"Usage","text":"<pre><code>$wire = $wireArray-&gt;first();\n</code></pre>"},{"location":"wire-array/wire-array-first/#return-value","title":"Return value","text":"<p><code>Wire</code> <code>mixed</code> <code>bool</code></p>"},{"location":"wire-array/wire-array-get-iterator/","title":"Wire array get iterator","text":""},{"location":"wire-array/wire-array-get-iterator/#allows-iteration-of-the-wirearray","title":"Allows iteration of the WireArray.","text":"<ul> <li>Fulfills PHP's IteratorAggregate interface so that you can traverse the WireArray.</li> <li>No need to call this method directly, just use PHP's <code>foreach()</code> method on the WireArray.</li> </ul>"},{"location":"wire-array/wire-array-get-iterator/#example","title":"Example","text":"<pre><code>// Traversing a WireArray with foreach:\nforeach($items as $item) {\n  // ...\n}\n</code></pre>"},{"location":"wire-array/wire-array-get-iterator/#usage","title":"Usage","text":"<pre><code>$arrayObject = $wireArray-&gt;getIterator();\n</code></pre>"},{"location":"wire-array/wire-array-get-iterator/#return-value","title":"Return value","text":"<p><code>ArrayObject</code> <code>Wire</code></p> <p>[]</p>"},{"location":"wire-array/wire-array-last/","title":"Wire array last","text":""},{"location":"wire-array/wire-array-last/#returns-the-last-item-in-the-wirearray-or-boolean-false-if-empty","title":"Returns the last item in the WireArray or boolean false if empty.","text":"<p>Note that this resets the internal WireArray pointer, which would affect other active iterations.</p>"},{"location":"wire-array/wire-array-last/#example","title":"Example","text":"<pre><code>$item = $items-&gt;last();\n</code></pre>"},{"location":"wire-array/wire-array-last/#usage","title":"Usage","text":"<pre><code>$wire = $wireArray-&gt;last();\n</code></pre>"},{"location":"wire-array/wire-array-last/#return-value","title":"Return value","text":"<p><code>Wire</code> <code>mixed</code> <code>bool</code></p>"},{"location":"wire-cache/wire-cache-delete/","title":"Wire cache delete","text":""},{"location":"wire-cache/wire-cache-delete/#deleteclear-the-caches-identified-by-given-name-or-wildcard","title":"Delete/clear the cache(s) identified by given name or wildcard","text":""},{"location":"wire-cache/wire-cache-delete/#example","title":"Example","text":"<pre><code>// Delete cache named \"my-cache-name\"\n$cache-&gt;delete(\"my-cache-name\");\n\n// Delete all caches starting with \"my-\"\n$cache-&gt;delete(\"my-*\");\n</code></pre>"},{"location":"wire-cache/wire-cache-delete/#usage","title":"Usage","text":"<pre><code>$bool = $cache-&gt;delete(string $name);\n</code></pre>"},{"location":"wire-cache/wire-cache-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of cache, or partial name with wildcard (i.e. \"MyCache*\") to clear multiple caches.</p>"},{"location":"wire-cache/wire-cache-delete/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false if no cache was cleared</p>"},{"location":"wire-class-loader/wire-class-loader-add-namespace/","title":"Wire class loader add namespace","text":""},{"location":"wire-class-loader/wire-class-loader-add-namespace/#add-a-namespace-to-point-to-a-path-root","title":"Add a namespace to point to a path root","text":"<p>Multiple root paths may be specified for a single namespace by calling this method more than once.</p>"},{"location":"wire-class-loader/wire-class-loader-add-namespace/#example","title":"Example","text":"<pre><code>$classLoader-&gt;addNamespace('HelloWorld', '/path/to/that/');\n</code></pre>"},{"location":"wire-class-loader/wire-class-loader-add-namespace/#usage","title":"Usage","text":"<pre><code>$classLoader-&gt;addNamespace(string $namespace, string $path);\n</code></pre>"},{"location":"wire-class-loader/wire-class-loader-add-namespace/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>namespace</code></p> <p>string</p> <p><code>path</code></p> <p>string</p> <p>Full system path</p>"},{"location":"wire-class-loader/wire-class-loader-add-prefix/","title":"Wire class loader add prefix","text":""},{"location":"wire-class-loader/wire-class-loader-add-prefix/#map-a-class-prefix-to-a-path","title":"Map a class prefix to a path","text":"<p>This is used as a helper/fallback and class is not required to be in given path, but the path will be added as another to check when not found in namespace path(s).</p>"},{"location":"wire-class-loader/wire-class-loader-add-prefix/#usage","title":"Usage","text":"<pre><code>$classLoader-&gt;addPrefix(string $prefix, string $path);\n</code></pre>"},{"location":"wire-class-loader/wire-class-loader-add-prefix/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>prefix</code></p> <p>string</p> <p>Case sensitive prefix specific to class name (not namespace).</p> <p><code>path</code></p> <p>string</p>"},{"location":"wire-data/wire-data-and/","title":"Wire data and","text":""},{"location":"wire-data/wire-data-and/#take-the-current-item-and-append-the-given-items-returning-a-new-wirearray","title":"Take the current item and append the given item(s), returning a new WireArray","text":"<p>This is for syntactic convenience in fluent interfaces.</p>"},{"location":"wire-data/wire-data-and/#example","title":"Example","text":"<pre><code>if($page-&gt;and($page-&gt;parents)-&gt;has(\"featured=1\")) { \n   // page or one of its parents has a featured property with value of 1\n}\n</code></pre>"},{"location":"wire-data/wire-data-and/#usage","title":"Usage","text":"<pre><code>// basic usage\n$items = $wireData-&gt;and();\n\n// usage with all arguments\n$items = $wireData-&gt;and($items = null);\n</code></pre>"},{"location":"wire-data/wire-data-and/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>items</code> (optional)</p> <p>WireArray, WireData, string, null</p> <p>May be any of the following:</p> <ul> <li><code>WireData</code> object (or derivative)</li> <li><code>WireArray</code> object (or derivative)</li> <li>Name of any property from this object that returns one of the above.</li> <li>Omit argument to simply return this object in a WireArray</li> </ul>"},{"location":"wire-data/wire-data-and/#return-value","title":"Return value","text":"<p><code>WireArray</code></p> <p>Returns a WireArray of this object and the one(s) given.</p>"},{"location":"wire-data/wire-data-and/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If invalid argument supplied.</li> </ul>"},{"location":"wire-data/wire-data-data/","title":"Wire data data","text":""},{"location":"wire-data/wire-data-data/#get-or-set-a-low-level-data-value","title":"Get or set a low-level data value","text":"<p>Like get() or set() but will only get/set from the WireData's protected $data array. This is used to bypass any extra logic a class may have added to its get() or set() methods. The benefit of this method over get() is that it excludes API vars and potentially other things (defined by descending classes) that you may not want.</p> <ul> <li>To get a value, simply omit the $value argument.</li> <li>To set a value, specify both the $key and $value arguments.</li> <li>If you omit a $key and $value, this method will return the entire data array.</li> </ul>"},{"location":"wire-data/wire-data-data/#example","title":"Example","text":"<pre><code>// Set a property\n$item-&gt;data('some_property', 'some value');\n\n// Get the value of a previously set property\n$value = $item-&gt;data('some_property');\n</code></pre>"},{"location":"wire-data/wire-data-data/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $wireData-&gt;data();\n\n// usage with all arguments\n$array = $wireData-&gt;data($key = null, mixed $value = null);\n</code></pre>"},{"location":"wire-data/wire-data-data/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string, array</p> <p>Property you want to get or set, or associative array of properties you want to set.</p> <p><code>value</code> (optional)</p> <p>mixed</p> <p>Optionally specify a value if you want to set rather than get. Or Specify boolean TRUE if setting an array via $key and you want to overwrite any existing values (rather than merge).</p>"},{"location":"wire-data/wire-data-data/#return-value","title":"Return value","text":"<p><code>array</code> <code>WireData</code> <code>null</code></p> <p>Returns one of the following:</p> <ul> <li><code>mixed</code> - Actual value if getting a previously set value.</li> <li><code>null</code> - If you are attempting to get a value that has not been set.</li> <li><code>$this</code> - If you are setting a value.</li> </ul>"},{"location":"wire-data/wire-data-get-array/","title":"Wire data get array","text":""},{"location":"wire-data/wire-data-get-array/#returns-the-full-array-of-properties-set-to-this-object","title":"Returns the full array of properties set to this object","text":"<p>If descending classes also store data in other containers, they may want to override this method to include that data as well.</p>"},{"location":"wire-data/wire-data-get-array/#usage","title":"Usage","text":"<pre><code>$array = $wireData-&gt;getArray();\n</code></pre>"},{"location":"wire-data/wire-data-get-array/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returned array is associative and indexed by property name.</p>"},{"location":"wire-data/wire-data-get-dot/","title":"Wire data get dot","text":""},{"location":"wire-data/wire-data-get-dot/#get-a-property-via-dot-syntax-fieldsubfieldsubfield","title":"Get a property via dot syntax: field.subfield.subfield","text":"<p>Some classes descending WireData may choose to add a call to this as part of their get() method as a syntax convenience.</p>"},{"location":"wire-data/wire-data-get-dot/#example","title":"Example","text":"<pre><code>$value = $item-&gt;get(\"parent.title\");\n</code></pre>"},{"location":"wire-data/wire-data-get-dot/#usage","title":"Usage","text":"<pre><code>$mixed = $wireData-&gt;getDot(string $key);\n</code></pre>"},{"location":"wire-data/wire-data-get-dot/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property you want to retrieve in \"a.b\" or \"a.b.c\" format</p>"},{"location":"wire-data/wire-data-get-dot/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code></p> <p>Returns value if found or null if not</p>"},{"location":"wire-data/wire-data-get-iterator/","title":"Wire data get iterator","text":""},{"location":"wire-data/wire-data-get-iterator/#enables-the-object-data-properties-to-be-iterable-as-an-array","title":"Enables the object data properties to be iterable as an array","text":""},{"location":"wire-data/wire-data-get-iterator/#example","title":"Example","text":"<pre><code>foreach($item as $key =&gt; $value) {\n  // ...\n}\n</code></pre>"},{"location":"wire-data/wire-data-get-iterator/#usage","title":"Usage","text":"<pre><code>$arrayObject = $wireData-&gt;getIterator();\n</code></pre>"},{"location":"wire-data/wire-data-get-iterator/#return-value","title":"Return value","text":"<p><code>ArrayObject</code></p>"},{"location":"wire-data/wire-data-get/","title":"Wire data get","text":""},{"location":"wire-data/wire-data-get/#retrieve-the-value-for-a-previously-set-property-or-retrieve-an-api-variable","title":"Retrieve the value for a previously set property, or retrieve an API variable","text":"<ul> <li>If the given $key is an object, it will cast it to a string.</li> <li>If the given $key is a string with \"|\" pipe characters in it, it will try all till it finds a non-empty value.</li> <li>If given an API variable name, it will return that API variable unless the class has direct access API variables disabled.</li> </ul>"},{"location":"wire-data/wire-data-get/#example","title":"Example","text":"<pre><code>// Retrieve the value of a property\n$value = $item-&gt;get(\"some_property\");\n\n// Retrieve the value of the first non-empty property:\n$value = $item-&gt;get(\"property1|property2|property2\");\n\n// Retrieve a value using array access\n$value = $item[\"some_property\"];\n</code></pre>"},{"location":"wire-data/wire-data-get/#usage","title":"Usage","text":"<pre><code>$mixed = $wireData-&gt;get($key);\n</code></pre>"},{"location":"wire-data/wire-data-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, object</p> <p>Name of property you want to retrieve.</p>"},{"location":"wire-data/wire-data-get/#return-value","title":"Return value","text":"<p><code>mixed</code> <code>null</code></p> <p>Returns value of requested property, or null if the property was not found.</p>"},{"location":"wire-data/wire-data-get/#see-also","title":"See Also","text":"<ul> <li>WireData::set()</li> </ul>"},{"location":"wire-data/wire-data-has/","title":"Wire data has","text":""},{"location":"wire-data/wire-data-has/#does-this-object-have-the-given-property","title":"Does this object have the given property?","text":""},{"location":"wire-data/wire-data-has/#example","title":"Example","text":"<pre><code>if($item-&gt;has('some_property')) {\n  // the item has some_property\n}\n</code></pre>"},{"location":"wire-data/wire-data-has/#usage","title":"Usage","text":"<pre><code>$bool = $wireData-&gt;has(string $key);\n</code></pre>"},{"location":"wire-data/wire-data-has/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string</p> <p>Name of property you want to check.</p>"},{"location":"wire-data/wire-data-has/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if it has the property, false if not.</p>"},{"location":"wire-database-backup/wire-database-backup-error/","title":"Wire database backup error","text":""},{"location":"wire-database-backup/wire-database-backup-error/#add-an-error-and-return-last-error","title":"Add an error and return last error","text":""},{"location":"wire-database-backup/wire-database-backup-error/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $backup-&gt;error();\n\n// usage with all arguments\n$string = $backup-&gt;error(string $str = '');\n</code></pre>"},{"location":"wire-database-backup/wire-database-backup-error/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code> (optional)</p> <p>string</p> <p>If omitted, no error is added</p>"},{"location":"wire-database-backup/wire-database-backup-error/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-allow-transaction/","title":"Wire database p d o allow transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-allow-transaction/#allow-a-new-transaction-to-begin-right-now-ie-supported-and-not-already-in-one","title":"Allow a new transaction to begin right now? (i.e. supported and not already in one)","text":"<p>Returns combined result of supportsTransaction() === true and inTransaction() === false.</p> <p>Available since version 3.0.140.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-allow-transaction/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;allowTransaction();\n\n// usage with all arguments\n$bool = $database-&gt;allowTransaction(string $table = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-allow-transaction/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code> (optional)</p> <p>string</p> <p>Optional table that transaction will be for</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-allow-transaction/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-begin-transaction/","title":"Wire database p d o begin transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-begin-transaction/#initiates-a-transaction","title":"Initiates a transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-begin-transaction/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;beginTransaction();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-begin-transaction/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-close-connection/","title":"Wire database p d o close connection","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-close-connection/#close-the-pdo-connection","title":"Close the PDO connection","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-close-connection/#usage","title":"Usage","text":"<pre><code>$database-&gt;closeConnection();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/","title":"Wire database p d o column exists","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#does-the-given-column-exist-in-given-table","title":"Does the given column exist in given table?","text":"<p>Available since version 3.0.154.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#example","title":"Example","text":"<pre><code>// Standard usage:\nif($database-&gt;columnExists('pages', 'name')) {\n  echo \"The pages table has a 'name' column\";\n}\n\n// You can also bundle table and column together:\nif($database-&gt;columnExists('pages.name')) {\n  echo \"The pages table has a 'name' column\";\n}\n\n$exists = $database-&gt;columnExists('pages', 'name', true);\nif($exists) {\n  // associative array with indexes: Name, Type, Null, Key, Default, Extra\n  echo \"The pages table has a 'name' column and here is verbose info: \";\n  print_r($exists);\n}\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;columnExists(string $table);\n\n// usage with all arguments\n$bool = $database-&gt;columnExists(string $table, string $column = '', bool $getInfo = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p>Specify table name (or table and column name in format \"table.column\").</p> <p><code>column</code> (optional)</p> <p>string</p> <p>Specify column name (or omit or blank string if already specified in $table argument).</p> <p><code>getInfo</code> (optional)</p> <p>bool</p> <p>Return array of column info (with type info, etc.) rather than true when exists? (default=false) Note that the returned array is raw MySQL values from a SHOW COLUMNS command.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#return-value","title":"Return value","text":"<p><code>bool</code> <code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-column-exists/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireDatabaseException</code></li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-commit/","title":"Wire database p d o commit","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-commit/#commits-a-transaction","title":"Commits a transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-commit/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;commit();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-commit/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-code/","title":"Wire database p d o error code","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-code/#fetch-the-sqlstate-associated-with-the-last-operation-on-the-statement-handle","title":"Fetch the SQLSTATE associated with the last operation on the statement handle","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-code/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;errorCode();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-code/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-info/","title":"Wire database p d o error info","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-info/#fetch-extended-error-information-associated-with-the-last-operation-on-the-database-handle","title":"Fetch extended error information associated with the last operation on the database handle","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-info/#usage","title":"Usage","text":"<pre><code>$array = $database-&gt;errorInfo();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-error-info/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-col/","title":"Wire database p d o escape col","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-col/#sanitize-a-column-name-for-_a-za-z0-9","title":"Sanitize a column name for _a-zA-Z0-9","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-col/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;escapeCol(string $col);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-col/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>col</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-col/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-like/","title":"Wire database p d o escape like","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-like/#escape-a-string-value-plus-escape-characters-necessary-for-a-mysql-like-phrase","title":"Escape a string value, plus escape characters necessary for a MySQL 'LIKE' phrase","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-like/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;escapeLike(string $like);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-like/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>like</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-like/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-operator/","title":"Wire database p d o escape operator","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-operator/#sanitize-comparison-operator","title":"Sanitize comparison operator","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-operator/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;escapeOperator(string $operator);\n\n// usage with all arguments\n$string = $database-&gt;escapeOperator(string $operator, $operatorType = 0, string $default = '=');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-operator/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>operator</code></p> <p>string</p> <p><code>operatorType</code> (optional)</p> <p>bool, int, null</p> <p>Specify a WireDatabasePDO::operatorType* constant (default=operatorTypeComparison)</p> <p><code>default</code> (optional)</p> <p>string</p> <p>Default/fallback operator to return if given one is not valid (default='=')</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-operator/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-str/","title":"Wire database p d o escape str","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-str/#escape-a-string-value-same-as-database-quote-but-without-surrounding-quotes","title":"Escape a string value, same as $database-&gt;quote() but without surrounding quotes","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-str/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;escapeStr(string $str);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-str/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-str/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/","title":"Wire database p d o escape table col","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/#sanitize-a-tablecolumn-string-where-either-part-is-optional","title":"Sanitize a table.column string, where either part is optional","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;escapeTableCol(string $str);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table-col/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireDatabaseException</code></li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table/","title":"Wire database p d o escape table","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table/#sanitize-a-table-name-for-_a-za-z0-9","title":"Sanitize a table name for _a-zA-Z0-9","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;escapeTable(string $table);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p>String containing table name</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-escape-table/#return-value","title":"Return value","text":"<p><code>string</code></p> <p>Sanitized table name</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/","title":"Wire database p d o exec","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/#execute-an-sql-statement-string","title":"Execute an SQL statement string","text":"<p>If given a PDOStatement, this method behaves the same as the execute() method.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;exec($statement);\n\n// usage with all arguments\n$bool = $database-&gt;exec($statement, string $note = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>statement</code></p> <p>string, \\PDOStatement</p> <p><code>note</code> (optional)</p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/#return-value","title":"Return value","text":"<p><code>bool</code> <code>int</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-exec/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>\\PDOException</code></li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/","title":"$database->execute() method - ProcessWire API","text":"<p>URL Source: https://processwire.com/api/ref/wire-database-p-d-o/execute/</p> <p>Markdown Content: Execute a PDO statement, with retry and error handling</p> <p>Given a PDOStatement ($query) this method will execute the statement and return true or false as to whether it was successful.</p> <p>Unlike other PDO methods, this one (native to ProcessWire) will retry queries if they failed due to a lost connection. By default it will retry up to 3 times, but you can adjust this number as needed in the arguments.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/#example","title":"Example","text":"<pre><code>// prepare the query\n$query = $database-&gt;prepare(\"SELECT id, name FROM pages LIMIT 10\");\n// you can do the following, rather than native PDO $query-&gt;execute();\n$database-&gt;execute($query);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;execute(\\PDOStatement $query);\n\n// usage with all arguments\n$bool = $database-&gt;execute(\\PDOStatement $query, bool $throw = true, int $maxTries = 3);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/#arguments","title":"Arguments","text":"Name Type(s) Description <code>query</code> \\PDOStatement <code>throw</code> (optional) bool Whether or not to throw exception on query error (default=true) <code>maxTries</code> (optional) int Max number of times it will attempt to retry query on lost connection error <p>|</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on failure. Note if you want this, specify $throw=false in your arguments.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-execute/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>\\PDOException</code></li> </ul> <p>$database methods and properties</p> <p>API reference based on ProcessWire core version 3.0.244</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-attribute/","title":"Wire database p d o get attribute","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-attribute/#retrieve-a-database-connection-attribute","title":"Retrieve a database connection attribute","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-attribute/#usage","title":"Usage","text":"<pre><code>$mixed = $database-&gt;getAttribute(int $attribute);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-attribute/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>attribute</code></p> <p>int</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-attribute/#return-value","title":"Return value","text":"<p><code>mixed</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-charset/","title":"Wire database p d o get charset","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-charset/#get-current-database-charset-lowercase","title":"Get current database charset (lowercase)","text":"<p>Available since version 3.0.160.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-charset/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;getCharset();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-charset/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-columns/","title":"Wire database p d o get columns","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-columns/#get-all-columns-from-given-table","title":"Get all columns from given table","text":"<p>By default returns array of column names. If verbose option is true then it returns an array of arrays, each having 'name', 'type', 'null', 'default', and 'extra' keys, indicating the column name, column type, whether it can be null, what it\u2019s default value is, and any extra information, such as whether it is auto_increment. The verbose option also makes the return value indexed by column name (associative array).</p> <p>Available since version 3.0.180.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-columns/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $database-&gt;getColumns(string $table);\n\n// usage with all arguments\n$array = $database-&gt;getColumns(string $table, $verbose = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-columns/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p>Table name or or <code>table.column</code> to get for specific column (when combined with verbose=true)</p> <p><code>verbose</code> (optional)</p> <p>bool, int, string</p> <p>Include array of verbose information for each? (default=false)</p> <ul> <li>Omit or false (bool) to just get column names.</li> <li>True (bool) or 1 (int) to get a verbose array of information for each column, indexed by column name.</li> <li>2 (int) to get raw MySQL column information, indexed by column name (added 3.0.182).</li> <li>3 (int) to get column types as used in a CREATE TABLE statement (added 3.0.185).</li> <li>Column name (string) to get verbose array only for only that column (added 3.0.182).</li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-columns/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-engine/","title":"Wire database p d o get engine","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-engine/#get-current-database-engine-lowercase","title":"Get current database engine (lowercase)","text":"<p>Available since version 3.0.160.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-engine/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;getEngine();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-engine/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-indexes/","title":"Wire database p d o get indexes","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-indexes/#get-all-indexes-from-given-table","title":"Get all indexes from given table","text":"<p>By default it returns an array of index names. Specify true for the verbose option to get index <code>name</code>, <code>type</code> and <code>columns</code> (array) for each index.</p> <p>Available since version 3.0.182.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-indexes/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $database-&gt;getIndexes(string $table);\n\n// usage with all arguments\n$array = $database-&gt;getIndexes(string $table, $verbose = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-indexes/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p>Name of table to get indexes for or <code>table.index</code> (usually combined with verbose option).</p> <p><code>verbose</code> (optional)</p> <p>bool, int, string</p> <p>Include array of verbose information for each? (default=false)</p> <ul> <li>Omit or false (bool) to just get index names.</li> <li>True (bool) or 1 (int) to get a verbose array of information for each index, indexed by index name.</li> <li>2 (int) to get regular PHP array of raw MySQL index information.</li> <li>Index name (string) to get verbose array only for only that index.</li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-indexes/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-max-index-length/","title":"Wire database p d o get max index length","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-max-index-length/#get-max-length-allowed-for-a-fully-indexed-varchar-column-in-processwire","title":"Get max length allowed for a fully indexed varchar column in ProcessWire","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-max-index-length/#usage","title":"Usage","text":"<pre><code>$int = $database-&gt;getMaxIndexLength();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-max-index-length/#return-value","title":"Return value","text":"<p><code>int</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-primary-key/","title":"Wire database p d o get primary key","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-primary-key/#get-columns-or-info-for-given-tables-primary-keyindex","title":"Get column(s) or info for given table\u2019s primary key/index","text":"<p>By default it returns a string with the column name compromising the primary key, i.e. <code>col1</code>. If the primary key is multiple columns then it returns a CSV string, like <code>col1,col2,col3</code>.</p> <p>If you specify boolean <code>true</code> for the verbose option then it returns an simplified array of information about the primary key. If you specify integer <code>2</code> then it returns an array of raw MySQL SHOW INDEX information.</p> <p>Available since version 3.0.182.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-primary-key/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;getPrimaryKey(string $table);\n\n// usage with all arguments\n$string = $database-&gt;getPrimaryKey(string $table, $verbose = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-primary-key/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p><code>verbose</code> (optional)</p> <p>bool, int</p> <p>Get array of info rather than column(s) string? (default=false)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-primary-key/#return-value","title":"Return value","text":"<p><code>string</code> <code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-regex-engine/","title":"Wire database p d o get regex engine","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-regex-engine/#get-the-regular-expression-engine-used-by-database","title":"Get the regular expression engine used by database","text":"<p>Returns one of 'ICU' (MySQL 8.0.4+) or 'HenrySpencer' (earlier versions and MariaDB)</p> <p>Available since version 3.0.166.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-regex-engine/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;getRegexEngine();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-regex-engine/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-server-type/","title":"Wire database p d o get server type","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-server-type/#get-server-type-one-of-mysql-maridb-percona-etc","title":"Get server type, one of MySQL, MariDB, Percona, etc.","text":"<p>Available since version 3.0.185.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-server-type/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;getServerType();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-server-type/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-stopwords/","title":"Wire database p d o get stopwords","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-stopwords/#get-all-fulltext-stopwords-for-database-engine","title":"Get all fulltext stopwords for database engine","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-stopwords/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $database-&gt;getStopwords();\n\n// usage with all arguments\n$array = $database-&gt;getStopwords(string $engine = '', bool $flip = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-stopwords/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>engine</code> (optional)</p> <p>string</p> <p>Specify DB engine of \"myisam\" or \"innodb\" or omit for current DB engine</p> <p><code>flip</code> (optional)</p> <p>bool</p> <p>Return flipped array where stopwords are array keys rather than values? for isset() use (default=false)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-stopwords/#return-value","title":"Return value","text":"<p><code>array</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-tables/","title":"Wire database p d o get tables","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-tables/#get-array-of-all-tables-in-this-database","title":"Get array of all tables in this database.","text":"<p>Note that this method caches its result unless you specify boolean false for the $allowCache argument.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-tables/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $database-&gt;getTables();\n\n// usage with all arguments\n$array = $database-&gt;getTables(bool $allowCache = true);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-tables/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>allowCache</code> (optional)</p> <p>bool</p> <p>Specify false if you don't want result to be cached or pulled from cache (default=true)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-tables/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Returns array of table names</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-time/","title":"Wire database p d o get time","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-time/#get-current-datetime-iso-8601-string-or-unix-timestamp-according-to-database","title":"Get current date/time ISO-8601 string or UNIX timestamp according to database","text":"<p>Available since version 3.0.183.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-time/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;getTime();\n\n// usage with all arguments\n$string = $database-&gt;getTime(bool $getTimestamp = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-time/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>getTimestamp</code> (optional)</p> <p>bool</p> <p>Get unix timestamp rather than ISO-8601 string? (default=false)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-time/#return-value","title":"Return value","text":"<p><code>string</code> <code>int</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/","title":"Wire database p d o get variable","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/#get-the-value-of-a-mysql-variable","title":"Get the value of a MySQL variable","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/#example","title":"Example","text":"<pre><code>// Get the minimum fulltext index word length\n$value = $database-&gt;getVariable('ft_min_word_len');\necho $value; // outputs \"4\"\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;getVariable(string $name);\n\n// usage with all arguments\n$string = $database-&gt;getVariable(string $name, bool $cache = true, bool $sub = true);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Name of MySQL variable you want to retrieve</p> <p><code>cache</code> (optional)</p> <p>bool</p> <p>Allow use of cached values? (default=true)</p> <p><code>sub</code> (optional)</p> <p>bool</p> <p>Allow substitution of MyISAM variable names to InnoDB equivalents when InnoDB is engine? (default=true)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-variable/#return-value","title":"Return value","text":"<p><code>string</code> <code>null</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-version/","title":"Wire database p d o get version","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-version/#get-mysqlmariadb-version","title":"Get MySQL/MariaDB version","text":"<p>Example return values:</p> <ul> <li>5.7.23</li> <li>10.1.34-MariaDB</li> </ul> <p>Available since version 3.0.166.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-version/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;getVersion();\n\n// usage with all arguments\n$string = $database-&gt;getVersion(bool $getNumberOnly = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-version/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>getNumberOnly</code> (optional)</p> <p>bool</p> <p>Get only version number, exclude any vendor specific suffixes? (default=false) 3.0.185+</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-get-version/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-in-transaction/","title":"Wire database p d o in transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-in-transaction/#checks-if-inside-a-transaction","title":"Checks if inside a transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-in-transaction/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;inTransaction();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-in-transaction/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/","title":"Wire database p d o index exists","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/#does-table-have-an-index-with-given-name","title":"Does table have an index with given name?","text":"<p>Available since version 3.0.182.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/#example","title":"Example","text":"<pre><code>// simple index check\nif($database-&gt;indexExists('my_table', 'my_index')) {\n  // index named my_index exists for my_table\n}\n\n// index check and get array of info if it exists\n$info = $database-&gt;indexExists('my_table', 'my_index', true);\nif($info) {\n  // info is raw array of information about index from MySQL\n} else {\n  // index does not exist\n}\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;indexExists(string $table, string $indexName);\n\n// usage with all arguments\n$bool = $database-&gt;indexExists(string $table, string $indexName, bool $getInfo = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p><code>indexName</code></p> <p>string</p> <p><code>getInfo</code> (optional)</p> <p>bool</p> <p>Return arrays of index information rather than boolean true? (default=false) Note that the verbose arrays are the raw MySQL return values from a SHOW INDEX command.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-index-exists/#return-value","title":"Return value","text":"<p><code>bool</code> <code>array</code></p> <p>Returns one of the following:</p> <ul> <li><code>false</code>: if index does not exist (regardless of $getInfo argument).</li> <li><code>true</code>: if index exists and $getInfo argument is omitted or false.</li> <li><code>array</code>: array of arrays with verbose information if index exists and $getInfo argument is true.</li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/","title":"Wire database p d o is operator","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/#is-the-given-string-a-database-comparison-operator","title":"Is the given string a database comparison operator?","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/#example","title":"Example","text":"<pre><code>if($database-&gt;isOperator('&gt;=')) {\n  // given string is a valid database operator\n} else {\n  // not a valid database operator\n}\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;isOperator(string $str);\n\n// usage with all arguments\n$bool = $database-&gt;isOperator(string $str, $operatorType = 2, bool $get = false);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p> <p>1-2 character operator to test</p> <p><code>operatorType</code> (optional)</p> <p>bool, null, int</p> <p>Specify a WireDatabasePDO::operatorType* constant (3.0.162+), or any one of the following (3.0.143+):</p> <ul> <li><code>NULL</code>: allow all operators (default value if not specified)</li> <li><code>FALSE</code>: allow only comparison operators</li> <li><code>TRUE</code>: allow only bitwise operators</li> </ul> <p><code>get</code> (optional)</p> <p>bool</p> <p>Return the operator rather than true, when valid? (default=false) Added 3.0.162</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-operator/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True if valid, false if not</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-stopword/","title":"Wire database p d o is stopword","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-stopword/#is-given-word-a-fulltext-stopword-for-database-engine","title":"Is given word a fulltext stopword for database engine?","text":"<p>Available since version 3.0.160.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-stopword/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;isStopword(string $word);\n\n// usage with all arguments\n$bool = $database-&gt;isStopword(string $word, string $engine = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-stopword/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>word</code></p> <p>string</p> <p><code>engine</code> (optional)</p> <p>string</p> <p>DB engine ('myisam' or 'innodb') or omit for current engine</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-is-stopword/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-last-insert-id/","title":"Wire database p d o last insert id","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-last-insert-id/#returns-the-id-of-the-last-inserted-row-or-sequence-value","title":"Returns the ID of the last inserted row or sequence value","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-last-insert-id/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;lastInsertId();\n\n// usage with all arguments\n$string = $database-&gt;lastInsertId($name = null);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-last-insert-id/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code> (optional)</p> <p>string, null</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-last-insert-id/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-pdo/","title":"Wire database p d o pdo","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-pdo/#return-the-actual-current-pdo-connection-instance","title":"Return the actual current PDO connection instance","text":"<p>If connection is lost, this will restore it automatically.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-pdo/#usage","title":"Usage","text":"<pre><code>// basic usage\n$pDO = $database-&gt;pdo();\n\n// usage with all arguments\n$pDO = $database-&gt;pdo($type = null);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-pdo/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>type</code> (optional)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-pdo/#return-value","title":"Return value","text":"<p><code>PDO</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-prepare/","title":"Wire database p d o prepare","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-prepare/#prepare-an-sql-statement-for-accepting-bound-parameters","title":"Prepare an SQL statement for accepting bound parameters","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-prepare/#usage","title":"Usage","text":"<pre><code>// basic usage\n$pDOStatement = $database-&gt;prepare(string $statement);\n\n// usage with all arguments\n$pDOStatement = $database-&gt;prepare(string $statement, $driver_options = [], string $note = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-prepare/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>statement</code></p> <p>string</p> <p><code>driver_options</code> (optional)</p> <p>array, string, bool</p> <p>Optionally specify one of the following:</p> <ul> <li>Boolean true for WireDatabasePDOStatement rather than PDOStatement (also assumed when debug mode is on) 3.0.162+</li> <li>Driver options array</li> <li>or you may specify the $note argument here</li> </ul> <p><code>note</code> (optional)</p> <p>string</p> <p>Debug notes to save with query in debug mode</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-prepare/#return-value","title":"Return value","text":"<p><code>PDOStatement</code> <code>WireDatabasePDOStatement</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query-log/","title":"Wire database p d o query log","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-query-log/#log-a-query-startstop-query-logging-or-return-logged-queries","title":"Log a query, start/stop query logging, or return logged queries","text":"<ul> <li>To log a query, provide the $sql argument containing the query (string).</li> <li>To retrieve the query log, call this method with no arguments.</li> <li>Note the core only populates the query log when <code>$config-&gt;debug</code> mode is active.</li> <li>Specify boolean true for $sql argument to reset and start query logging (3.0.173+)</li> <li>Specify boolean false for $sql argument to stop query logging (3.0.173+)</li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query-log/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $database-&gt;queryLog();\n\n// usage with all arguments\n$array = $database-&gt;queryLog($sql = '', string $note = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query-log/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>sql</code> (optional)</p> <p>string, bool</p> <p>Query (string) to log, boolean true to reset/start query logging, boolean false to stop query logging</p> <p><code>note</code> (optional)</p> <p>string</p> <p>Any additional debugging notes about the query</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query-log/#return-value","title":"Return value","text":"<p><code>array</code> <code>bool</code></p> <p>Returns query log array, boolean true on success, boolean false if not</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query/","title":"Wire database p d o query","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-query/#executes-an-sql-statement-returning-a-result-set-as-a-pdostatement-object","title":"Executes an SQL statement, returning a result set as a PDOStatement object","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-query/#usage","title":"Usage","text":"<pre><code>// basic usage\n$pDOStatement = $database-&gt;query(string $statement);\n\n// usage with all arguments\n$pDOStatement = $database-&gt;query(string $statement, string $note = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>statement</code></p> <p>string</p> <p><code>note</code> (optional)</p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-query/#return-value","title":"Return value","text":"<p><code>PDOStatement</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-quote/","title":"Wire database p d o quote","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-quote/#quote-and-escape-a-string-value","title":"Quote and escape a string value","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-quote/#usage","title":"Usage","text":"<pre><code>$string = $database-&gt;quote(string $str);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-quote/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>str</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-quote/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/","title":"Wire database p d o rename column","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/#rename-a-table-column-without-changing-type","title":"Rename a table column without changing type","text":"<p>Available since version 3.0.185.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;renameColumn(string $table, string $oldName, string $newName);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p><code>oldName</code></p> <p>string</p> <p><code>newName</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-column/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>\\PDOException</code></li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/","title":"Wire database p d o rename columns","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/#rename-table-columns-without-changing-type","title":"Rename table columns without changing type","text":"<p>Available since version 3.0.185.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/#usage","title":"Usage","text":"<pre><code>$int = $database-&gt;renameColumns(string $table, array $columns);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p> <p><code>columns</code></p> <p>array</p> <p>Associative array with one or more of <code>[ 'old_name' =&gt; 'new_name' ]</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Number of columns renamed</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-rename-columns/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>\\PDOException</code></li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-roll-back/","title":"Wire database p d o roll back","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-roll-back/#rolls-back-a-transaction","title":"Rolls back a transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-roll-back/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;rollBack();\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-roll-back/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-set-attribute/","title":"Wire database p d o set attribute","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-set-attribute/#sets-an-attribute-on-the-database-handle","title":"Sets an attribute on the database handle","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-set-attribute/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;setAttribute(int $attribute, mixed $value);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-set-attribute/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>attribute</code></p> <p>int</p> <p><code>value</code></p> <p>mixed</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-set-attribute/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/","title":"Wire database p d o sql mode","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#get-sql-mode-set-sql-mode-add-to-existing-sql-mode-or-remove-from-existing-sql-mode","title":"Get SQL mode, set SQL mode, add to existing SQL mode, or remove from existing SQL mode","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#example","title":"Example","text":"<pre><code>// Get SQL mode\n$mode = $database-&gt;sqlMode();\n\n// Add an SQL mode\n$database-&gt;sqlMode('add', 'STRICT_TRANS_TABLES');\n\n// Remove SQL mode if version at least 5.7.0\n$database-&gt;sqlMode('remove', 'ONLY_FULL_GROUP_BY', '5.7.0');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $database-&gt;sqlMode();\n\n// usage with all arguments\n$string = $database-&gt;sqlMode(string $action = 'get', string $mode = '', string $minVersion = '', $pdo = null);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>action</code> (optional)</p> <p>string</p> <p>Specify \"get\", \"set\", \"add\" or \"remove\". (default=\"get\")</p> <p><code>mode</code> (optional)</p> <p>string</p> <p>Mode string or CSV string with SQL mode(s), i.e. \"STRICT_TRANS_TABLES,ONLY_FULL_GROUP_BY\". This argument should be omitted when using the \"get\" action.</p> <p><code>minVersion</code> (optional)</p> <p>string</p> <p>Make the given action only apply if MySQL version is at least $minVersion, i.e. \"5.7.0\".</p> <p><code>pdo</code> (optional)</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#return-value","title":"Return value","text":"<p><code>string</code> <code>bool</code></p> <p>Returns string in \"get\" action, boolean false if required version not present, or true otherwise.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-sql-mode/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - If given an invalid $action</li> </ul>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-supports-transaction/","title":"Wire database p d o supports transaction","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-supports-transaction/#are-transactions-available-with-current-db-engine-or-table","title":"Are transactions available with current DB engine (or table)?","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-supports-transaction/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $database-&gt;supportsTransaction();\n\n// usage with all arguments\n$bool = $database-&gt;supportsTransaction(string $table = '');\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-supports-transaction/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code> (optional)</p> <p>string</p> <p>Optionally specify a table to specifically check to that table</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-supports-transaction/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-table-exists/","title":"Wire database p d o table exists","text":""},{"location":"wire-database-p-d-o/wire-database-p-d-o-table-exists/#does-the-given-table-exist-in-this-database","title":"Does the given table exist in this database?","text":"<p>Available since version 3.0.133.</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-table-exists/#usage","title":"Usage","text":"<pre><code>$bool = $database-&gt;tableExists(string $table);\n</code></pre>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-table-exists/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>table</code></p> <p>string</p>"},{"location":"wire-database-p-d-o/wire-database-p-d-o-table-exists/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-date-time/wire-date-time-date/","title":"Wire date time date","text":""},{"location":"wire-date-time/wire-date-time-date/#format-a-date-using-php-date-strftime-or-other-special-strings-see-arguments","title":"Format a date, using PHP date(), strftime() or other special strings (see arguments).","text":"<p>This is designed to work the same way as PHP's <code>date()</code> but be able to accept any common format used in ProcessWire. This is helpful for reducing code in places where you might have logic determining when to use <code>date()</code>, <code>strftime()</code>, <code>wireRelativeTimeStr()</code> or some other date formatting function.</p>"},{"location":"wire-date-time/wire-date-time-date/#example","title":"Example","text":"<pre><code>// Output the current date/time in relative format\necho $datetime-&gt;date('relative');\n</code></pre>"},{"location":"wire-date-time/wire-date-time-date/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $datetime-&gt;date();\n\n// usage with all arguments\n$string = $datetime-&gt;date($format = '', $ts = null);\n</code></pre>"},{"location":"wire-date-time/wire-date-time-date/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>format</code> (optional)</p> <p>string, int</p> <p>Use one of the following:</p> <ul> <li>PHP date format</li> <li>PHP strftime format (detected by presence of a '%' somewhere in it)</li> <li><code>relative</code> for a relative date/time string.</li> <li><code>relative-</code> for a relative date/time string with no tense.</li> <li><code>rel</code> for an abbreviated relative date/time string.</li> <li><code>rel-</code> for an abbreviated relative date/time string with no tense.</li> <li><code>r</code> for an extra-abbreviated relative date/time string.</li> <li><code>r-</code> for an extra-abbreviated relative date/time string with no tense.</li> <li><code>ts</code> makes it return a unix timestamp</li> <li>blank string makes it use the system date format ($config-&gt;dateFormat)</li> <li>If given an integer and no second argument specified, it is assumed to be the second ($ts) argument.</li> </ul> <p><code>ts</code> (optional)</p> <p>int, string, null</p> <p>Optionally specify the date/time stamp or strtotime() compatible string. If not specified, current time is used.</p>"},{"location":"wire-date-time/wire-date-time-date/#return-value","title":"Return value","text":"<p><code>string</code> <code>bool</code></p> <p>Formatted date/time, or boolean false on failure</p>"},{"location":"wire-file-tools/wire-file-tools-exists/","title":"Wire file tools exists","text":""},{"location":"wire-file-tools/wire-file-tools-exists/#does-the-given-filelinkdir-exist","title":"Does the given file/link/dir exist?","text":"<p>Thie method accepts an <code>$options</code> argument that can be specified as an array or a string (space or comma separated). The examples here demonstrate usage as a string since it is the simplest for readability.</p> <ul> <li>This function may return false for symlinks pointing to non-existing files, unless you specify <code>link</code> as the <code>type</code>.</li> <li>Specifying <code>false</code> for the <code>readable</code> or <code>writable</code> argument disables the option from being used, it doesn\u2019t perform a NOT condition.</li> <li>The <code>writable</code> option may also be written as <code>writeable</code>, if preferred.</li> </ul> <p>Available since version 3.0.180.</p>"},{"location":"wire-file-tools/wire-file-tools-exists/#example","title":"Example","text":"<pre><code>// 1. check if exists\n$exists = $files-&gt;exists('/path/file.ext');\n\n// 2. check if exists and is readable (or writable)\n$exists = $files-&gt;exists('/path/file.ext', 'readable');\n$exists = $files-&gt;exists('/path/file.ext', 'writable');\n\n// 3. check if exists and is file, link or dir\n$exists = $files-&gt;exists('/path/file.ext', 'file');\n$exists = $files-&gt;exists('/path/file.ext', 'link');\n$exists = $files-&gt;exists('/path/file.ext', 'dir');\n\n// 4. check if exists and is writable file or dir\n$exists = $files-&gt;exists('/path/file.ext', 'writable file');\n$exists = $files-&gt;exists('/path/dir/', 'writable dir');\n\n// 5. check if exists and is readable and writable file\n$exists = $files-&gt;exists('/path/file.ext', 'readable writable file');\n</code></pre>"},{"location":"wire-file-tools/wire-file-tools-exists/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $files-&gt;exists(string $filename);\n\n// usage with all arguments\n$bool = $files-&gt;exists(string $filename, $options = '');\n</code></pre>"},{"location":"wire-file-tools/wire-file-tools-exists/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>filename</code></p> <p>string</p> <p><code>options</code> (optional)</p> <p>array, string</p> <p>Can be specified as array or string:</p> <ul> <li><code>type</code> (string): Verify it is of type: 'file', 'link', 'dir' (default='')</li> <li><code>readable</code> (bool): Verify it is readable? (default=false)</li> <li><code>writable</code> (bool): Also verify the file is writable? (default=false)</li> <li><code>writeable</code> (bool): Alias of writable (default=false)</li> <li>When specified as string, you can use any combination of the words: <code>readable, writable, file, link, dir</code> (separated by space or comma).</li> </ul>"},{"location":"wire-file-tools/wire-file-tools-exists/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-file-tools/wire-file-tools-exists/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given invalid or unrecognized $options</li> </ul>"},{"location":"wire-file-tools/wire-file-tools-file-get-contents/","title":"Wire file tools file get contents","text":""},{"location":"wire-file-tools/wire-file-tools-file-get-contents/#get-contents-of-file","title":"Get contents of file","text":"<p>This is the same as PHP\u2019s <code>file_get_contents()</code> except that the arguments are simpler and it may be preferable to use this in ProcessWire for future cases where the file system may be abstracted from the installation.</p> <p>Available since version 3.0.167.</p>"},{"location":"wire-file-tools/wire-file-tools-file-get-contents/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $files-&gt;fileGetContents(string $filename);\n\n// usage with all arguments\n$bool = $files-&gt;fileGetContents(string $filename, int $offset = 0, int $maxlen = 0);\n</code></pre>"},{"location":"wire-file-tools/wire-file-tools-file-get-contents/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>filename</code></p> <p>string</p> <p>Full path and filename to read</p> <p><code>offset</code> (optional)</p> <p>int</p> <p>The offset where the reading starts on the original stream. Negative offsets count from the end of the stream.</p> <p><code>maxlen</code> (optional)</p> <p>int</p> <p>Maximum length of data read. The default is to read until end of file is reached.</p>"},{"location":"wire-file-tools/wire-file-tools-file-get-contents/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p> <p>Returns the read data (string) or boolean false on failure.</p>"},{"location":"wire-file-tools/wire-file-tools-file-get-contents/#see-also","title":"See Also","text":"<ul> <li>WireFileTools::filePutContents()</li> </ul>"},{"location":"wire-file-tools/wire-file-tools-find/","title":"$files->find() method - ProcessWire API","text":"<p>URL Source: https://processwire.com/api/ref/wire-file-tools/find/</p> <p>Markdown Content: Find all files in the given $path recursively, and return a flat array of all found filenames</p> <p>Available since version 3.0.96.</p>"},{"location":"wire-file-tools/wire-file-tools-find/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $files-&gt;find(string $path);\n\n// usage with all arguments\n$array = $files-&gt;find(string $path, array $options = []);\n</code></pre>"},{"location":"wire-file-tools/wire-file-tools-find/#arguments","title":"Arguments","text":"Name Type(s) Description <code>path</code> string Path to start from (required). <code>options</code> (optional) array Options to affect what is returned (optional): <ul> <li><code>recursive</code> (int|bool): How many levels of subdirectories this method should descend into beyond the 1 given. Specify 1 to remain at the one directory level given, or 2+ to descend into subdirectories. (default=10) In 3.0.180+ you may also specify true for no limit, or false to disable descending into any subdirectories.</li> <li><code>extensions</code> (array|string): Only include files having these extensions, or omit to include all (default=[]). In 3.0.180+ the extensions argument may also be a string (space or comma separated).</li> <li><code>excludeDirNames</code> (array): Do not descend into directories having these names (default=[]).</li> <li><code>excludeHidden</code> (bool): Exclude hidden files? (default=false).</li> <li><code>allowDirs</code> (bool): Allow directories in returned files (except for '.' and '..')? Note that returned directories have a trailing slash. (default=false) 3.0.180+</li> <li><code>returnRelative</code> (bool): Make returned array have filenames relative to given start $path? (default=false)</li> </ul> <p>|</p>"},{"location":"wire-file-tools/wire-file-tools-find/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Flat array of filenames</p> <p>$files methods and properties</p> <p>API reference based on ProcessWire core version 3.0.244</p>"},{"location":"wire-file-tools/wire-file-tools-size/","title":"Wire file tools size","text":""},{"location":"wire-file-tools/wire-file-tools-size/#get-size-of-file-or-directory-in-bytes","title":"Get size of file or directory (in bytes)","text":"<p>Available since version 3.0.214.</p>"},{"location":"wire-file-tools/wire-file-tools-size/#usage","title":"Usage","text":"<pre><code>// basic usage\n$int = $files-&gt;size(string $path);\n\n// usage with all arguments\n$int = $files-&gt;size(string $path, $options = []);\n</code></pre>"},{"location":"wire-file-tools/wire-file-tools-size/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>path</code></p> <p>string</p> <p>File or directory path</p> <p><code>options</code> (optional)</p> <p>array, bool</p> <p>Options array, or boolean true for getString option:</p> <ul> <li><code>getString</code> (bool): Get string that summarizes bytes, kB, MB, etc.? (default=false)</li> </ul>"},{"location":"wire-file-tools/wire-file-tools-size/#return-value","title":"Return value","text":"<p><code>int</code> <code>string</code></p>"},{"location":"wire-http/wire-http-delete/","title":"Wire http delete","text":""},{"location":"wire-http/wire-http-delete/#send-a-delete-request-to-a-url","title":"Send a DELETE request to a URL","text":"<p>\u201cThe HTTP DELETE request method deletes the specified resource.\u201d More about DELETE</p> <p>Available since version 3.0.222.</p>"},{"location":"wire-http/wire-http-delete/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $http-&gt;delete(string $url);\n\n// usage with all arguments\n$bool = $http-&gt;delete(string $url, $data = [], array $options = []);\n</code></pre>"},{"location":"wire-http/wire-http-delete/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>url</code></p> <p>string</p> <p>URL to send to (including http:// or https://)</p> <p><code>data</code> (optional)</p> <p>array, string</p> <p>Optional associative array of data to send (if not already set before), or raw data to send (such as JSON string)</p> <p><code>options</code> (optional)</p> <p>array</p> <p>Optional options to modify default behavior, see the send() method for details.</p>"},{"location":"wire-http/wire-http-delete/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p> <p>False on failure or string of contents received on success.</p>"},{"location":"wire-http/wire-http-send-status-header/","title":"Wire http send status header","text":""},{"location":"wire-http/wire-http-send-status-header/#send-an-http-status-header","title":"Send an HTTP status header","text":"<p>Available since version 3.0.166.</p>"},{"location":"wire-http/wire-http-send-status-header/#usage","title":"Usage","text":"<pre><code>$http-&gt;sendStatusHeader($status);\n</code></pre>"},{"location":"wire-http/wire-http-send-status-header/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>status</code></p> <p>int, string</p> <p>Status code (i.e. '200') or code and text (i.e. '200 OK')</p>"},{"location":"wire-http/wire-http-set-data/","title":"Wire http set data","text":""},{"location":"wire-http/wire-http-set-data/#set-an-array-of-data-or-string-of-raw-data-to-send-with-next-getpostetc-request-overwriting-the-existing-data-or-rawdata","title":"Set an array of data, or string of raw data to send with next GET/POST/etc. request (overwriting the existing data or rawData)","text":""},{"location":"wire-http/wire-http-set-data/#usage","title":"Usage","text":"<pre><code>$http-&gt;setData($data);\n</code></pre>"},{"location":"wire-http/wire-http-set-data/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>data</code></p> <p>array, string</p> <p>Associative array of data or string of raw data</p>"},{"location":"wire-http/wire-http-set-data/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-input/wire-input-cookie/","title":"Wire input cookie","text":""},{"location":"wire-input/wire-input-cookie/#retrieve-a-named-cookie-variable-value-or-all-cookie-variables","title":"Retrieve a named COOKIE variable value or all COOKIE variables","text":"<p>Please see the cookie API reference page for additional documentation on how to get and set cookies and cookie options.</p> <p>Cookies are a form of user input, so always sanitize (and validate where appropriate) any values.</p> <p>The following optional features are available in ProcessWire version 3.0.125 and newer:</p> <ul> <li>Provide a sanitization method as the 2nd argument to include sanitization.</li> <li>Provide an array of valid values as the 2nd argument to limit input to those values.</li> <li>Provide a callback function that receives the value and returns a validated value.</li> <li>Provide a fallback value as the 3rd argument to use if value not present or invalid.</li> <li>Append \u201c[]\u201d to the 1st argument to always force return value to be an array, i.e \u201ccolors[]\u201d.</li> </ul> <p>Note that the <code>$valid</code> and <code>$fallback</code> arguments are only applicable if a <code>$key</code> argument is provided. See the <code>WireInput::get()</code> method for usage examples (get method works the same as cookie method).</p>"},{"location":"wire-input/wire-input-cookie/#example","title":"Example","text":"<pre><code>// setting cookies\n$input-&gt;cookie-&gt;foo = 'bar'; // set with default options (expires with session)\n$input-&gt;cookie-&gt;set('foo', 'bar'); // same as above\n$input-&gt;cookie-&gt;set('foo', 'bar', 86400); // expire after 86400 seconds (1 day)\n$input-&gt;cookie-&gt;set('foo', 'bar', [ 'age' =&gt; 86400, 'path' =&gt; $page-&gt;url ]);\n\n// getting cookies\n$val = $input-&gt;cookie-&gt;foo;\n$val = $input-&gt;cookie-&gt;get('foo'); // same as above\n$val = $input-&gt;cookie-&gt;text('foo'); // get and use text sanitizer\n\n// removing cookies\n$input-&gt;cookie-&gt;remove('foo');\n\n// getting cookie options\n$array = $input-&gt;cookie-&gt;options();\nprint_r($array); // see all options\n\n// setting cookie options (to use in next $input-&gt;cookie-&gt;set call)\n$input-&gt;cookie-&gt;options('age', 86400); // set default age to 1 day\n$input-&gt;cookie-&gt;options([ // set multiple options\n  'age' =&gt; 86400,\n  'path' =&gt; $page-&gt;url,\n  'domain' =&gt; 'www.domain.com',\n]);\n\n// setting default options (in /site/config.php):\n$config-&gt;cookieOptions = [\n  'age' =&gt; 604800, // 1 week\n  'httponly' =&gt; true, // make visible to PHP but not JS\n   // and so on\n];\n</code></pre>"},{"location":"wire-input/wire-input-cookie/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $input-&gt;cookie();\n\n// usage with all arguments\n$mixed = $input-&gt;cookie(string $key = '', $valid = null, $fallback = null);\n</code></pre>"},{"location":"wire-input/wire-input-cookie/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string</p> <p>Name of the COOKIE variable you want to retrieve.</p> <ul> <li>If populated, returns the value corresponding to the key or NULL if it doesn't exist.</li> <li>If blank, returns reference to the WireDataInput containing all COOKIE vars.</li> </ul> <p><code>valid</code> (optional)</p> <p>array, string, int, callable, null</p> <p>Omit for no validation/sanitization, or provide one of the following:</p> <ul> <li>String name of Sanitizer method to to sanitize value with before returning it.</li> <li>CSV string of multiple sanitizer names to process the value, in order.</li> <li>Array of allowed values (aka whitelist), where input value must be one of these, otherwise null (or fallback value) will returned. Values in the array may be any string or integer.</li> <li>Callback function to sanitize and validate the value.</li> <li>Integer if a specific number is the only allowed value other than fallback value (i.e. like a checkbox toggle).</li> </ul> <p><code>fallback</code> (optional)</p>"},{"location":"wire-input/wire-input-cookie/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code> <code>WireInputData</code></p> <p>Returns one of the following:</p> <ul> <li>If given no <code>$key</code> argument, returns <code>WireInputData</code> with all unsanitized COOKIE vars.</li> <li>If given no <code>$valid</code> argument, returns unsanitized value or NULL if not present.</li> <li>If given a Sanitizer name for <code>$valid</code> argument, returns value sanitized with that Sanitizer method (3.0.125+).</li> <li>If given an array of allowed values for <code>$valid</code> argument, returns value from that array if it was in the input, or null if not (3.0.125+).</li> <li>If given a callable function for <code>$valid</code> argument, returns the value returned by that function (3.0.125+).</li> <li>If given a <code>$fallback</code> argument, returns that value when it would otherwise return null (3.0.125+).</li> </ul>"},{"location":"wire-input/wire-input-cookie/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given unknown Sanitizer method for $valid argument</li> </ul>"},{"location":"wire-input/wire-input-get/","title":"Wire input get","text":""},{"location":"wire-input/wire-input-get/#retrieve-a-named-get-variable-value-or-all-get-variables-from-url-query-string","title":"Retrieve a named GET variable value, or all GET variables (from URL query string)","text":"<p>Always sanitize (and validate where appropriate) any values from user input.</p> <p>The following optional features are available in ProcessWire version 3.0.125 and newer:</p> <ul> <li>Provide a sanitization method as the 2nd argument to include sanitization.</li> <li>Provide an array of valid values as the 2nd argument to limit input to those values.</li> <li>Provide a callback function that receives the value and returns a validated value.</li> <li>Provide a fallback value as the 3rd argument to use if value not present or invalid.</li> <li>Append \u201c[]\u201d to the 1st argument to always force return value to be an array, i.e \u201ccolors[]\u201d.</li> </ul> <p>Note that the <code>$valid</code> and <code>$fallback</code> arguments are only applicable if a <code>$key</code> argument is provided.</p>"},{"location":"wire-input/wire-input-get/#example","title":"Example","text":"<pre><code>// Retrieve a \"q\" GET variable, sanitize and output\n// Example request URL: domain.com/path/to/page/?q=TEST\n$q = $input-&gt;get('q'); // retrieve value\n$q = $sanitizer-&gt;text($q); // sanitize input as 1-line text\necho $sanitizer-&gt;entities($q); // sanitize for output, outputs \"TEST\"\n\n// You can also combine $input and one $sanitizer call, replacing\n// the \"text\" method call with any $sanitizer method:\n$q = $input-&gt;get-&gt;text('q');\n\n// like the previous example, but specify sanitizer method as second argument (3.0.125+):\n$q = $input-&gt;get('q', 'text');\n\n// if you want more than one sanitizer, specify multiple in a CSV string (3.0.125+):\n$q = $input-&gt;get('q', 'text,entities');\n\n// you can provide a whitelist array of allowed values instead of a sanitizer method (3.0.125+):\n$color = $input-&gt;get('color', [ 'red', 'blue', 'green' ]);\n\n// an optional 3rd argument lets you specify a fallback value to use if valid value not present or\n// empty in input, and it will return this value rather than null/empty (3.0.125+):\n$qty = $input-&gt;get('qty', 'int', 1); // return 1 if no qty provided\n$color = $input-&gt;get('color', [ 'red', 'blue', 'green' ], 'red'); // return red if no color selected\n\n// you may optionally provide a callback function to sanitize/validate with (3.0.125+):\n$isActive = $input-&gt;get('active', function($val) { return $val ? true : false; });\n</code></pre>"},{"location":"wire-input/wire-input-get/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $input-&gt;get();\n\n// usage with all arguments\n$mixed = $input-&gt;get(string $key = '', $valid = null, $fallback = null);\n</code></pre>"},{"location":"wire-input/wire-input-get/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string</p> <p>Name of GET variable you want to retrieve.</p> <ul> <li>If populated, returns the value corresponding to the key or NULL if it doesn\u2019t exist.</li> <li>If blank, returns reference to the WireDataInput containing all GET vars.</li> </ul> <p><code>valid</code> (optional)</p> <p>array, string, int, callable, null</p> <p>Omit for no validation/sanitization, or provide one of the following (3.0.125+ only):</p> <ul> <li>String name of Sanitizer method to to sanitize value with before returning it.</li> <li>CSV string of multiple sanitizer names to process the value, in order.</li> <li>Array of allowed values (aka whitelist), where input value must be one of these, otherwise null (or fallback value) will returned. Values in the array may be any string or integer.</li> <li>Callback function to sanitize and validate the value.</li> <li>Integer if a specific number is the only allowed value other than fallback value (i.e. like a checkbox toggle).</li> </ul> <p><code>fallback</code> (optional)</p>"},{"location":"wire-input/wire-input-get/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code> <code>WireInputData</code></p> <p>Returns one of the following:</p> <ul> <li>If given no <code>$key</code> argument, returns <code>WireInputData</code> with all unsanitized GET vars.</li> <li>If given no <code>$valid</code> argument, returns unsanitized value or NULL if not present.</li> <li>If given a Sanitizer name for <code>$valid</code> argument, returns value sanitized with that Sanitizer method (3.0.125+).</li> <li>If given an array of allowed values for <code>$valid</code> argument, returns value from that array if it was in the input, or null if not (3.0.125+).</li> <li>If given a callable function for <code>$valid</code> argument, returns the value returned by that function (3.0.125+).</li> <li>If given a <code>$fallback</code> argument, returns that value when it would otherwise return null (3.0.125+).</li> </ul>"},{"location":"wire-input/wire-input-get/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given unknown Sanitizer method for $valid argument</li> </ul>"},{"location":"wire-input/wire-input-is/","title":"Wire input is","text":""},{"location":"wire-input/wire-input-is/#is-the-current-request-of-the-specified-type","title":"Is the current request of the specified type?","text":"<p>This is a more readable/shorter alias of <code>$input-&gt;requestMethod('type')</code> for syntax convenience. Internally, it determines the request type without accessing any input data, so it is efficient.</p> <p>Available since version 3.0.145.</p>"},{"location":"wire-input/wire-input-is/#example","title":"Example","text":"<pre><code>// The following are equivalent:\n$isPost = $input-&gt;is('post');\n$isPost = $input-&gt;requestMethod('post');\n</code></pre>"},{"location":"wire-input/wire-input-is/#usage","title":"Usage","text":"<pre><code>$bool = $input-&gt;is(string $method);\n</code></pre>"},{"location":"wire-input/wire-input-is/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>method</code></p> <p>string</p> <p>Specify one of: post, get, head, put, delete, options, patch (not case sensitive)</p>"},{"location":"wire-input/wire-input-is/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-input/wire-input-post/","title":"Wire input post","text":""},{"location":"wire-input/wire-input-post/#retrieve-a-named-post-variable-value-or-all-post-variables","title":"Retrieve a named POST variable value, or all POST variables","text":"<p>Always sanitize (and validate where appropriate) any values from user input.</p> <p>The following optional features are available in ProcessWire version 3.0.125 and newer:</p> <ul> <li>Provide a sanitization method as the 2nd argument to include sanitization.</li> <li>Provide an array of valid values as the 2nd argument to limit input to those values.</li> <li>Provide a callback function that receives the value and returns a validated value.</li> <li>Provide a fallback value as the 3rd argument to use if value not present or invalid.</li> <li>Append \u201c[]\u201d to the 1st argument to always force return value to be an array, i.e \u201ccolors[]\u201d.</li> </ul> <p>Note that the <code>$valid</code> and <code>$fallback</code> arguments are only applicable if a <code>$key</code> argument is provided.</p>"},{"location":"wire-input/wire-input-post/#example","title":"Example","text":"<pre><code>// Retrieve a \"comments\" POST variable, sanitize and output it\n$comments = $input-&gt;post('comments');\n$comments = $sanitizer-&gt;textarea($comments); // sanitize input as multi-line text with no HTML\necho $sanitizer-&gt;entities($comments); // sanitize for output\n\n// You can also combine $input and one $sanitizer call like this,\n// replacing \"text\" with name of any $sanitizer method:\n$comments = $input-&gt;post-&gt;textarea('comments');\n\n// like the previous example, but specify sanitizer method as second argument (3.0.125+):\n$comments = $input-&gt;post('comments', 'textarea');\n\n// if you want more than one sanitizer, specify multiple in a CSV string (3.0.125+):\n$comments = $input-&gt;post('comments', 'textarea,entities');\n\n// you can provide a whitelist array of allowed values instead of a sanitizer method (3.0.125+):\n$color = $input-&gt;post('color', [ 'red', 'blue', 'green' ]);\n\n// an optional 3rd argument lets you specify a fallback value to use if valid value not present or\n// empty in input, and it will return this value rather than null/empty (3.0.125+):\n$qty = $input-&gt;post('qty', 'int', 1); // return 1 if no qty provided\n$color = $input-&gt;post('color', [ 'red', 'blue', 'green' ], 'red'); // return red if no color selected\n\n// you may optionally provide a callback function to sanitize/validate with (3.0.125+):\n$isActive = $input-&gt;post('active', function($val) { return $val ? true : false; });\n</code></pre>"},{"location":"wire-input/wire-input-post/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $input-&gt;post();\n\n// usage with all arguments\n$mixed = $input-&gt;post(string $key = '', $valid = null, $fallback = null);\n</code></pre>"},{"location":"wire-input/wire-input-post/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string</p> <p>Name of POST variable you want to retrieve.</p> <ul> <li>If populated, returns the value corresponding to the key or NULL if it doesn't exist.</li> <li>If blank, returns reference to the WireDataInput containing all POST vars.</li> </ul> <p><code>valid</code> (optional)</p> <p>array, string, int, callable, null</p> <p>Omit for no validation/sanitization, or provide one of the following:</p> <ul> <li>String name of Sanitizer method to to sanitize value with before returning it.</li> <li>CSV string of multiple sanitizer names to process the value, in order.</li> <li>Array of allowed values (aka whitelist), where input value must be one of these, otherwise null (or fallback value) will returned. Values in the array may be any string or integer.</li> <li>Callback function to sanitize and validate the value.</li> <li>Integer if a specific number is the only allowed value other than fallback value (i.e. like a checkbox toggle).</li> </ul> <p><code>fallback</code> (optional)</p>"},{"location":"wire-input/wire-input-post/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code> <code>WireInputData</code></p> <p>Returns one of the following:</p> <ul> <li>If given no <code>$key</code> argument, returns <code>WireInputData</code> with all unsanitized POST vars.</li> <li>If given no <code>$valid</code> argument, returns unsanitized value or NULL if not present.</li> <li>If given a Sanitizer name for <code>$valid</code> argument, returns value sanitized with that Sanitizer method (3.0.125+).</li> <li>If given an array of allowed values for <code>$valid</code> argument, returns value from that array if it was in the input, or null if not (3.0.125+).</li> <li>If given a callable function for <code>$valid</code> argument, returns the value returned by that function (3.0.125+).</li> <li>If given a <code>$fallback</code> argument, returns that value when it would otherwise return null (3.0.125+).</li> </ul>"},{"location":"wire-input/wire-input-post/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given unknown Sanitizer method for $valid argument</li> </ul>"},{"location":"wire-input/wire-input-request-method/","title":"Wire input request method","text":""},{"location":"wire-input/wire-input-request-method/#return-the-current-request-method-ie-get-post-etc-or-blank-if-not-known","title":"Return the current request method (i.e. GET, POST, etc.) or blank if not known","text":"<p>Possible return values are:</p> <ul> <li>GET</li> <li>POST</li> <li>HEAD</li> <li>PUT</li> <li>DELETE</li> <li>OPTIONS</li> <li>or blank if not known</li> </ul> <p>Available since version 3.0.39.</p>"},{"location":"wire-input/wire-input-request-method/#usage","title":"Usage","text":"<pre><code>// basic usage\n$string = $input-&gt;requestMethod();\n\n// usage with all arguments\n$string = $input-&gt;requestMethod(string $method = '');\n</code></pre>"},{"location":"wire-input/wire-input-request-method/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>method</code> (optional)</p> <p>string</p> <p>Optionally enter the request method to return bool if current method matches</p>"},{"location":"wire-input/wire-input-request-method/#return-value","title":"Return value","text":"<p><code>string</code> <code>bool</code></p>"},{"location":"wire-input/wire-input-whitelist/","title":"Wire input whitelist","text":""},{"location":"wire-input/wire-input-whitelist/#get-or-set-a-whitelist-variable","title":"Get or set a whitelist variable","text":"<p>Whitelist variables are used by modules and templates and assumed to be sanitized. Only place variables in the whitelist that you have already sanitized.</p> <p>The whitelist is a list of variables specifically set by the application as sanitized for use elsewhere in the application. This whitelist is not specifically used by ProcessWire unless you populate it from your templates or the API. When populated, it is used by the MarkupPagerNav module (for instance) to ensure that sanitized query string (GET) variables are maintained across paginations.</p>"},{"location":"wire-input/wire-input-whitelist/#examples","title":"Examples","text":"<pre><code>// Retrieve a GET variable, sanitize/validate it, and populate to whitelist\n$limit = (int) $input-&gt;get('limit');\nif($limit &lt; 10 || $limit &gt; 100) $limit = 25; // validate\n$input-&gt;whitelist('limit', $limit);\n\n// Retrieve a variable from the whitelist\n$limit = $input-&gt;whitelist('limit');\n</code></pre>"},{"location":"wire-input/wire-input-whitelist/#usage","title":"Usage","text":"<pre><code>// basic usage\n$mixed = $input-&gt;whitelist();\n\n// usage with all arguments\n$mixed = $input-&gt;whitelist(string $key = '', mixed $value = null);\n</code></pre>"},{"location":"wire-input/wire-input-whitelist/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code> (optional)</p> <p>string</p> <p>Whitelist variable name that you want to get or set.</p> <ul> <li>If $key is blank, it assumes you are asking to return the entire whitelist.</li> <li>If $key and $value are populated, it adds the value to the whitelist.</li> <li>If $key is an array, it adds all the values present in the array to the whitelist.</li> <li>If $value is omitted, it assumes you are asking for a value with $key, in which case it returns it.</li> </ul> <p><code>value</code> (optional)</p> <p>mixed</p> <p>Value you want to set (if setting a value). See explanation for the $key param.</p>"},{"location":"wire-input/wire-input-whitelist/#return-value","title":"Return value","text":"<p><code>null</code> <code>mixed</code> <code>WireInputData</code></p> <p>Returns whitelist variable value if getting a value (null if it doesn't exist).</p>"},{"location":"wire-log/wire-log-delete-all/","title":"Wire log delete all","text":""},{"location":"wire-log/wire-log-delete-all/#delete-all-log-files","title":"Delete all log files","text":"<p>Available since version 3.0.214.</p>"},{"location":"wire-log/wire-log-delete-all/#usage","title":"Usage","text":"<pre><code>// basic usage\n$array = $log-&gt;deleteAll();\n\n// usage with all arguments\n$array = $log-&gt;deleteAll(bool $throw = false);\n</code></pre>"},{"location":"wire-log/wire-log-delete-all/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>throw</code> (optional)</p> <p>bool</p> <p>Throw WireException if any delete fails? (default=false)</p>"},{"location":"wire-log/wire-log-delete-all/#return-value","title":"Return value","text":"<p><code>array</code></p> <p>Basenames of deleted log files</p>"},{"location":"wire-log/wire-log-disable/","title":"Wire log disable","text":""},{"location":"wire-log/wire-log-disable/#disable-the-given-log-name-temporarily-so-that-save-calls-do-not-record-entries-during-this-request","title":"Disable the given log name temporarily so that save() calls do not record entries during this request","text":"<p>Available since version 3.0.148.</p>"},{"location":"wire-log/wire-log-disable/#usage","title":"Usage","text":"<pre><code>$self = $log-&gt;disable(string $name);\n</code></pre>"},{"location":"wire-log/wire-log-disable/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Log name or specify '*' to disable all</p>"},{"location":"wire-log/wire-log-disable/#return-value","title":"Return value","text":"<p><code>self</code></p>"},{"location":"wire-log/wire-log-disable/#see-also","title":"See Also","text":"<ul> <li>WireLog::enable()</li> </ul>"},{"location":"wire-log/wire-log-enable/","title":"Wire log enable","text":""},{"location":"wire-log/wire-log-enable/#enable-a-previously-disabled-log","title":"Enable a previously disabled log","text":"<p>Available since version 3.0.148.</p>"},{"location":"wire-log/wire-log-enable/#usage","title":"Usage","text":"<pre><code>$self = $log-&gt;enable(string $name);\n</code></pre>"},{"location":"wire-log/wire-log-enable/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>Log name or specify '' to reverse a previous disable('') call.</p>"},{"location":"wire-log/wire-log-enable/#return-value","title":"Return value","text":"<p><code>self</code></p>"},{"location":"wire-log/wire-log-enable/#see-also","title":"See Also","text":"<ul> <li>WireLog::disable()</li> </ul>"},{"location":"wire-log/wire-log-error/","title":"Wire log error","text":""},{"location":"wire-log/wire-log-error/#record-an-error-message-in-the-error-log-errorstxt","title":"Record an error message in the error log (errors.txt)","text":"<p>Note: Fatal errors should instead always throw a WireException.</p>"},{"location":"wire-log/wire-log-error/#example","title":"Example","text":"<pre><code>// Log an error message to errors.txt log\n$log-&gt;error(\"Login attempt failed\");\n</code></pre>"},{"location":"wire-log/wire-log-error/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire = $log-&gt;error(string $text);\n\n// usage with all arguments\n$wire = $log-&gt;error(string $text, $flags = 0);\n</code></pre>"},{"location":"wire-log/wire-log-error/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>text</code></p> <p>string</p> <p>Text to save in the log</p> <p><code>flags</code> (optional)</p> <p>int, bool</p> <p>Specify boolean true to also display the error interactively (admin only).</p>"},{"location":"wire-log/wire-log-error/#return-value","title":"Return value","text":"<p><code>Wire</code> <code>WireLog</code></p>"},{"location":"wire-log/wire-log-exists/","title":"Wire log exists","text":""},{"location":"wire-log/wire-log-exists/#does-given-log-name-exist","title":"Does given log name exist?","text":"<p>Available since version 3.0.176.</p>"},{"location":"wire-log/wire-log-exists/#usage","title":"Usage","text":"<pre><code>$bool = $log-&gt;exists(string $name);\n</code></pre>"},{"location":"wire-log/wire-log-exists/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p>"},{"location":"wire-log/wire-log-exists/#return-value","title":"Return value","text":"<p><code>bool</code></p>"},{"location":"wire-log/wire-log-message/","title":"Wire log message","text":""},{"location":"wire-log/wire-log-message/#record-an-informational-or-success-message-in-the-message-log-messagestxt","title":"Record an informational or 'success' message in the message log (messages.txt)","text":""},{"location":"wire-log/wire-log-message/#example","title":"Example","text":"<pre><code>// Log message to messages.txt log\n$log-&gt;message(\"User updated profile\");\n</code></pre>"},{"location":"wire-log/wire-log-message/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wire = $log-&gt;message(string $text);\n\n// usage with all arguments\n$wire = $log-&gt;message(string $text, $flags = 0);\n</code></pre>"},{"location":"wire-log/wire-log-message/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>text</code></p> <p>string</p> <p>Message to log</p> <p><code>flags</code> (optional)</p> <p>bool, int</p> <p>Specify boolean true to also have the message displayed interactively (admin only).</p>"},{"location":"wire-log/wire-log-message/#return-value","title":"Return value","text":"<p><code>Wire</code> <code>WireLog</code></p>"},{"location":"wire-log/wire-log-path/","title":"Wire log path","text":""},{"location":"wire-log/wire-log-path/#return-disk-path-to-log-files","title":"Return disk path to log files","text":"<p>Available since version 3.0.214.</p>"},{"location":"wire-log/wire-log-path/#usage","title":"Usage","text":"<pre><code>$string = $log-&gt;path();\n</code></pre>"},{"location":"wire-log/wire-log-path/#return-value","title":"Return value","text":"<p><code>string</code></p>"},{"location":"wire-mail/wire-mail-body/","title":"Wire mail body","text":""},{"location":"wire-mail/wire-mail-body/#set-the-email-message-body-text-only","title":"Set the email message body (text only)","text":""},{"location":"wire-mail/wire-mail-body/#example","title":"Example","text":"<pre><code>$m = wireMail();\n$m-&gt;body('Hello world');\n</code></pre>"},{"location":"wire-mail/wire-mail-body/#usage","title":"Usage","text":"<pre><code>$m-&gt;body(string $body);\n</code></pre>"},{"location":"wire-mail/wire-mail-body/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>body</code></p> <p>string</p> <p>Email body in text only</p>"},{"location":"wire-mail/wire-mail-body/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-from-name/","title":"Wire mail from name","text":""},{"location":"wire-mail/wire-mail-from-name/#set-the-from-name","title":"Set the 'from' name","text":"<p>It is preferable to do this with the from() method, but this is provided to ensure that all properties can be set with direct access, i.e. $mailer-&gt;fromName = 'User Name';</p>"},{"location":"wire-mail/wire-mail-from-name/#usage","title":"Usage","text":"<pre><code>$m-&gt;fromName(string $name);\n</code></pre>"},{"location":"wire-mail/wire-mail-from-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>The 'from' name</p>"},{"location":"wire-mail/wire-mail-from-name/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-header/","title":"Wire mail header","text":""},{"location":"wire-mail/wire-mail-header/#set-any-email-header","title":"Set any email header","text":"<ul> <li>Multiple calls will append existing headers.</li> <li>To remove an existing header, specify NULL as the value.</li> </ul>"},{"location":"wire-mail/wire-mail-header/#usage","title":"Usage","text":"<pre><code>$m-&gt;header($key, string $value);\n</code></pre>"},{"location":"wire-mail/wire-mail-header/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>key</code></p> <p>string, array</p> <p>Header name</p> <p><code>value</code></p> <p>string</p> <p>Header value or specify null to unset</p>"},{"location":"wire-mail/wire-mail-header/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-headers/","title":"Wire mail headers","text":""},{"location":"wire-mail/wire-mail-headers/#set-multiple-email-headers-using-associative-array","title":"Set multiple email headers using associative array","text":""},{"location":"wire-mail/wire-mail-headers/#usage","title":"Usage","text":"<pre><code>$m-&gt;headers(array $headers);\n</code></pre>"},{"location":"wire-mail/wire-mail-headers/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>headers</code></p> <p>array</p>"},{"location":"wire-mail/wire-mail-headers/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-reply-to/","title":"Wire mail reply to","text":""},{"location":"wire-mail/wire-mail-reply-to/#set-the-reply-to-email-address-and-optionally-name-where-supported","title":"Set the 'reply-to' email address and optionally name (where supported)","text":""},{"location":"wire-mail/wire-mail-reply-to/#usage","title":"Usage","text":"<pre><code>// basic usage\n$m-&gt;replyTo(string $email);\n\n// usage with all arguments\n$m-&gt;replyTo(string $email, $name = null);\n</code></pre>"},{"location":"wire-mail/wire-mail-reply-to/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>email</code></p> <p>string</p> <p>Must be a single email address or \"User Name &lt;user</p> <p><code>name</code> (optional)</p>"},{"location":"wire-mail/wire-mail-reply-to/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-reply-to/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if provided email was invalid or in blacklist</li> </ul>"},{"location":"wire-mail/wire-mail-send/","title":"Wire mail send","text":""},{"location":"wire-mail/wire-mail-send/#send-the-email","title":"Send the email","text":"<p>Call this method only after you have specified at least the <code>subject</code>, <code>to</code> and <code>body</code>.</p>"},{"location":"wire-mail/wire-mail-send/#usage","title":"Usage","text":"<pre><code>$int = $m-&gt;send();\n</code></pre>"},{"location":"wire-mail/wire-mail-send/#return-value","title":"Return value","text":"<p><code>int</code></p> <p>Returns a positive number (indicating number of addresses emailed) or 0 on failure.</p>"},{"location":"wire-mail/wire-mail-subject/","title":"Wire mail subject","text":""},{"location":"wire-mail/wire-mail-subject/#set-the-email-subject","title":"Set the email subject","text":""},{"location":"wire-mail/wire-mail-subject/#usage","title":"Usage","text":"<pre><code>$m-&gt;subject(string $subject);\n</code></pre>"},{"location":"wire-mail/wire-mail-subject/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>subject</code></p> <p>string</p> <p>Email subject text</p>"},{"location":"wire-mail/wire-mail-subject/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-to-name/","title":"Wire mail to name","text":""},{"location":"wire-mail/wire-mail-to-name/#set-the-to-name","title":"Set the 'to' name","text":"<p>It is preferable to do this with the to() method, but this is provided to ensure that all properties can be set with direct access, i.e. $mailer-&gt;toName = 'User Name';</p> <p>This sets the 'to name' for whatever the last added 'to' email address was.</p>"},{"location":"wire-mail/wire-mail-to-name/#usage","title":"Usage","text":"<pre><code>$m-&gt;toName(string $name);\n</code></pre>"},{"location":"wire-mail/wire-mail-to-name/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>name</code></p> <p>string</p> <p>The 'to' name</p>"},{"location":"wire-mail/wire-mail-to-name/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-to-name/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if you attempt to set a toName before a to email.</li> </ul>"},{"location":"wire-mail/wire-mail-to/","title":"Wire mail to","text":""},{"location":"wire-mail/wire-mail-to/#set-the-email-to-address","title":"Set the email to address","text":"<p>Each added email addresses appends to any addresses already supplied, unless you specify NULL as the email address, in which case it clears them all.</p>"},{"location":"wire-mail/wire-mail-to/#usage","title":"Usage","text":"<pre><code>// basic usage\n$m-&gt;to();\n\n// usage with all arguments\n$m-&gt;to($email = null, string $name = null);\n</code></pre>"},{"location":"wire-mail/wire-mail-to/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>email</code> (optional)</p> <p>string, array, null</p> <p>Specify any ONE of the following:</p> <ul> <li>Single email address or \"User Name &lt;user</li> </ul> <p><code>name</code> (optional)</p> <p>string</p> <p>Optionally provide a TO name, applicable only when specifying #1 (single email) for the first argument.</p>"},{"location":"wire-mail/wire-mail-to/#return-value","title":"Return value","text":"<p><code>$this</code></p> <p>Object instance it was called from (method supports fluent interface).</p>"},{"location":"wire-mail/wire-mail-to/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if any provided emails were invalid or in blacklist</li> </ul>"},{"location":"wire-mail-tools/wire-mail-tools-from/","title":"Wire mail tools from","text":""},{"location":"wire-mail-tools/wire-mail-tools-from/#return-new-wiremail-instance-populated-with-from-email","title":"Return new WireMail instance populated with \u201cfrom\u201d email","text":"<p>Available since version 3.0.113.</p>"},{"location":"wire-mail-tools/wire-mail-tools-from/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wireMail = $mail-&gt;from(string $email);\n\n// usage with all arguments\n$wireMail = $mail-&gt;from(string $email, $name = null);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-from/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>email</code></p> <p>string</p> <p>Must be a single email address or \"User Name &lt;user</p> <p><code>name</code> (optional)</p>"},{"location":"wire-mail-tools/wire-mail-tools-from/#return-value","title":"Return value","text":"<p><code>WireMail</code></p>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/","title":"Wire mail tools is blacklist email","text":""},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#is-given-email-address-in-the-blacklist","title":"Is given email address in the blacklist?","text":"<ul> <li>Returns boolean false if not blacklisted, true if it is.</li> <li>Uses <code>$config-&gt;wireMail['blacklist']</code> array unless given another blacklist array in $options.</li> <li>Always independently verify that your blacklist rules are working before assuming they do.</li> <li>Specify true for the <code>why</code> option if you want to return the matching rule when email is in blacklist.</li> <li>Specify true for the <code>throw</code> option if you want a WireException thrown when email is blacklisted.</li> </ul> <p>Available since version 3.0.129.</p>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#example","title":"Example","text":"<pre><code>// Define blacklist in /site/config.php\n$config-&gt;wireMail('blacklist', [\n  'email@domain.com', // blacklist this email address\n  '@host.domain.com', // blacklist all emails ending with @host.domain.com\n  '@domain.com', // blacklist all emails ending with @domain.com\n  'domain.com', // blacklist any email address ending with domain.com (would include mydomain.com too).\n  '.domain.com', // blacklist any email address at any host off domain.com (domain.com, my.domain.com, but NOT mydomain.com).\n  '/something/', // blacklist any email containing \"something\". PCRE regex assumed when \"/\" is used as opening/closing delimiter.\n  '/.+@really\\.bad\\.com$/', // another example of using a PCRE regular expression (blocks all \"@really.bad.com\").\n]);\n\n// Test if email in blacklist\n$email = 'somebody@domain.com';\n$result = $mail-&gt;isBlacklistEmail($email, [ 'why' =&gt; true ]);\nif($result === false) {\n  echo \"&lt;p&gt;Email address is not blacklisted&lt;/p&gt;\";\n} else {\n  echo \"&lt;p&gt;Email is blacklisted by rule: $result&lt;/p&gt;\";\n}\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $mail-&gt;isBlacklistEmail(string $email);\n\n// usage with all arguments\n$bool = $mail-&gt;isBlacklistEmail(string $email, array $options = []);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>email</code></p> <p>string</p> <p>Email to check</p> <p><code>options</code> (optional)</p> <p>array</p> <ul> <li><code>blacklist</code> (array): Use this blacklist rather than <code>$config-&gt;emailBlacklist</code> (default=[])</li> <li><code>throw</code> (bool): Throw WireException if email is blacklisted? (default=false)</li> <li><code>why</code> (bool): Return string containing matching rule when email is blacklisted? (default=false)</li> </ul>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#return-value","title":"Return value","text":"<p><code>bool</code> <code>string</code></p> <p>Returns true if email is blacklisted, false if not. Returns string if <code>why</code> option specified + email blacklisted.</p>"},{"location":"wire-mail-tools/wire-mail-tools-is-blacklist-email/#exceptions","title":"Exceptions","text":"<p>Method can throw exceptions on error:</p> <ul> <li><code>WireException</code> - if given a blacklist that is not an array, or if requested to via <code>throw</code> option.</li> </ul>"},{"location":"wire-mail-tools/wire-mail-tools-mail-h-t-m-l/","title":"Wire mail tools mail h t m l","text":""},{"location":"wire-mail-tools/wire-mail-tools-mail-h-t-m-l/#send-an-email-with-message-assumed-to-be-in-html","title":"Send an email with message assumed to be in HTML","text":"<p>This is the same as the <code>$mail-&gt;mail()</code> method except that the message argument is assumed to be HTML rather than text. The text version of the email will be auto-generated from the given HTML.</p> <p>Available since version 3.0.109.</p>"},{"location":"wire-mail-tools/wire-mail-tools-mail-h-t-m-l/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $mail-&gt;mailHTML($to, string $subject, $messageHTML);\n\n// usage with all arguments\n$bool = $mail-&gt;mailHTML($to, string $subject, $messageHTML, array $headers = []);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-mail-h-t-m-l/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>to</code></p> <p>string, array</p> <p>Email address TO. For multiple, specify CSV string or array.</p> <p><code>subject</code></p> <p>string</p> <p>Email subject</p> <p><code>messageHTML</code></p> <p><code>headers</code> (optional)</p> <p>array</p> <p>Optional additional headers as [name=value] array or \"Name: Value\" newline-separated string. Use this argument to duplicate PHP mail() style arguments. No need to use if you used $options array for the $message argument.</p>"},{"location":"wire-mail-tools/wire-mail-tools-mail-h-t-m-l/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on fail.</p>"},{"location":"wire-mail-tools/wire-mail-tools-mail/","title":"Wire mail tools mail","text":""},{"location":"wire-mail-tools/wire-mail-tools-mail/#send-an-email-drop-in-replacement-for-php-mail-that-uses-the-same-arguments","title":"Send an email, drop-in replacement for PHP mail() that uses the same arguments","text":"<p>This is an alternative to using the <code>$mail-&gt;send()</code> method, and may be simpler for those converting existing PHP <code>mail()</code> calls to WireMail calls.</p> <p>This function duplicates the same arguments as PHP\u2019s mail function, enabling you to replace an existing PHP <code>mail(\u2026)</code> call with <code>$mail-&gt;mail(\u2026)</code>.</p> <p>But unlike PHP\u2019s mail function, this one can also send HTML (or multipart) emails if you provide an <code>$options</code> array for the <code>$message</code> argument (rather than a string). See the options array for the <code>$mail-&gt;send()</code> method for details.</p>"},{"location":"wire-mail-tools/wire-mail-tools-mail/#example","title":"Example","text":"<pre><code>// 1. Basic PHP mail() style usage\n$mail-&gt;mail('ryan@processwire.com', 'Subject', 'Message body');\n\n// 2. PHP mail() style usage with with $headers argument\n$mail-&gt;mail('ryan@processwire.com', 'Subject', 'Message body', 'From: hello@world.com');\n\n// 3. Alternate usage with html and text body\n$mail-&gt;mail('ryan@processwire.com', 'Subject', [\n  'bodyHTML' =&gt; '&lt;html&gt;&lt;body&gt;&lt;h1&gt;Message HTML body&lt;/h1&gt;&lt;/body&lt;/html&gt;',\n  'body' =&gt; 'Message text body',\n  'from' =&gt; 'hello@world.com',\n]);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-mail/#usage","title":"Usage","text":"<pre><code>// basic usage\n$bool = $mail-&gt;mail($to, string $subject, $message);\n\n// usage with all arguments\n$bool = $mail-&gt;mail($to, string $subject, $message, array $headers = []);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-mail/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>to</code></p> <p>string, array</p> <p>Email address TO. For multiple, specify CSV string or array.</p> <p><code>subject</code></p> <p>string</p> <p>Email subject</p> <p><code>message</code></p> <p>string, array</p> <p>Email body (PHP mail style), OR specify $options array with any of the following:</p> <ul> <li><code>bodyHTML</code> (string): Email body (HTML)</li> <li><code>body</code> (string): Email body (text). If not specified, and bodyHTML is, then text body will be auto-generated.</li> <li><code>from</code> (string): From email address</li> <li><code>replyTo</code> (string): Reply-to email address</li> <li><code>headers</code> (array): Associative array of header name =&gt; header value</li> </ul> <p><code>headers</code> (optional)</p> <p>array</p> <p>Optional additional headers as [name=value] array or \"Name: Value\" newline-separated string. Use this argument to duplicate PHP mail() style arguments. No need to use if you used $options array for the $message argument.</p>"},{"location":"wire-mail-tools/wire-mail-tools-mail/#return-value","title":"Return value","text":"<p><code>bool</code></p> <p>True on success, false on fail.</p>"},{"location":"wire-mail-tools/wire-mail-tools-new/","title":"Wire mail tools new","text":""},{"location":"wire-mail-tools/wire-mail-tools-new/#get-a-new-wiremail-instance-for-sending-email","title":"Get a new WireMail instance for sending email","text":"<p>Note: The <code>$options</code> argument added in 3.0.123, previous versions had no $options argument.</p>"},{"location":"wire-mail-tools/wire-mail-tools-new/#example","title":"Example","text":"<pre><code>$message = $mail-&gt;new();\n$message-&gt;to('user@domain.com')-&gt;from('you@company.com');\n$message-&gt;subject('Mail Subject')-&gt;body('Mail Body Text')-&gt;bodyHTML('Body HTML');\n$numSent = $message-&gt;send();\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-new/#usage","title":"Usage","text":"<pre><code>// basic usage\n$wireMail = $mail-&gt;new();\n\n// usage with all arguments\n$wireMail = $mail-&gt;new($options = []);\n</code></pre>"},{"location":"wire-mail-tools/wire-mail-tools-new/#arguments","title":"Arguments","text":"<p>Name</p> <p>Type(s)</p> <p>Description</p> <p><code>options</code> (optional)</p> <p>array, string</p> <p>Optional settings to override defaults, or string for <code>module</code> option:</p> <ul> <li><code>module</code> (string): Class name of WireMail module you want to use rather than auto detect, or 'WireMail' to force using default PHP mail. If requested module is not available, it will fall-back to one that is (or PHP mail), so check class name of returned value if there is any doubt about what WireMail module is being used.</li> <li>You may also specify: subject, from, fromName, to, toName, subject or any other WireMail property and it will be populated.</li> </ul>"},{"location":"wire-mail-tools/wire-mail-tools-new/#return-value","title":"Return value","text":"<p><code>WireMail</code></p>"}]}